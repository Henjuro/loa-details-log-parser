{"version":3,"file":"file-parser-worker.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: boolean;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = lineSplit[11] == \"1\";\r\n    this.isCrit = lineSplit[12] == \"1\";\r\n    this.isBackAttack = lineSplit[13] == \"1\";\r\n    this.isFrontAttack = lineSplit[14] == \"1\";\r\n    this.currentHp = tryParseInt(lineSplit[15]);\r\n    this.maxHp = tryParseInt(lineSplit[16]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 16) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    const critCount = logLine.isCrit ? 1 : 0;\r\n    const backAttackCount = logLine.isBackAttack ? 1 : 0;\r\n    const frontAttackCount = logLine.isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { LogParser } from \"./parser.js\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat.js\";\r\ndayjs.extend(customParseFormat);\r\n\r\nexport default function fileParserWorker(\r\n  filename: string,\r\n  splitOnPhaseTransition: boolean,\r\n  mainFolder: string,\r\n  parsedLogFolder: string,\r\n  callback: CallableFunction\r\n) {\r\n  try {\r\n    const filenameSlice = filename.slice(0, -4);\r\n    const jsonName = filenameSlice + \".json\";\r\n\r\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\r\n    if (!contents) return callback(null, \"empty log\");\r\n\r\n    const logParser = new LogParser(false);\r\n    if (splitOnPhaseTransition === true)\r\n      logParser.splitOnPhaseTransition = true;\r\n\r\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\r\n    for (const line of lines) {\r\n      logParser.parseLogLine(line);\r\n    }\r\n    logParser.splitEncounter();\r\n\r\n    const encounters = logParser.encounters;\r\n\r\n    if (encounters.length > 0) {\r\n      const masterLog = { encounters: [] };\r\n\r\n      for (const encounter of encounters) {\r\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\r\n\r\n        if (duration <= 1000) continue;\r\n\r\n        let mostDamageTakenEntity = {\r\n          name: \"\",\r\n          damageTaken: 0,\r\n          isPlayer: false\r\n        };\r\n\r\n        for (const i of Object.values(encounter.entities)) {\r\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\r\n            mostDamageTakenEntity = {\r\n              name: i.name,\r\n              damageTaken: i.damageTaken,\r\n              isPlayer: i.isPlayer\r\n            };\r\n          }\r\n        }\r\n\r\n        const encounterDetails = {\r\n          duration,\r\n          mostDamageTakenEntity\r\n        };\r\n\r\n        const encounterId = uuidv4();\r\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\r\n        masterLog.encounters.push({\r\n          encounterId,\r\n          encounterFile,\r\n          ...encounterDetails\r\n        });\r\n\r\n        fs.writeFileSync(\r\n          path.join(parsedLogFolder, encounterFile),\r\n          JSON.stringify({\r\n            ...encounter,\r\n            ...encounterDetails\r\n          })\r\n        );\r\n      }\r\n\r\n      fs.writeFileSync(\r\n        path.join(parsedLogFolder, jsonName),\r\n        JSON.stringify(masterLog)\r\n      );\r\n\r\n      return callback(null, \"log parsed\");\r\n    }\r\n\r\n    return callback(null, \"no encounters found\");\r\n  } catch (e) {\r\n    return callback(e, \"log parser error\");\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","isNaN","intNum","parseInt","_unused","lineSplit","this","timestamp","LogMessage","_LogLine","_this","call","message","_inheritsLoose","LogLine","LogPhaseTransition","_LogLine3","_this3","phaseCode","LogNewPc","_this4","_LogLine4","id","name","classId","gearScore","currentHp","maxHp","_LogLine5","LogNewNpc","_this5","LogDeath","_LogLine6","_this6","killerId","killerName","LogSkillStart","_LogLine7","_this7","skillId","skillName","LogSkillStage","_LogLine8","_this8","skillStage","LogDamage","_LogLine9","_this9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","isCrit","isBackAttack","isFrontAttack","LogHeal","_LogLine10","_this10","healAmount","_LogLine11","LogBuff","_this11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","_LogLine12","_this12","healingSkills","duration","Demonize","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","Date","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","entitiesCopy","cloneDeep","Object","keys","_i","_Object$keys","length","entity","lastUpdate","updateEntity","class","isPlayer","cancelReset","clearTimeout","_proto","splitEncounter","curState","push","parseLogLine","line","trim","split","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","updateTime","logLine","startsWith","setTimeout","LogLines","LogLines.LogDeath","getTime","includes","source","expires","damageOwner","damageTarget","totalDamage","maxDamage","backAttackCount","frontAttackCount","critCount","Math","max","LogLines.LogHeal","_step","_iterator","_createForOfIteratorHelperLoose","done","value","LogLines.LogBuff","dayjs","extend","customParseFormat","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","filenameSlice","slice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","_step2","_iterator2","encounter","mostDamageTakenEntity","_Object$values","i","encounterDetails","encounterId","uuidv4","v4","encounterFile","masterLog","writeFileSync","JSON","stringify","jsonName"],"mappings":"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"}