{"version":3,"file":"parser.umd.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.isCrit = lineSplit[12] == \"1\";\r\n    this.isBackAttack = lineSplit[13] == \"1\";\r\n    this.isFrontAttack = lineSplit[14] == \"1\";\r\n    this.currentHp = tryParseInt(lineSplit[15]);\r\n    this.maxHp = tryParseInt(lineSplit[16]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 16) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\r\n\r\n    const critCount = logLine.isCrit ? 1 : 0;\r\n    const backAttackCount = logLine.isBackAttack ? 1 : 0;\r\n    const frontAttackCount = logLine.isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","lineSplit","this","timestamp","Date","LogMessage","_LogLine","_this","message","_inheritsLoose","LogLine","LogPhaseTransition","_LogLine3","_this3","call","phaseCode","LogNewPc","_LogLine4","_this4","id","name","classId","gearScore","currentHp","maxHp","LogNewNpc","_LogLine5","_this5","LogDeath","_LogLine6","_this6","killerId","killerName","LogSkillStart","_LogLine7","_this7","skillId","skillName","_LogLine8","LogSkillStage","_this8","skillStage","LogDamage","_this9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","isCrit","isBackAttack","isFrontAttack","LogHeal","_LogLine10","_this10","healAmount","_LogLine11","LogBuff","_this11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","_LogLine12","_this12","healingSkills","duration","Demonize","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","entitiesCopy","cloneDeep","Object","keys","entity","_Object$keys","_i","lastUpdate","updateEntity","class","isPlayer","_proto","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","logLine","LogLines","startsWith","setTimeout","getTime","LogLines.LogSkillStart","includes","source","expires","LogLines.LogDamage","damageTarget","totalDamage","maxDamage","critCount","backAttackCount","frontAttackCount","damageOwner","Math","max","_step","_iterator","_createForOfIteratorHelperLoose","done","value","LogParser"],"mappings":"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"}