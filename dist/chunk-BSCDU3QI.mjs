import{a as m}from"./chunk-7S6EEVSW.mjs";import{a as p,c as f,d as b,e as D,f as S,g as L,h as T,i as y,j as H,k as $,l as N}from"./chunk-DVFNLLFI.mjs";import{a as k}from"./chunk-WSJANNVG.mjs";import{cloneDeep as i}from"lodash";import{EventEmitter as R}from"events";function E(){return{id:0,name:"",totalDamage:0,maxDamage:0,hits:{casts:0,total:0,crit:0,backAttack:0,frontAttack:0,counter:0},breakdown:[]}}function I(){return{lastUpdate:0,id:"",npcId:0,name:"",class:"",classId:0,isPlayer:!1,isDead:!1,deaths:0,deathTime:0,gearScore:0,currentHp:0,maxHp:0,damageDealt:0,healingDone:0,shieldDone:0,damageTaken:0,skills:{},hits:{casts:0,total:0,crit:0,backAttack:0,frontAttack:0,counter:0}}}var w=class extends R{resetTimer;debugLines;isLive;dontResetOnZoneChange;resetAfterPhaseTransition;splitOnPhaseTransition;removeOverkillDamage;phaseTransitionResetRequest;phaseTransitionResetRequestTime;game;encounters;healSources;constructor(t=!1){super(),this.resetTimer=null,this.debugLines=!1,this.isLive=t,this.dontResetOnZoneChange=!1,this.resetAfterPhaseTransition=!1,this.splitOnPhaseTransition=!1,this.removeOverkillDamage=!0,this.phaseTransitionResetRequest=!1,this.phaseTransitionResetRequestTime=0,this.resetState(),this.encounters=[],this.isLive&&setInterval(this.broadcastStateChange.bind(this),100)}resetState(){this.debugLines&&this.emit("log",{type:"debug",message:"Resetting state"});let t=i(this.game),e=+new Date;this.game={startedOn:e,lastCombatPacket:e,fightStartedOn:0,entities:{},damageStatistics:{totalDamageDealt:0,topDamageDealt:0,totalDamageTaken:0,topDamageTaken:0,totalHealingDone:0,topHealingDone:0,totalShieldDone:0,topShieldDone:0}},this.healSources=[],this.emit("reset-state",t)}softReset(){this.resetTimer=null;let t=i(this.game.entities);this.resetState();for(let e of Object.values(t))+new Date-e.lastUpdate>10*60*1e3||this.updateEntity(e.name,{name:e.name,npcId:e.npcId,class:e.class,classId:e.classId,isPlayer:e.isPlayer,gearScore:e.gearScore,maxHp:e.maxHp,currentHp:e.currentHp})}cancelReset(){this.resetTimer&&clearTimeout(this.resetTimer),this.resetTimer=null}splitEncounter(){let t=i(this.game);t.fightStartedOn!=0&&(t.damageStatistics.totalDamageDealt!=0||t.damageStatistics.totalDamageTaken)&&this.encounters.push(t),this.resetState()}broadcastStateChange(){let t=i(this.game);Object.values(t.entities).forEach(e=>{Object.values(e.skills).forEach(a=>{a.breakdown=[]})}),this.emit("state-change",t)}parseLogLine(t){if(!t)return;let e=t.trim().split("|");if(e.length<1||!e[0])return;let a=k(e[0]);try{switch(a){case 0:this.onMessage(e);break;case 1:this.onInitEnv();break;case 2:this.onPhaseTransition(e);break;case 3:this.onNewPc(e);break;case 4:this.onNewNpc(e);break;case 5:this.onDeath(e);break;case 6:this.onSkillStart(e);break;case 7:this.onSkillStage(e);break;case 8:this.onDamage(e);break;case 9:this.onHeal(e);break;case 10:this.onBuff(e);break;case 12:this.onCounterattack(e);break}}catch(s){this.emit("log",{type:"error",message:s})}}updateEntity(t,e){let a={lastUpdate:+new Date};t in this.game.entities?this.game.entities[t]={...I(),...this.game.entities[t],...e,...a}:this.game.entities[t]={...I(),...e,...a}}onMessage(t){let e=new p(t);this.debugLines&&this.emit("log",{type:"debug",message:`onMessage: ${e.message}`}),e.message.startsWith("Arguments:")||this.emit("message",e.message)}onInitEnv(){this.debugLines&&this.emit("log",{type:"debug",message:"onInitEnv"}),this.isLive?this.dontResetOnZoneChange===!1&&this.resetTimer==null&&(this.debugLines&&this.emit("log",{type:"debug",message:"Setting a reset timer"}),this.resetTimer=setTimeout(this.softReset.bind(this),6e3),this.emit("message","new-zone")):(this.splitEncounter(),this.emit("message","new-zone"))}onPhaseTransition(t){let e=new f(t);this.debugLines&&this.emit("log",{type:"debug",message:`onPhaseTransition: ${e.phaseCode}`}),this.isLive&&(this.emit("message",`phase-transition-${e.phaseCode}`),this.resetAfterPhaseTransition&&(this.phaseTransitionResetRequest=!0,this.phaseTransitionResetRequestTime=+new Date)),!this.isLive&&this.splitOnPhaseTransition&&this.splitEncounter()}onNewPc(t){let e=new b(t);this.debugLines&&this.emit("log",{type:"debug",message:`onNewPc: ${e.id}, ${e.name}, ${e.classId}, ${e.class}, ${e.gearScore}, ${e.currentHp}, ${e.maxHp}`}),this.updateEntity(e.name,{id:e.id,name:e.name,class:e.class,classId:e.classId,isPlayer:!0,...e.gearScore&&e.gearScore!=0&&{gearScore:e.gearScore},currentHp:e.currentHp,maxHp:e.maxHp})}onNewNpc(t){let e=new D(t);this.debugLines&&this.emit("log",{type:"debug",message:`onNewNpc: ${e.id}, ${e.name}, ${e.currentHp}, ${e.maxHp}`}),this.updateEntity(e.name,{id:e.id,name:e.name,npcId:e.npcId,isPlayer:!1,currentHp:e.currentHp,maxHp:e.maxHp})}onDeath(t){let e=new S(t);this.debugLines&&this.emit("log",{type:"debug",message:`onDeath: ${e.name} ${e.killerName}`});let a=this.game.entities[e.name],s=0;a?a.isDead?s=a.deaths:s=a.deaths+1:s=1,this.updateEntity(e.name,{name:e.name,isDead:!0,deathTime:+e.timestamp,deaths:s})}onSkillStart(t){let e=new L(t);this.debugLines&&this.emit("log",{type:"debug",message:`onSkillStart: ${e.id}, ${e.name}, ${e.skillId}, ${e.skillName}`}),Object.keys(m).includes(e.skillName)&&this.healSources.push({source:e.name,expires:+e.timestamp+m[e.skillName].duration}),this.updateEntity(e.name,{name:e.name,isDead:!1});let a=this.game.entities[e.name];a&&(a.hits.casts+=1,e.skillName in a.skills||(a.skills[e.skillName]={...E(),id:e.skillId,name:e.skillName},a.skills[e.skillName].hits.casts+=1))}onSkillStage(t){let e=new T(t);this.debugLines&&this.emit("log",{type:"debug",message:`onSkillStage: ${e.name}, ${e.skillId}, ${e.skillName}, ${e.skillStage}`})}onDamage(t){if(t.length<13)return;let e=new y(t);this.debugLines&&this.emit("log",{type:"debug",message:`onDamage: ${e.id}, ${e.name}, ${e.skillId}, ${e.skillName}, ${e.skillEffectId}, ${e.skillEffect}, ${e.targetId}, ${e.targetName}, ${e.damage}, ${e.currentHp}, ${e.maxHp}`}),this.phaseTransitionResetRequest&&this.phaseTransitionResetRequestTime>0&&this.phaseTransitionResetRequestTime<+new Date-1500&&(this.softReset(),this.phaseTransitionResetRequest=!1),this.updateEntity(e.name,{id:e.id,name:e.name}),this.updateEntity(e.targetName,{id:e.targetId,name:e.targetName,currentHp:e.currentHp,maxHp:e.maxHp});let a=this.game.entities[e.name],s=this.game.entities[e.targetName];if(!a||!s)return;!s.isPlayer&&this.removeOverkillDamage&&e.currentHp<0&&(e.damage=e.damage+e.currentHp),e.skillId===0&&e.skillEffectId!==0&&(e.skillId=e.skillEffectId,e.skillName=e.skillEffect),e.skillName in a.skills||(a.skills[e.skillName]={...E(),id:e.skillId,name:e.skillName});let n=e.damageModifier&15,l=(e.damageModifier>>4&7)-1;if(e.skillName==="Bleed"&&e.damage>1e7||e.skillName==="Bleed"&&n===11)return;let r=n===1||n===8,g=l===0,h=l===1,c=r?1:0,d=g?1:0,u=h?1:0;if(a.skills[e.skillName].totalDamage+=e.damage,e.damage>a.skills[e.skillName].maxDamage&&(a.skills[e.skillName].maxDamage=e.damage),a.damageDealt+=e.damage,s.damageTaken+=e.damage,e.skillName!=="Bleed"&&(a.hits.total+=1,a.hits.crit+=c,a.hits.backAttack+=d,a.hits.frontAttack+=u,a.skills[e.skillName].hits.total+=1,a.skills[e.skillName].hits.crit+=c,a.skills[e.skillName].hits.backAttack+=d,a.skills[e.skillName].hits.frontAttack+=u),a.isPlayer){this.game.damageStatistics.totalDamageDealt+=e.damage,this.game.damageStatistics.topDamageDealt=Math.max(this.game.damageStatistics.topDamageDealt,a.damageDealt);let A={timestamp:+e.timestamp,damage:e.damage,targetEntity:s.id,isCrit:r,isBackAttack:g,isFrontAttack:h};a.skills[e.skillName].breakdown.push(A)}s.isPlayer&&(this.game.damageStatistics.totalDamageTaken+=e.damage,this.game.damageStatistics.topDamageTaken=Math.max(this.game.damageStatistics.topDamageTaken,s.damageTaken)),this.game.fightStartedOn===0&&(this.game.fightStartedOn=+e.timestamp),this.game.lastCombatPacket=+e.timestamp}onHeal(t){let e=new H(t);this.debugLines&&this.emit("log",{type:"debug",message:`onHeal: ${e.id}, ${e.name}, ${e.healAmount}`});let a="";for(let s of this.healSources)if(s.expires>=+e.timestamp){a=s.source;break}!a||(this.updateEntity(a,{name:a}),this.game.entities[a].healingDone+=e.healAmount,this.game.entities[a].isPlayer&&(this.game.damageStatistics.totalHealingDone+=e.healAmount,this.game.damageStatistics.topHealingDone=Math.max(this.game.damageStatistics.topHealingDone,this.game.entities[a].healingDone)))}onBuff(t){let e=new $(t);this.debugLines&&this.emit("log",{type:"debug",message:`onBuff: ${e.id}, ${e.name}, ${e.buffId}, ${e.buffName}, ${e.sourceId}, ${e.sourceName}, ${e.shieldAmount}`}),e.shieldAmount&&e.isNew&&(this.updateEntity(e.name,{name:e.name}),this.game.entities[e.name].shieldDone+=e.shieldAmount,this.game.entities[e.name].isPlayer&&(this.game.damageStatistics.totalShieldDone+=e.shieldAmount,this.game.damageStatistics.topShieldDone=Math.max(this.game.damageStatistics.topShieldDone,this.game.entities[e.name].shieldDone)))}onCounterattack(t){let e=new N(t);this.debugLines&&this.emit("log",{type:"debug",message:`onCounterattack: ${e.id}, ${e.name}`}),this.updateEntity(e.name,{name:e.name}),this.game.entities[e.name].hits.counter+=1}};export{w as a};
