import{a as p}from"./chunk-7S6EEVSW.mjs";import{a as k,b,c as y,d as S,e as D,f as L,g as T,h as H,i as E,j as P,k as I,l as $}from"./chunk-DVFNLLFI.mjs";import{a as f}from"./chunk-WSJANNVG.mjs";import{cloneDeep as n}from"lodash";import{EventEmitter as R}from"events";function w(){return{id:0,name:"",totalDamage:0,maxDamage:0,hits:{casts:0,total:0,crit:0,backAttack:0,frontAttack:0,counter:0},breakdown:[]}}function A(){return{lastUpdate:0,id:"",npcId:0,name:"",class:"",classId:0,isPlayer:!1,isDead:!1,deaths:0,deathTime:0,gearScore:0,currentHp:0,maxHp:0,damageDealt:0,healingDone:0,shieldDone:0,damageTaken:0,skills:{},hits:{casts:0,total:0,crit:0,backAttack:0,frontAttack:0,counter:0}}}var N=class extends R{resetTimer;debugLines;isLive;dontResetOnZoneChange;resetAfterPhaseTransition;splitOnPhaseTransition;removeOverkillDamage;phaseTransitionResetRequest;phaseTransitionResetRequestTime;game;encounters;healSources;constructor(t=!1){super(),this.resetTimer=null,this.debugLines=!1,this.isLive=t,this.dontResetOnZoneChange=!1,this.resetAfterPhaseTransition=!1,this.splitOnPhaseTransition=!1,this.removeOverkillDamage=!0,this.phaseTransitionResetRequest=!1,this.phaseTransitionResetRequestTime=0,this.resetState(),this.encounters=[],this.isLive&&setInterval(this.broadcastStateChange.bind(this),100)}updateOrCreateLocalPlayer(t){if(this.game&&t!==""){let e=this.game.entities[this.game.localPlayer];e?this.updateEntity(this.game.localPlayer,{id:t,name:e.name,class:e.class,classId:e.classId,isPlayer:!0,gearScore:e.gearScore}):(this.game.localPlayer="You",this.updateEntity(this.game.localPlayer,{id:t,name:"You",isPlayer:!0}))}}resetState(){this.debugLines&&this.emit("log",{type:"debug",message:"Resetting state"});let t=n(this.game),e=+new Date,a={};if(this.game={startedOn:e,lastCombatPacket:e,fightStartedOn:0,localPlayer:this.game?.localPlayer??"",entities:a,damageStatistics:{totalDamageDealt:0,topDamageDealt:0,totalDamageTaken:0,topDamageTaken:0,totalHealingDone:0,topHealingDone:0,totalShieldDone:0,topShieldDone:0}},t&&t.localPlayer!==""){let i=t.entities[this.game.localPlayer];i&&this.updateEntity(i.name,{id:i.id,name:i.name,class:i.class,classId:i.classId,isPlayer:!0,gearScore:i.gearScore})}this.healSources=[],this.emit("reset-state",t)}softReset(){this.resetTimer=null;let t=n(this.game.entities);this.resetState();for(let e of Object.values(t))this.updateEntity(e.name,{name:e.name,npcId:e.npcId,class:e.class,classId:e.classId,isPlayer:e.isPlayer,gearScore:e.gearScore,maxHp:e.maxHp,currentHp:e.currentHp})}cancelReset(){this.resetTimer&&clearTimeout(this.resetTimer),this.resetTimer=null}splitEncounter(t=!1){let e=n(this.game);e.fightStartedOn!=0&&(e.damageStatistics.totalDamageDealt!=0||e.damageStatistics.totalDamageTaken)&&this.encounters.push(e),t?this.softReset():this.resetState()}broadcastStateChange(){let t=n(this.game);Object.values(t.entities).forEach(e=>{Object.values(e.skills).forEach(a=>{a.breakdown=[]})}),this.emit("state-change",t)}parseLogLine(t){if(!t)return;let e=t.trim().split("|");if(e.length<1||!e[0])return;let a=f(e[0]);try{switch(a){case 0:this.onMessage(e);break;case 1:this.onInitEnv(e);break;case 2:this.onPhaseTransition(e);break;case 3:this.onNewPc(e);break;case 4:this.onNewNpc(e);break;case 5:this.onDeath(e);break;case 6:this.onSkillStart(e);break;case 7:this.onSkillStage(e);break;case 8:this.onDamage(e);break;case 9:this.onHeal(e);break;case 10:this.onBuff(e);break;case 12:this.onCounterattack(e);break}}catch(i){this.emit("log",{type:"error",message:i})}}updateEntity(t,e){let a={lastUpdate:+new Date},i;return t in this.game.entities?i={...A(),...this.game.entities[t],...e,...a}:i={...A(),...e,...a},this.game.entities[t]=i,i}onMessage(t){let e=new k(t);this.debugLines&&this.emit("log",{type:"debug",message:`onMessage: ${e.message}`}),e.message.startsWith("Arguments:")||this.emit("message",e.message)}onInitEnv(t){let e=new b(t);if(this.debugLines&&this.emit("log",{type:"debug",message:"onInitEnv"}),this.updateOrCreateLocalPlayer(e.playerId),this.isLive){for(let a in this.game.entities)this.game.entities[a]?.name!==this.game.localPlayer&&this.game.entities[a]?.hits.total===0&&delete this.game.entities[a];this.dontResetOnZoneChange===!1&&this.resetTimer==null&&(this.debugLines&&this.emit("log",{type:"debug",message:"Setting a reset timer"}),this.resetTimer=setTimeout(()=>{this.softReset()},6e3),this.emit("message","new-zone"))}else this.splitEncounter(),this.emit("message","new-zone")}onPhaseTransition(t){let e=new y(t);this.debugLines&&this.emit("log",{type:"debug",message:`onPhaseTransition: ${e.phaseCode}`}),this.isLive&&(this.emit("message",`phase-transition-${e.phaseCode}`),this.resetAfterPhaseTransition&&(this.phaseTransitionResetRequest=!0,this.phaseTransitionResetRequestTime=+new Date)),!this.isLive&&this.splitOnPhaseTransition&&this.splitEncounter(!0)}onNewPc(t){let e=new S(t);if(this.debugLines&&this.emit("log",{type:"debug",message:`onNewPc: ${e.id}, ${e.name}, ${e.classId}, ${e.class}, ${e.gearScore}, ${e.currentHp}, ${e.maxHp}`}),this.game&&this.game.localPlayer!==""){let a=this.game.entities[this.game.localPlayer];a&&a.id===e.id&&(this.game.localPlayer=e.name)}this.updateEntity(e.name,{id:e.id,name:e.name,class:e.class,classId:e.classId,isPlayer:!0,...e.gearScore&&e.gearScore!=0&&{gearScore:e.gearScore},currentHp:e.currentHp,maxHp:e.maxHp})}onNewNpc(t){let e=new D(t);this.debugLines&&this.emit("log",{type:"debug",message:`onNewNpc: ${e.id}, ${e.name}, ${e.currentHp}, ${e.maxHp}`}),this.updateEntity(e.name,{id:e.id,name:e.name,npcId:e.npcId,isPlayer:!1,currentHp:e.currentHp,maxHp:e.maxHp})}onDeath(t){let e=new L(t);this.debugLines&&this.emit("log",{type:"debug",message:`onDeath: ${e.name} ${e.killerName}`});let a=this.game.entities[e.name],i=0;a?a.isDead?i=a.deaths:i=a.deaths+1:i=1,this.updateEntity(e.name,{name:e.name,isDead:!0,deathTime:+e.timestamp,deaths:i})}onSkillStart(t){let e=new T(t);this.debugLines&&this.emit("log",{type:"debug",message:`onSkillStart: ${e.id}, ${e.name}, ${e.skillId}, ${e.skillName}`});let a=p[e.skillName];a&&this.healSources.push({source:e.name,expires:+e.timestamp+a.duration}),this.updateEntity(e.name,{name:e.name,isDead:!1});let i=this.game.entities[e.name];if(i){i.hits.casts+=1;let s=i.skills[e.skillName];s||(s={...w(),id:e.skillId,name:e.skillName},i.skills[e.skillName]=s,s.hits.casts+=1)}}onSkillStage(t){let e=new H(t);this.debugLines&&this.emit("log",{type:"debug",message:`onSkillStage: ${e.name}, ${e.skillId}, ${e.skillName}, ${e.skillStage}`})}onDamage(t){if(t.length<13)return;let e=new E(t);this.debugLines&&this.emit("log",{type:"debug",message:`onDamage: ${e.id}, ${e.name}, ${e.skillId}, ${e.skillName}, ${e.skillEffectId}, ${e.skillEffect}, ${e.targetId}, ${e.targetName}, ${e.damage}, ${e.currentHp}, ${e.maxHp}`}),this.phaseTransitionResetRequest&&this.phaseTransitionResetRequestTime>0&&this.phaseTransitionResetRequestTime<+new Date-8e3&&(this.softReset(),this.phaseTransitionResetRequest=!1),this.updateEntity(e.name,{id:e.id,name:e.name}),this.updateEntity(e.targetName,{id:e.targetId,name:e.targetName,currentHp:e.currentHp,maxHp:e.maxHp});let a=this.game.entities[e.name],i=this.game.entities[e.targetName];if(!a||!i)return;!i.isPlayer&&this.removeOverkillDamage&&e.currentHp<0&&(e.damage=e.damage+e.currentHp),e.skillId===0&&e.skillEffectId!==0&&(e.skillId=e.skillEffectId,e.skillName=e.skillEffect);let s=a.skills[e.skillName];s||(s={...w(),id:e.skillId,name:e.skillName},a.skills[e.skillName]=s);let o=e.damageModifier&15,l=(e.damageModifier>>4&7)-1;if(e.skillName==="Bleed"&&e.damage>1e7||e.skillName==="Bleed"&&o===11)return;let m=o===1||o===8,g=l===0,c=l===1,h=m?1:0,d=g?1:0,u=c?1:0;if(s.totalDamage+=e.damage,e.damage>s.maxDamage&&(s.maxDamage=e.damage),a.damageDealt+=e.damage,i.damageTaken+=e.damage,e.skillName!=="Bleed"&&(a.hits.total+=1,a.hits.crit+=h,a.hits.backAttack+=d,a.hits.frontAttack+=u,s.hits.total+=1,s.hits.crit+=h,s.hits.backAttack+=d,s.hits.frontAttack+=u),a.isPlayer){this.game.damageStatistics.totalDamageDealt+=e.damage,this.game.damageStatistics.topDamageDealt=Math.max(this.game.damageStatistics.topDamageDealt,a.damageDealt);let x={timestamp:+e.timestamp,damage:e.damage,targetEntity:i.id,isCrit:m,isBackAttack:g,isFrontAttack:c};s.breakdown.push(x)}i.isPlayer&&(this.game.damageStatistics.totalDamageTaken+=e.damage,this.game.damageStatistics.topDamageTaken=Math.max(this.game.damageStatistics.topDamageTaken,i.damageTaken)),this.game.fightStartedOn===0&&(this.game.fightStartedOn=+e.timestamp),this.game.lastCombatPacket=+e.timestamp}onHeal(t){let e=new P(t);this.debugLines&&this.emit("log",{type:"debug",message:`onHeal: ${e.id}, ${e.name}, ${e.healAmount}`});let a="";for(let s of this.healSources)if(s.expires>=+e.timestamp){a=s.source;break}if(!a)return;let i=this.updateEntity(a,{name:a});i.healingDone+=e.healAmount,i.isPlayer&&(this.game.damageStatistics.totalHealingDone+=e.healAmount,this.game.damageStatistics.topHealingDone=Math.max(this.game.damageStatistics.topHealingDone,i.healingDone))}onBuff(t){let e=new I(t);if(this.debugLines&&this.emit("log",{type:"debug",message:`onBuff: ${e.id}, ${e.name}, ${e.buffId}, ${e.buffName}, ${e.sourceId}, ${e.sourceName}, ${e.shieldAmount}`}),e.shieldAmount&&e.isNew){let a=this.updateEntity(e.name,{name:e.name});a.shieldDone+=e.shieldAmount,a.isPlayer&&(this.game.damageStatistics.totalShieldDone+=e.shieldAmount,this.game.damageStatistics.topShieldDone=Math.max(this.game.damageStatistics.topShieldDone,a.shieldDone))}}onCounterattack(t){let e=new $(t);this.debugLines&&this.emit("log",{type:"debug",message:`onCounterattack: ${e.id}, ${e.name}`});let a=this.updateEntity(e.name,{name:e.name});a.hits.counter+=1}};export{N as a};
