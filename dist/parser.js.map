{"version":3,"file":"parser.js","sources":["../src/util.ts","../src/constants.ts","../src/log-lines.ts","../src/parser.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n\r\nexport enum HitFlag {\r\n  HIT_FLAG_NORMAL = 0,\r\n  HIT_FLAG_CRITICAL = 1,\r\n  HIT_FLAG_MISS = 2,\r\n  HIT_FLAG_INVINCIBLE = 3,\r\n  HIT_FLAG_DOT = 4,\r\n  HIT_FLAG_IMMUNE = 5,\r\n  HIT_FLAG_IMMUNE_SILENCED = 6,\r\n  HIT_FLAG_FONT_SILENCED = 7,\r\n  HIT_FLAG_DOT_CRITICAL = 8,\r\n  HIT_FLAG_DODGE = 9,\r\n  HIT_FLAG_REFLECT = 10,\r\n  HIT_FLAG_DAMAGE_SHARE = 11,\r\n  HIT_FLAG_DODGE_HIT = 12,\r\n  HIT_FLAG_MAX = 13,\r\n  HIT_OPTION_BACK_ATTACK = 1 << (0 + 4),\r\n  HIT_OPTION_FRONTAL_ATTACK = 1 << (1 + 4),\r\n  HIT_OPTION_FLANK_ATTACK = 1 << (2 + 4)\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.currentHp = tryParseInt(lineSplit[12]);\r\n    this.maxHp = tryParseInt(lineSplit[13]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills, HitFlag } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 13) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\r\n\r\n    const isCrit =\r\n      (logLine.damageModifier &\r\n        (HitFlag.HIT_FLAG_CRITICAL | HitFlag.HIT_FLAG_DOT_CRITICAL)) >\r\n      0;\r\n    const isBackAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_BACK_ATTACK) > 0;\r\n    const isFrontAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_FRONTAL_ATTACK) > 0;\r\n\r\n    const critCount = isCrit ? 1 : 0;\r\n    const backAttackCount = isBackAttack ? 1 : 0;\r\n    const frontAttackCount = isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","HitFlag","lineSplit","this","timestamp","Date","LogMessage","_this","_LogLine","call","message","LogLine","_LogLine3","LogPhaseTransition","_this3","phaseCode","_inheritsLoose","_LogLine4","LogNewPc","_this4","id","name","classId","gearScore","currentHp","maxHp","LogNewNpc","_LogLine5","_this5","LogDeath","_LogLine6","_this6","killerId","killerName","LogSkillStart","_this7","_LogLine7","skillId","skillName","LogSkillStage","_LogLine8","_this8","skillStage","_LogLine9","LogDamage","_this9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","_this10","_LogLine10","healAmount","LogBuff","_LogLine11","_this11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","_this12","_LogLine12","healingSkills","duration","Demonize","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","_proto","softReset","entitiesCopy","cloneDeep","_i","_Object$keys","Object","keys","length","entity","lastUpdate","updateEntity","class","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","logLine","LogLines","startsWith","setTimeout","LogLines.LogDeath","getTime","LogLines.LogSkillStart","includes","source","expires","LogLines.LogDamage","damageOwner","damageTarget","totalDamage","maxDamage","critCount","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","backAttackCount","HIT_OPTION_BACK_ATTACK","frontAttackCount","HIT_OPTION_FRONTAL_ATTACK","Math","max","LogLines.LogHeal","_step","_iterator","_createForOfIteratorHelperLoose","done","value","LogParser"],"mappings":"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"}