"use strict";var Z=Object.create;var b=Object.defineProperty;var J=Object.getOwnPropertyDescriptor;var W=Object.getOwnPropertyNames;var X=Object.getPrototypeOf,Q=Object.prototype.hasOwnProperty;var Y=(a,t)=>{for(var e in t)b(a,e,{get:t[e],enumerable:!0})},U=(a,t,e,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let n of W(t))!Q.call(a,n)&&n!==e&&b(a,n,{get:()=>t[n],enumerable:!(s=J(t,n))||s.enumerable});return a};var T=(a,t,e)=>(e=a!=null?Z(X(a)):{},U(t||!a||!a.__esModule?b(e,"default",{value:a,enumerable:!0}):e,a)),V=a=>U(b({},"__esModule",{value:!0}),a);var te={};Y(te,{default:()=>z});module.exports=V(te);var q=T(require("dayjs"));var u=require("lodash"),j=require("events");function i(a,t=0,e=10,s=!1){if(typeof a=="number")return isNaN(a)?t:a;let n;try{n=s?parseFloat(a):parseInt(a,e),isNaN(n)&&(n=t)}catch{n=t}return n}var r=class{lineSplit;timestamp;constructor(t){this.lineSplit=t,this.timestamp=new Date(this.lineSplit[1])}},I=class extends r{message;constructor(t){super(t),this.message=this.lineSplit[2]}};var D=class extends r{phaseCode;constructor(t){super(t),this.phaseCode=i(t[2])}},y=class extends r{id;name;classId;class;gearScore;currentHp;maxHp;constructor(t){super(t),this.id=t[2],this.name=t[3]||"Unknown Entity",this.classId=i(t[4]),this.class=t[5]||"UnknownClass",this.gearScore=i(t[7],0,10,!0),this.currentHp=i(t[8]),this.maxHp=i(t[9])}},L=class extends r{id;npcId;name;currentHp;maxHp;constructor(t){super(t),this.id=t[2],this.npcId=i(t[3]),this.name=t[4]||"Unknown Entity",this.currentHp=i(t[5]),this.maxHp=i(t[6])}},N=class extends r{id;name;killerId;killerName;constructor(t){super(t),this.id=t[2],this.name=t[3]||"Unknown Entity",this.killerId=t[4],this.killerName=t[5]||"Unknown Entity"}},E=class extends r{id;name;skillId;skillName;constructor(t){super(t),this.id=t[2],this.name=t[3]||"Unknown Entity",this.skillId=i(t[4]),this.skillName=t[5]||"Unknown Skill"}},A=class extends r{id;name;skillId;skillName;skillStage;constructor(t){super(t),this.id=t[2],this.name=t[3]||"Unknown Entity",this.skillId=t[4],this.skillName=t[5]||"Unknown Skill",this.skillStage=i(t[6])}},x=class extends r{id;name;skillId;skillName;skillEffectId;skillEffect;targetId;targetName;damage;damageModifier;currentHp;maxHp;constructor(t){super(t),this.id=t[2],this.name=t[3]||"Unknown Entity",this.skillId=i(t[4]),this.skillName=t[5]||"Unknown Skill",this.skillEffectId=i(t[6]),this.skillEffect=t[7],this.targetId=t[8],this.targetName=t[9]||"Unknown Entity",this.damage=i(t[10]),this.damageModifier=i(t[11],0,16),this.currentHp=i(t[12]),this.maxHp=i(t[13])}},w=class extends r{id;name;healAmount;constructor(t){super(t),this.id=t[2],this.name=t[3]||"Unknown Entity",this.healAmount=i(t[4])}},_=class extends r{id;name;buffId;buffName;isNew;sourceId;sourceName;shieldAmount;constructor(t){super(t),this.id=t[2],this.name=t[3]||"Unknown Entity",this.buffId=t[4],this.buffName=t[5],this.isNew=t[6]=="1",this.sourceId=t[7],this.sourceName=t[8]||"Unknown Entity",this.shieldAmount=i(t[9])}},H=class extends r{id;name;constructor(t){super(t),this.id=t[2],this.name=t[3]||"Unknown Entity"}};var C={"Serenade of Salvation":{duration:3},"Holy Aura":{duration:16e3},"Holy Protection":{duration:7e3},Demonize:{duration:1500}};function M(){return{id:0,name:"",totalDamage:0,maxDamage:0,hits:{casts:0,total:0,crit:0,backAttack:0,frontAttack:0,counter:0},breakdown:[]}}function B(){return{lastUpdate:0,id:"",npcId:0,name:"",class:"",classId:0,isPlayer:!1,isDead:!1,deaths:0,deathTime:0,gearScore:0,currentHp:0,maxHp:0,damageDealt:0,healingDone:0,shieldDone:0,damageTaken:0,skills:{},hits:{casts:0,total:0,crit:0,backAttack:0,frontAttack:0,counter:0}}}var S=class extends j.EventEmitter{resetTimer;debugLines;isLive;dontResetOnZoneChange;resetAfterPhaseTransition;splitOnPhaseTransition;removeOverkillDamage;phaseTransitionResetRequest;phaseTransitionResetRequestTime;game;encounters;healSources;constructor(t=!1){super(),this.resetTimer=null,this.debugLines=!1,this.isLive=t,this.dontResetOnZoneChange=!1,this.resetAfterPhaseTransition=!1,this.splitOnPhaseTransition=!1,this.removeOverkillDamage=!0,this.phaseTransitionResetRequest=!1,this.phaseTransitionResetRequestTime=0,this.resetState(),this.encounters=[],this.isLive&&setInterval(this.broadcastStateChange.bind(this),100)}resetState(){this.debugLines&&this.emit("log",{type:"debug",message:"Resetting state"});let t=(0,u.cloneDeep)(this.game),e=+new Date;this.game={startedOn:e,lastCombatPacket:e,fightStartedOn:0,entities:{},damageStatistics:{totalDamageDealt:0,topDamageDealt:0,totalDamageTaken:0,topDamageTaken:0,totalHealingDone:0,topHealingDone:0,totalShieldDone:0,topShieldDone:0}},this.healSources=[],this.emit("reset-state",t)}softReset(){this.resetTimer=null;let t=(0,u.cloneDeep)(this.game.entities);this.resetState();for(let e of Object.values(t))+new Date-e.lastUpdate>10*60*1e3||this.updateEntity(e.name,{name:e.name,npcId:e.npcId,class:e.class,classId:e.classId,isPlayer:e.isPlayer,gearScore:e.gearScore,maxHp:e.maxHp,currentHp:e.currentHp})}cancelReset(){this.resetTimer&&clearTimeout(this.resetTimer),this.resetTimer=null}splitEncounter(){let t=(0,u.cloneDeep)(this.game);t.fightStartedOn!=0&&(t.damageStatistics.totalDamageDealt!=0||t.damageStatistics.totalDamageTaken)&&this.encounters.push(t),this.resetState()}broadcastStateChange(){let t=(0,u.cloneDeep)(this.game);Object.values(t.entities).forEach(e=>{Object.values(e.skills).forEach(s=>{s.breakdown=[]})}),this.emit("state-change",t)}parseLogLine(t){if(!t)return;let e=t.trim().split("|");if(e.length<1||!e[0])return;let s=i(e[0]);try{switch(s){case 0:this.onMessage(e);break;case 1:this.onInitEnv();break;case 2:this.onPhaseTransition(e);break;case 3:this.onNewPc(e);break;case 4:this.onNewNpc(e);break;case 5:this.onDeath(e);break;case 6:this.onSkillStart(e);break;case 7:this.onSkillStage(e);break;case 8:this.onDamage(e);break;case 9:this.onHeal(e);break;case 10:this.onBuff(e);break;case 12:this.onCounterattack(e);break}}catch(n){this.emit("log",{type:"error",message:n})}}updateEntity(t,e){let s={lastUpdate:+new Date};t in this.game.entities?this.game.entities[t]={...B(),...this.game.entities[t],...e,...s}:this.game.entities[t]={...B(),...e,...s}}onMessage(t){let e=new I(t);this.debugLines&&this.emit("log",{type:"debug",message:`onMessage: ${e.message}`}),e.message.startsWith("Arguments:")||this.emit("message",e.message)}onInitEnv(){this.debugLines&&this.emit("log",{type:"debug",message:"onInitEnv"}),this.isLive?this.dontResetOnZoneChange===!1&&this.resetTimer==null&&(this.debugLines&&this.emit("log",{type:"debug",message:"Setting a reset timer"}),this.resetTimer=setTimeout(this.softReset.bind(this),6e3),this.emit("message","new-zone")):(this.splitEncounter(),this.emit("message","new-zone"))}onPhaseTransition(t){let e=new D(t);this.debugLines&&this.emit("log",{type:"debug",message:`onPhaseTransition: ${e.phaseCode}`}),this.isLive&&(this.emit("message",`phase-transition-${e.phaseCode}`),this.resetAfterPhaseTransition&&(this.phaseTransitionResetRequest=!0,this.phaseTransitionResetRequestTime=+new Date)),!this.isLive&&this.splitOnPhaseTransition&&this.splitEncounter()}onNewPc(t){let e=new y(t);this.debugLines&&this.emit("log",{type:"debug",message:`onNewPc: ${e.id}, ${e.name}, ${e.classId}, ${e.class}, ${e.gearScore}, ${e.currentHp}, ${e.maxHp}`}),this.updateEntity(e.name,{id:e.id,name:e.name,class:e.class,classId:e.classId,isPlayer:!0,...e.gearScore&&e.gearScore!=0&&{gearScore:e.gearScore},currentHp:e.currentHp,maxHp:e.maxHp})}onNewNpc(t){let e=new L(t);this.debugLines&&this.emit("log",{type:"debug",message:`onNewNpc: ${e.id}, ${e.name}, ${e.currentHp}, ${e.maxHp}`}),this.updateEntity(e.name,{id:e.id,name:e.name,npcId:e.npcId,isPlayer:!1,currentHp:e.currentHp,maxHp:e.maxHp})}onDeath(t){let e=new N(t);this.debugLines&&this.emit("log",{type:"debug",message:`onDeath: ${e.name} ${e.killerName}`});let s=this.game.entities[e.name],n=0;s?s.isDead?n=s.deaths:n=s.deaths+1:n=1,this.updateEntity(e.name,{name:e.name,isDead:!0,deathTime:+e.timestamp,deaths:n})}onSkillStart(t){let e=new E(t);this.debugLines&&this.emit("log",{type:"debug",message:`onSkillStart: ${e.id}, ${e.name}, ${e.skillId}, ${e.skillName}`}),Object.keys(C).includes(e.skillName)&&this.healSources.push({source:e.name,expires:+e.timestamp+C[e.skillName].duration}),this.updateEntity(e.name,{name:e.name,isDead:!1});let s=this.game.entities[e.name];s&&(s.hits.casts+=1,e.skillName in s.skills||(s.skills[e.skillName]={...M(),id:e.skillId,name:e.skillName},s.skills[e.skillName].hits.casts+=1))}onSkillStage(t){let e=new A(t);this.debugLines&&this.emit("log",{type:"debug",message:`onSkillStage: ${e.name}, ${e.skillId}, ${e.skillName}, ${e.skillStage}`})}onDamage(t){if(t.length<13)return;let e=new x(t);this.debugLines&&this.emit("log",{type:"debug",message:`onDamage: ${e.id}, ${e.name}, ${e.skillId}, ${e.skillName}, ${e.skillEffectId}, ${e.skillEffect}, ${e.targetId}, ${e.targetName}, ${e.damage}, ${e.currentHp}, ${e.maxHp}`}),this.phaseTransitionResetRequest&&this.phaseTransitionResetRequestTime>0&&this.phaseTransitionResetRequestTime<+new Date-1500&&(this.softReset(),this.phaseTransitionResetRequest=!1),this.updateEntity(e.name,{id:e.id,name:e.name}),this.updateEntity(e.targetName,{id:e.targetId,name:e.targetName,currentHp:e.currentHp,maxHp:e.maxHp});let s=this.game.entities[e.name],n=this.game.entities[e.targetName];if(!s||!n)return;!n.isPlayer&&this.removeOverkillDamage&&e.currentHp<0&&(e.damage=e.damage+e.currentHp),e.skillId===0&&e.skillEffectId!==0&&(e.skillId=e.skillEffectId,e.skillName=e.skillEffect),e.skillName in s.skills||(s.skills[e.skillName]={...M(),id:e.skillId,name:e.skillName});let m=e.damageModifier&15,d=(e.damageModifier>>4&7)-1;if(e.skillName==="Bleed"&&e.damage>1e7||e.skillName==="Bleed"&&m===11)return;let c=m===1||m===8,l=d===0,k=d===1,h=c?1:0,o=l?1:0,g=k?1:0;if(s.skills[e.skillName].totalDamage+=e.damage,e.damage>s.skills[e.skillName].maxDamage&&(s.skills[e.skillName].maxDamage=e.damage),s.damageDealt+=e.damage,n.damageTaken+=e.damage,e.skillName!=="Bleed"&&(s.hits.total+=1,s.hits.crit+=h,s.hits.backAttack+=o,s.hits.frontAttack+=g,s.skills[e.skillName].hits.total+=1,s.skills[e.skillName].hits.crit+=h,s.skills[e.skillName].hits.backAttack+=o,s.skills[e.skillName].hits.frontAttack+=g),s.isPlayer){this.game.damageStatistics.totalDamageDealt+=e.damage,this.game.damageStatistics.topDamageDealt=Math.max(this.game.damageStatistics.topDamageDealt,s.damageDealt);let f={timestamp:+e.timestamp,damage:e.damage,targetEntity:n.id,isCrit:c,isBackAttack:l,isFrontAttack:k};s.skills[e.skillName].breakdown.push(f)}n.isPlayer&&(this.game.damageStatistics.totalDamageTaken+=e.damage,this.game.damageStatistics.topDamageTaken=Math.max(this.game.damageStatistics.topDamageTaken,n.damageTaken)),this.game.fightStartedOn===0&&(this.game.fightStartedOn=+e.timestamp),this.game.lastCombatPacket=+e.timestamp}onHeal(t){let e=new w(t);this.debugLines&&this.emit("log",{type:"debug",message:`onHeal: ${e.id}, ${e.name}, ${e.healAmount}`});let s="";for(let n of this.healSources)if(n.expires>=+e.timestamp){s=n.source;break}!s||(this.updateEntity(s,{name:s}),this.game.entities[s].healingDone+=e.healAmount,this.game.entities[s].isPlayer&&(this.game.damageStatistics.totalHealingDone+=e.healAmount,this.game.damageStatistics.topHealingDone=Math.max(this.game.damageStatistics.topHealingDone,this.game.entities[s].healingDone)))}onBuff(t){let e=new _(t);this.debugLines&&this.emit("log",{type:"debug",message:`onBuff: ${e.id}, ${e.name}, ${e.buffId}, ${e.buffName}, ${e.sourceId}, ${e.sourceName}, ${e.shieldAmount}`}),e.shieldAmount&&e.isNew&&(this.updateEntity(e.name,{name:e.name}),this.game.entities[e.name].shieldDone+=e.shieldAmount,this.game.entities[e.name].isPlayer&&(this.game.damageStatistics.totalShieldDone+=e.shieldAmount,this.game.damageStatistics.topShieldDone=Math.max(this.game.damageStatistics.topShieldDone,this.game.entities[e.name].shieldDone)))}onCounterattack(t){let e=new H(t);this.debugLines&&this.emit("log",{type:"debug",message:`onCounterattack: ${e.id}, ${e.name}`}),this.updateEntity(e.name,{name:e.name}),this.game.entities[e.name].hits.counter+=1}};var K=require("uuid"),$=T(require("fs")),P=T(require("path")),F=T(require("dayjs/plugin/customParseFormat"));q.default.extend(F.default);function z(a,t,e,s,n){try{let m=a.slice(0,-4),d=m+".json",c=$.default.readFileSync(P.default.join(e,a),"utf-8");if(!c)return n(null,"empty log");let l=new S(!1);t===!0&&(l.splitOnPhaseTransition=!0);let k=c.split(`
`).filter(o=>o!=null&&o!="");for(let o of k)l.parseLogLine(o);l.splitEncounter();let h=l.encounters;if(h.length>0){let o={encounters:[]};for(let g of h){let f=g.lastCombatPacket-g.fightStartedOn;if(f<=1e3)continue;let O={name:"",damageTaken:0,isPlayer:!1};for(let p of Object.values(g.entities))p.damageTaken>O.damageTaken&&(O={name:p.name,damageTaken:p.damageTaken,isPlayer:p.isPlayer});let R={duration:f,mostDamageTakenEntity:O},G=(0,K.v4)(),v=`${m}_${G}_encounter.json`;o.encounters.push({encounterId:G,encounterFile:v,...R}),$.default.writeFileSync(P.default.join(s,v),JSON.stringify({...g,...R}))}return $.default.writeFileSync(P.default.join(s,d),JSON.stringify(o)),n(null,"log parsed")}return n(null,"no encounters found")}catch(m){return n(m,"log parser error")}}0&&(module.exports={});
