{"version":3,"file":"file-parser-worker.umd.js","sources":["../src/util.ts","../src/constants.ts","../src/log-lines.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n\r\nexport enum HitFlag {\r\n  HIT_FLAG_NORMAL = 0,\r\n  HIT_FLAG_CRITICAL = 1,\r\n  HIT_FLAG_MISS = 2,\r\n  HIT_FLAG_INVINCIBLE = 3,\r\n  HIT_FLAG_DOT = 4,\r\n  HIT_FLAG_IMMUNE = 5,\r\n  HIT_FLAG_IMMUNE_SILENCED = 6,\r\n  HIT_FLAG_FONT_SILENCED = 7,\r\n  HIT_FLAG_DOT_CRITICAL = 8,\r\n  HIT_FLAG_DODGE = 9,\r\n  HIT_FLAG_REFLECT = 10,\r\n  HIT_FLAG_DAMAGE_SHARE = 11,\r\n  HIT_FLAG_DODGE_HIT = 12,\r\n  HIT_FLAG_MAX = 13,\r\n  HIT_OPTION_BACK_ATTACK = 1 << (0 + 4),\r\n  HIT_OPTION_FRONTAL_ATTACK = 1 << (1 + 4),\r\n  HIT_OPTION_FLANK_ATTACK = 1 << (2 + 4)\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.currentHp = tryParseInt(lineSplit[12]);\r\n    this.maxHp = tryParseInt(lineSplit[13]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills, HitFlag } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 16) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\r\n\r\n    const isCrit =\r\n      (logLine.damageModifier &\r\n        (HitFlag.HIT_FLAG_CRITICAL | HitFlag.HIT_FLAG_DOT_CRITICAL)) >\r\n      0;\r\n    const isBackAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_BACK_ATTACK) > 0;\r\n    const isFrontAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_FRONTAL_ATTACK) > 0;\r\n\r\n    const critCount = isCrit ? 1 : 0;\r\n    const backAttackCount = isBackAttack ? 1 : 0;\r\n    const frontAttackCount = isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { LogParser } from \"./parser.js\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat.js\";\r\ndayjs.extend(customParseFormat);\r\n\r\nexport default function fileParserWorker(\r\n  filename: string,\r\n  splitOnPhaseTransition: boolean,\r\n  mainFolder: string,\r\n  parsedLogFolder: string,\r\n  callback: CallableFunction\r\n) {\r\n  try {\r\n    const filenameSlice = filename.slice(0, -4);\r\n    const jsonName = filenameSlice + \".json\";\r\n\r\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\r\n    if (!contents) return callback(null, \"empty log\");\r\n\r\n    const logParser = new LogParser(false);\r\n    if (splitOnPhaseTransition === true)\r\n      logParser.splitOnPhaseTransition = true;\r\n\r\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\r\n    for (const line of lines) {\r\n      logParser.parseLogLine(line);\r\n    }\r\n    logParser.splitEncounter();\r\n\r\n    const encounters = logParser.encounters;\r\n\r\n    if (encounters.length > 0) {\r\n      const masterLog = { encounters: [] };\r\n\r\n      for (const encounter of encounters) {\r\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\r\n\r\n        if (duration <= 1000) continue;\r\n\r\n        let mostDamageTakenEntity = {\r\n          name: \"\",\r\n          damageTaken: 0,\r\n          isPlayer: false\r\n        };\r\n\r\n        for (const i of Object.values(encounter.entities)) {\r\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\r\n            mostDamageTakenEntity = {\r\n              name: i.name,\r\n              damageTaken: i.damageTaken,\r\n              isPlayer: i.isPlayer\r\n            };\r\n          }\r\n        }\r\n\r\n        const encounterDetails = {\r\n          duration,\r\n          mostDamageTakenEntity\r\n        };\r\n\r\n        const encounterId = uuidv4();\r\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\r\n        masterLog.encounters.push({\r\n          encounterId,\r\n          encounterFile,\r\n          ...encounterDetails\r\n        });\r\n\r\n        fs.writeFileSync(\r\n          path.join(parsedLogFolder, encounterFile),\r\n          JSON.stringify({\r\n            ...encounter,\r\n            ...encounterDetails\r\n          })\r\n        );\r\n      }\r\n\r\n      fs.writeFileSync(\r\n        path.join(parsedLogFolder, jsonName),\r\n        JSON.stringify(masterLog)\r\n      );\r\n\r\n      return callback(null, \"log parsed\");\r\n    }\r\n\r\n    return callback(null, \"no encounters found\");\r\n  } catch (e) {\r\n    return callback(e, \"log parser error\");\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","HitFlag","lineSplit","this","timestamp","LogMessage","_LogLine","_this","message","_inheritsLoose","LogLine","LogPhaseTransition","_this3","_LogLine3","call","phaseCode","LogNewPc","_this4","_LogLine4","id","name","classId","gearScore","currentHp","maxHp","_LogLine5","LogNewNpc","_this5","LogDeath","_this6","killerId","killerName","_LogLine7","LogSkillStart","_this7","skillId","skillName","LogSkillStage","_LogLine8","_this8","skillStage","LogDamage","_this9","_LogLine9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","isCrit","isBackAttack","isFrontAttack","_LogLine10","LogHeal","_this10","healAmount","LogBuff","_this11","_LogLine11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","_LogLine12","LogCounterattack","_this12","healingSkills","duration","Demonize","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","Date","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","_proto","softReset","entitiesCopy","cloneDeep","_i","_Object$keys","Object","keys","length","entity","lastUpdate","updateEntity","class","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","logLine","LogLines","startsWith","setTimeout","LogLines.LogDeath","getTime","LogLines.LogSkillStart","includes","source","expires","LogLines.LogDamage","damageOwner","damageTarget","totalDamage","maxDamage","critCount","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","backAttackCount","HIT_OPTION_BACK_ATTACK","frontAttackCount","HIT_OPTION_FRONTAL_ATTACK","Math","max","LogLines.LogHeal","_step","_iterator","_createForOfIteratorHelperLoose","done","value","dayjs__default","extend","customParseFormat","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","filenameSlice","slice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","_step2","_iterator2","encounter","mostDamageTakenEntity","_Object$values","i","encounterDetails","encounterId","uuidv4","v4","encounterFile","masterLog","writeFileSync","JSON","stringify","jsonName"],"mappings":"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"}