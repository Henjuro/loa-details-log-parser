{"version":3,"file":"file-parser-worker.umd.js","sources":["../src/util.ts","../src/constants.ts","../src/log-lines.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\n  if (typeof intString === \"number\") {\n    if (isNaN(intString)) return defaultValue;\n    return intString;\n  }\n\n  let intNum: number;\n\n  try {\n    intNum = parseInt(intString, radix);\n    if (isNaN(intNum)) intNum = defaultValue;\n  } catch {\n    intNum = defaultValue;\n  }\n\n  return intNum;\n}\n","interface HealingSkills {\n  [key: string]: HealingSkillDetails;\n}\ninterface HealingSkillDetails {\n  duration: number;\n}\nexport const healingSkills: HealingSkills = {\n  \"Serenade of Salvation\": {\n    duration: 3\n  },\n  \"Holy Aura\": {\n    duration: 16 * 1000\n  },\n  \"Holy Protection\": {\n    duration: 7 * 1000\n  },\n  Demonize: {\n    duration: 1.5 * 1000\n  }\n};\n\nexport enum HitFlag {\n  HIT_FLAG_NORMAL = 0,\n  HIT_FLAG_CRITICAL = 1,\n  HIT_FLAG_MISS = 2,\n  HIT_FLAG_INVINCIBLE = 3,\n  HIT_FLAG_DOT = 4,\n  HIT_FLAG_IMMUNE = 5,\n  HIT_FLAG_IMMUNE_SILENCED = 6,\n  HIT_FLAG_FONT_SILENCED = 7,\n  HIT_FLAG_DOT_CRITICAL = 8,\n  HIT_FLAG_DODGE = 9,\n  HIT_FLAG_REFLECT = 10,\n  HIT_FLAG_DAMAGE_SHARE = 11,\n  HIT_FLAG_DODGE_HIT = 12,\n  HIT_FLAG_MAX = 13,\n  HIT_OPTION_BACK_ATTACK = 1 << (0 + 4),\n  HIT_OPTION_FRONTAL_ATTACK = 1 << (1 + 4),\n  HIT_OPTION_FLANK_ATTACK = 1 << (2 + 4)\n}\n","import { tryParseInt } from \"./util.js\";\n\nclass LogLine {\n  lineSplit: string[];\n  timestamp: Date;\n\n  constructor(lineSplit: string[]) {\n    this.lineSplit = lineSplit;\n    this.timestamp = new Date(this.lineSplit[1]);\n  }\n}\n\n// logId = 0\nexport class LogMessage extends LogLine {\n  message: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.message = this.lineSplit[2];\n  }\n}\n\n// logId = 1\nexport class LogInitEnv extends LogLine {\n  playerId: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.playerId = lineSplit[2];\n  }\n}\n\n// logId = 2\nexport class LogPhaseTransition extends LogLine {\n  phaseCode: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.phaseCode = tryParseInt(lineSplit[2]);\n  }\n}\n\n// logId = 3\nexport class LogNewPc extends LogLine {\n  id: string;\n  name: string;\n  classId: number;\n  class: string;\n  gearScore: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.classId = tryParseInt(lineSplit[4]);\n    this.class = lineSplit[5] || \"UnknownClass\";\n    /* this.level = tryParseInt(lineSplit[6]); */\n    this.gearScore = lineSplit[7];\n    this.currentHp = tryParseInt(lineSplit[8]);\n    this.maxHp = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 4\nexport class LogNewNpc extends LogLine {\n  id: string;\n  name: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    //this.npcId = tryParseInt(lineSplit[3]);\n    this.name = lineSplit[4] || \"Unknown Entity\";\n    this.currentHp = tryParseInt(lineSplit[5]);\n    this.maxHp = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 5\nexport class LogDeath extends LogLine {\n  id: string;\n  name: string;\n  killerId: string;\n  killerName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.killerId = lineSplit[4];\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\n  }\n}\n\n// logId = 6\nexport class LogSkillStart extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n  }\n}\n\n// logId = 7\nexport class LogSkillStage extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n  skillStage: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillStage = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 8\nexport class LogDamage extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n  skillEffectId: number;\n  skillEffect: string;\n  targetId: string;\n  targetName: string;\n  damage: number;\n  damageModifier: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillEffectId = tryParseInt(lineSplit[6]);\n    this.skillEffect = lineSplit[7];\n    this.targetId = lineSplit[8];\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\n    this.damage = tryParseInt(lineSplit[10]);\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\n    this.currentHp = tryParseInt(lineSplit[12]);\n    this.maxHp = tryParseInt(lineSplit[13]);\n  }\n}\n\n// logId = 9\nexport class LogHeal extends LogLine {\n  id: string;\n  name: string;\n  healAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.healAmount = tryParseInt(lineSplit[4]);\n    //this.currentHp = tryParseInt(lineSplit[5]);\n  }\n}\n\n// logId = 10\nexport class LogBuff extends LogLine {\n  id: string;\n  name: string;\n  buffId: string;\n  buffName: string;\n  isNew: boolean;\n  sourceId: string;\n  sourceName: string;\n  shieldAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.buffId = lineSplit[4];\n    this.buffName = lineSplit[5];\n    this.isNew = lineSplit[6] == \"1\";\n    this.sourceId = lineSplit[7];\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\n    this.shieldAmount = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 11\nexport class LogCounterattack extends LogLine {\n  id: string;\n  name: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    /* this.targetId = lineSplit[4];\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\n  }\n}\n","import cloneDeep from \"lodash/cloneDeep.js\";\nimport EventEmitter from \"events\";\n\nimport * as LogLines from \"./log-lines.js\";\nimport { tryParseInt } from \"./util.js\";\nimport { healingSkills, HitFlag } from \"./constants.js\";\n\ninterface Game {\n  startedOn: number;\n  lastCombatPacket: number;\n  fightStartedOn: number;\n  entities: { [name: string]: Entity };\n  damageStatistics: {\n    totalDamageDealt: number;\n    topDamageDealt: number;\n    totalDamageTaken: number;\n    topDamageTaken: number;\n    totalHealingDone: number;\n    topHealingDone: number;\n    totalShieldDone: number;\n    topShieldDone: number;\n  };\n}\ninterface HealSource {\n  source: string;\n  expires: number;\n}\n\ninterface Entity {\n  lastUpdate: number;\n  id: string;\n  name: string;\n  class: string;\n  isPlayer: boolean;\n  isDead: boolean;\n  deathTime: number;\n  gearScore: string;\n  currentHp: number;\n  maxHp: number;\n  damageDealt: number;\n  healingDone: number;\n  shieldDone: number;\n  damageTaken: number;\n  skills: { [name: string]: EntitySkills };\n  hits: Hits;\n}\ninterface EntitySkills {\n  id: number;\n  name: string;\n  totalDamage: number;\n  maxDamage: number;\n  hits: Hits;\n}\nfunction createEntitySkill(): EntitySkills {\n  const newEntitySkill: EntitySkills = {\n    id: 0,\n    name: \"\",\n    totalDamage: 0,\n    maxDamage: 0,\n    hits: {\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntitySkill;\n}\n\ninterface Hits {\n  total: number;\n  crit: number;\n  backAttack: number;\n  frontAttack: number;\n  counter: number;\n}\nfunction createEntity(): Entity {\n  const newEntity: Entity = {\n    lastUpdate: 0,\n    id: \"\",\n    name: \"\",\n    class: \"\",\n    isPlayer: false,\n    isDead: false,\n    deathTime: 0,\n    gearScore: \"\",\n    currentHp: 0,\n    maxHp: 0,\n    damageDealt: 0,\n    healingDone: 0,\n    shieldDone: 0,\n    damageTaken: 0,\n    skills: {},\n    hits: {\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntity;\n}\n\nexport class LogParser {\n  eventEmitter: EventEmitter;\n  resetTimer: ReturnType<typeof setTimeout>;\n\n  debugLines: boolean;\n  isLive: boolean;\n  dontResetOnZoneChange: boolean;\n  resetAfterPhaseTransition: boolean;\n  splitOnPhaseTransition: boolean;\n  removeOverkillDamage: boolean;\n\n  phaseTransitionResetRequest: boolean;\n  phaseTransitionResetRequestTime: number;\n\n  game: Game;\n  encounters: Game[];\n  healSources: HealSource[];\n\n  constructor(isLive = false) {\n    this.eventEmitter = new EventEmitter();\n    this.resetTimer = null;\n\n    this.debugLines = false;\n    this.isLive = isLive;\n    this.dontResetOnZoneChange = false;\n    this.resetAfterPhaseTransition = false;\n    this.splitOnPhaseTransition = false;\n    this.removeOverkillDamage = true;\n\n    this.phaseTransitionResetRequest = false;\n    this.phaseTransitionResetRequestTime = 0;\n\n    this.resetState();\n    this.encounters = [];\n\n    if (this.isLive) {\n      setInterval(this.broadcastStateChange.bind(this), 100);\n    }\n  }\n\n  resetState() {\n    if (this.debugLines)\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: \"Resetting state\"\n      });\n\n    const curTime = +new Date();\n\n    this.game = {\n      startedOn: curTime,\n      lastCombatPacket: curTime,\n      fightStartedOn: 0,\n      entities: {},\n      damageStatistics: {\n        totalDamageDealt: 0,\n        topDamageDealt: 0,\n        totalDamageTaken: 0,\n        topDamageTaken: 0,\n        totalHealingDone: 0,\n        topHealingDone: 0,\n        totalShieldDone: 0,\n        topShieldDone: 0\n      }\n    };\n\n    this.healSources = [];\n\n    this.eventEmitter.emit(\"reset-state\");\n  }\n  softReset() {\n    this.resetTimer = null;\n    const entitiesCopy = cloneDeep(this.game.entities);\n    this.resetState();\n    for (const entity of Object.keys(entitiesCopy)) {\n      // don't keep entity if it hasn't been updated in 10 minutes\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\n        continue;\n\n      this.updateEntity(entitiesCopy[entity].name, {\n        name: entitiesCopy[entity].name,\n        class: entitiesCopy[entity].class,\n        isPlayer: entitiesCopy[entity].isPlayer,\n        gearScore: entitiesCopy[entity].gearScore,\n        maxHp: entitiesCopy[entity].maxHp,\n        currentHp: entitiesCopy[entity].currentHp\n      });\n    }\n  }\n  cancelReset() {\n    if (this.resetTimer) clearTimeout(this.resetTimer);\n    this.resetTimer = null;\n  }\n  splitEncounter() {\n    const curState = cloneDeep(this.game);\n    if (\n      curState.fightStartedOn != 0 && // no combat packets\n      (curState.damageStatistics.totalDamageDealt != 0 ||\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\n    )\n      this.encounters.push(curState);\n    this.resetState();\n  }\n\n  broadcastStateChange() {\n    this.eventEmitter.emit(\"state-change\", this.game);\n  }\n\n  parseLogLine(line: string) {\n    if (!line) return;\n\n    const lineSplit = line.trim().split(\"|\");\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\n\n    const logType = tryParseInt(lineSplit[0]);\n\n    try {\n      switch (logType) {\n        case 0:\n          this.onMessage(lineSplit);\n          break;\n        case 1:\n          this.onInitEnv(/* lineSplit */);\n          break;\n        case 2:\n          this.onPhaseTransition(lineSplit);\n          break;\n        case 3:\n          this.onNewPc(lineSplit);\n          break;\n        case 4:\n          this.onNewNpc(lineSplit);\n          break;\n        case 5:\n          this.onDeath(lineSplit);\n          break;\n        case 6:\n          this.onSkillStart(lineSplit);\n          break;\n        case 7:\n          this.onSkillStage(lineSplit);\n          break;\n        case 8:\n          this.onDamage(lineSplit);\n          break;\n        case 9:\n          this.onHeal(lineSplit);\n          break;\n        case 10:\n          this.onBuff(lineSplit);\n          break;\n        case 12:\n          this.onCounterattack(lineSplit);\n          break;\n      }\n    } catch (e) {\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\n    }\n  }\n\n  updateEntity(entityName: string, values) {\n    const updateTime = { lastUpdate: +new Date() };\n    if (!(entityName in this.game.entities)) {\n      this.game.entities[entityName] = {\n        ...createEntity(),\n        ...values,\n        ...updateTime\n      };\n    } else {\n      this.game.entities[entityName] = {\n        ...this.game.entities[entityName],\n        ...values,\n        ...updateTime\n      };\n    }\n  }\n\n  // logId = 0\n  onMessage(lineSplit: string[]) {\n    const logLine = new LogLines.LogMessage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onMessage: ${logLine.message}`\n      });\n    }\n\n    if (!logLine.message.startsWith(\"Arguments:\")) {\n      this.eventEmitter.emit(\"message\", logLine.message);\n    }\n  }\n\n  // logId = 1\n  onInitEnv(/* lineSplit: string[] */) {\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onInitEnv`\n      });\n    }\n\n    if (this.isLive) {\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\n        if (this.debugLines) {\n          this.eventEmitter.emit(\"log\", {\n            type: \"debug\",\n            message: `Setting a reset timer`\n          });\n        }\n\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\n        this.eventEmitter.emit(\"message\", \"new-zone\");\n      }\n    } else {\n      this.splitEncounter();\n      this.eventEmitter.emit(\"message\", \"new-zone\");\n    }\n  }\n\n  // logId = 2\n  onPhaseTransition(lineSplit: string[]) {\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onPhaseTransition: ${logLine.phaseCode}`\n      });\n    }\n\n    if (this.isLive) {\n      this.eventEmitter.emit(\n        \"message\",\n        `phase-transition-${logLine.phaseCode}`\n      );\n\n      if (this.resetAfterPhaseTransition) {\n        this.phaseTransitionResetRequest = true;\n        this.phaseTransitionResetRequestTime = +new Date();\n      }\n    }\n\n    if (!this.isLive && this.splitOnPhaseTransition) {\n      this.splitEncounter();\n    }\n  }\n\n  // logId = 3\n  onNewPc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewPc(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      class: logLine.class,\n      isPlayer: true,\n      ...(logLine.gearScore &&\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 4\n  onNewNpc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewNpc(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isPlayer: false,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 5\n  onDeath(lineSplit: string[]) {\n    const logLine = new LogLines.LogDeath(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: true,\n      deathTime: logLine.timestamp.getTime()\n    });\n  }\n\n  // logId = 6\n  onSkillStart(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStart(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\n      });\n    }\n\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\n      this.healSources.push({\n        source: logLine.name,\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: false\n    });\n  }\n\n  // logId = 7\n  onSkillStage(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\n      });\n    }\n  }\n\n  // logId = 8\n  onDamage(lineSplit: string[]) {\n    if (lineSplit.length < 13) return;\n    const logLine = new LogLines.LogDamage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    if (\n      this.phaseTransitionResetRequest &&\n      this.phaseTransitionResetRequestTime > 0 &&\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\n    ) {\n      this.softReset();\n      this.phaseTransitionResetRequest = false;\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    this.updateEntity(logLine.targetName, {\n      name: logLine.targetName,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n\n    const damageOwner = this.game.entities[logLine.name];\n    const damageTarget = this.game.entities[logLine.targetName];\n\n    if (\n      !damageTarget.isPlayer &&\n      this.removeOverkillDamage &&\n      logLine.currentHp < 0\n    ) {\n      logLine.damage = logLine.damage + logLine.currentHp;\n    }\n\n    if (logLine.skillId === 0 && logLine.skillEffectId !== 0) {\n        logLine.skillId = logLine.skillEffectId;\n        logLine.skillName = logLine.skillEffect;\n    }\n\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\n        ...createEntitySkill(),\n        ...{ id: logLine.skillId, name: logLine.skillName }\n      };\n    }\n\n    // TODO: Not sure if this is fixed in the logger\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\n\n    // Remove 'sync' bleeds on G1 Valtan\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\n\n    const isCrit =\n      (logLine.damageModifier &\n        (HitFlag.HIT_FLAG_CRITICAL | HitFlag.HIT_FLAG_DOT_CRITICAL)) >\n      0;\n    const isBackAttack =\n      (logLine.damageModifier & HitFlag.HIT_OPTION_BACK_ATTACK) > 0;\n    const isFrontAttack =\n      (logLine.damageModifier & HitFlag.HIT_OPTION_FRONTAL_ATTACK) > 0;\n\n    const critCount = isCrit ? 1 : 0;\n    const backAttackCount = isBackAttack ? 1 : 0;\n    const frontAttackCount = isFrontAttack ? 1 : 0;\n\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\n      logLine.damage;\n    if (\n      logLine.damage >\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\n    )\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\n        logLine.damage;\n\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\n\n    if (logLine.skillName !== \"Bleed\") {\n      this.game.entities[logLine.name].hits.total += 1;\n      this.game.entities[logLine.name].hits.crit += critCount;\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\n\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.total += 1;\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\n        critCount;\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.backAttack += backAttackCount;\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.frontAttack += frontAttackCount;\n    }\n\n    if (damageOwner.isPlayer) {\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\n      this.game.damageStatistics.topDamageDealt = Math.max(\n        this.game.damageStatistics.topDamageDealt,\n        damageOwner.damageDealt\n      );\n    }\n\n    if (damageTarget.isPlayer) {\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\n      this.game.damageStatistics.topDamageTaken = Math.max(\n        this.game.damageStatistics.topDamageTaken,\n        damageTarget.damageTaken\n      );\n    }\n\n    if (this.game.fightStartedOn === 0)\n      this.game.fightStartedOn = +logLine.timestamp;\n    this.game.lastCombatPacket = +logLine.timestamp;\n  }\n\n  // logId = 9\n  onHeal(lineSplit: string[]) {\n    const logLine = new LogLines.LogHeal(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\n      });\n    }\n\n    let sourceName = \"\";\n    for (const source of this.healSources) {\n      if (source.expires >= +logLine.timestamp) {\n        sourceName = source.source;\n        break;\n      }\n    }\n    if (!sourceName) return;\n\n    this.updateEntity(sourceName, {\n      name: sourceName\n    });\n\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\n\n    if (this.game.entities[sourceName].isPlayer) {\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\n      this.game.damageStatistics.topHealingDone = Math.max(\n        this.game.damageStatistics.topHealingDone,\n        this.game.entities[sourceName].healingDone\n      );\n    }\n  }\n\n  // logId = 10\n  onBuff(lineSplit: string[]) {\n    const logLine = new LogLines.LogBuff(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\n      });\n    }\n\n    if (logLine.shieldAmount && logLine.isNew) {\n      this.updateEntity(logLine.name, {\n        name: logLine.name\n      });\n\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\n\n      if (this.game.entities[logLine.name].isPlayer) {\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\n        this.game.damageStatistics.topShieldDone = Math.max(\n          this.game.damageStatistics.topShieldDone,\n          this.game.entities[logLine.name].shieldDone\n        );\n      }\n    }\n  }\n\n  // logId = 12\n  onCounterattack(lineSplit: string[]) {\n    const logLine = new LogLines.LogCounterattack(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    // TODO: Add skill name from logger\n    this.game.entities[logLine.name].hits.counter += 1;\n  }\n}\n","import dayjs from \"dayjs\";\nimport { LogParser } from \"./parser.js\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport customParseFormat from \"dayjs/plugin/customParseFormat.js\";\ndayjs.extend(customParseFormat);\n\nexport default function fileParserWorker(\n  filename: string,\n  splitOnPhaseTransition: boolean,\n  mainFolder: string,\n  parsedLogFolder: string,\n  callback: CallableFunction\n) {\n  try {\n    const filenameSlice = filename.slice(0, -4);\n    const jsonName = filenameSlice + \".json\";\n\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\n    if (!contents) return callback(null, \"empty log\");\n\n    const logParser = new LogParser(false);\n    if (splitOnPhaseTransition === true)\n      logParser.splitOnPhaseTransition = true;\n\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\n    for (const line of lines) {\n      logParser.parseLogLine(line);\n    }\n    logParser.splitEncounter();\n\n    const encounters = logParser.encounters;\n\n    if (encounters.length > 0) {\n      const masterLog = { encounters: [] };\n\n      for (const encounter of encounters) {\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\n\n        if (duration <= 1000) continue;\n\n        let mostDamageTakenEntity = {\n          name: \"\",\n          damageTaken: 0,\n          isPlayer: false\n        };\n\n        for (const i of Object.values(encounter.entities)) {\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\n            mostDamageTakenEntity = {\n              name: i.name,\n              damageTaken: i.damageTaken,\n              isPlayer: i.isPlayer\n            };\n          }\n        }\n\n        const encounterDetails = {\n          duration,\n          mostDamageTakenEntity\n        };\n\n        const encounterId = uuidv4();\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\n        masterLog.encounters.push({\n          encounterId,\n          encounterFile,\n          ...encounterDetails\n        });\n\n        fs.writeFileSync(\n          path.join(parsedLogFolder, encounterFile),\n          JSON.stringify({\n            ...encounter,\n            ...encounterDetails\n          })\n        );\n      }\n\n      fs.writeFileSync(\n        path.join(parsedLogFolder, jsonName),\n        JSON.stringify(masterLog)\n      );\n\n      return callback(null, \"log parsed\");\n    }\n\n    return callback(null, \"no encounters found\");\n  } catch (e) {\n    return callback(e, \"log parser error\");\n  }\n}\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","HitFlag","lineSplit","this","timestamp","Date","LogMessage","_this","_LogLine","call","message","LogLine","_LogLine3","LogPhaseTransition","_this3","phaseCode","_inheritsLoose","_LogLine4","LogNewPc","_this4","id","name","classId","gearScore","currentHp","maxHp","LogNewNpc","_LogLine5","_this5","LogDeath","_LogLine6","_this6","killerId","killerName","LogSkillStart","_this7","_LogLine7","skillId","skillName","LogSkillStage","_LogLine8","_this8","skillStage","_LogLine9","LogDamage","_this9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","_this10","_LogLine10","healAmount","LogBuff","_LogLine11","_this11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","_this12","_LogLine12","healingSkills","duration","Demonize","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","entitiesCopy","cloneDeep","Object","keys","_i","_Object$keys","length","entity","lastUpdate","updateEntity","class","isPlayer","cancelReset","clearTimeout","_proto","splitEncounter","curState","push","parseLogLine","line","trim","split","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","logLine","LogLines","startsWith","setTimeout","LogLines.LogNewNpc","getTime","LogLines.LogSkillStart","includes","source","expires","damageOwner","damageTarget","createEntitySkill","totalDamage","maxDamage","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","backAttackCount","HIT_OPTION_BACK_ATTACK","frontAttackCount","HIT_OPTION_FRONTAL_ATTACK","critCount","Math","max","LogLines.LogHeal","_step","value","LogLines.LogBuff","LogLines.LogCounterattack","dayjs__default","extend","customParseFormat","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","filenameSlice","slice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","_step2","_iterator2","_createForOfIteratorHelperLoose","done","encounter","mostDamageTakenEntity","_Object$values","i","encounterDetails","encounterId","uuidv4","v4","encounterFile","masterLog","writeFileSync","JSON","stringify","jsonName"],"mappings":"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"}