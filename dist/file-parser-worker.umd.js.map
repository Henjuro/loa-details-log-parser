{"version":3,"file":"file-parser-worker.umd.js","sources":["../src/util.ts","../src/constants.ts","../src/log-lines.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10, float = false) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = float ? parseFloat(intString) : parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n\r\nexport enum HitOption {\r\n  HIT_OPTION_NONE = -1,\r\n  HIT_OPTION_BACK_ATTACK = 0,\r\n  HIT_OPTION_FRONTAL_ATTACK = 1,\r\n  HIT_OPTION_FLANK_ATTACK = 2,\r\n  HIT_OPTION_MAX = 3,\r\n}\r\n\r\nexport enum HitFlag {\r\n  HIT_FLAG_NORMAL = 0,\r\n  HIT_FLAG_CRITICAL = 1,\r\n  HIT_FLAG_MISS = 2,\r\n  HIT_FLAG_INVINCIBLE = 3,\r\n  HIT_FLAG_DOT = 4,\r\n  HIT_FLAG_IMMUNE = 5,\r\n  HIT_FLAG_IMMUNE_SILENCED = 6,\r\n  HIT_FLAG_FONT_SILENCED = 7,\r\n  HIT_FLAG_DOT_CRITICAL = 8,\r\n  HIT_FLAG_DODGE = 9,\r\n  HIT_FLAG_REFLECT = 10,\r\n  HIT_FLAG_DAMAGE_SHARE = 11,\r\n  HIT_FLAG_DODGE_HIT = 12,\r\n  HIT_FLAG_MAX = 13,\r\n}\r\n","import { tryParseInt } from \"./util\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = tryParseInt(lineSplit[7], 0, 10, true);\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  npcId: number;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.currentHp = tryParseInt(lineSplit[12]);\r\n    this.maxHp = tryParseInt(lineSplit[13]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","import { cloneDeep } from \"lodash\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines\";\r\nimport { tryParseInt } from \"./util\";\r\nimport { healingSkills, HitFlag, HitOption } from \"./constants\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  npcId: number;\r\n  name: string;\r\n  class: string;\r\n  classId: number;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deaths: number;\r\n  deathTime: number;\r\n  gearScore: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\n\r\ninterface Breakdown {\r\n  timestamp: number;\r\n  damage: number;\r\n  targetEntity: string;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n}\r\n\r\ninterface EntitySkills {\r\n  id: number;\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n  breakdown: Breakdown[];\r\n}\r\n\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    id: 0,\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      casts: 0,\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    },\r\n    breakdown: []\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  casts: number;\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    npcId: 0,\r\n    name: \"\",\r\n    class: \"\",\r\n    classId: 0,\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deaths: 0,\r\n    deathTime: 0,\r\n    gearScore: 0,\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      casts: 0,\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser extends EventEmitter {\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    super();\r\n\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const clone = cloneDeep(this.game);\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n    this.emit(\"reset-state\", clone);\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        npcId: entitiesCopy[entity].npcId,\r\n        class: entitiesCopy[entity].class,\r\n        classId: entitiesCopy[entity].classId,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    const clone: Game = cloneDeep(this.game);\r\n    // Dont send breakdowns; will hang up UI\r\n    Object.values(clone.entities).forEach(entity => {\r\n      Object.values(entity.skills).forEach(skill => {\r\n        skill.breakdown = [];\r\n      })\r\n    })\r\n\r\n    this.emit(\"state-change\", clone);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 12:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      id: logLine.id,\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      classId: logLine.classId,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != 0 && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      id: logLine.id,\r\n      name: logLine.name,\r\n      npcId: logLine.npcId,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    const entity = this.game.entities[logLine.name];\r\n\r\n    let deaths = 0;\r\n    if (!entity) deaths = 1;\r\n    else if (entity.isDead) deaths = entity.deaths;\r\n    else deaths = entity.deaths + 1;\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: +logLine.timestamp,\r\n      deaths,\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n\r\n    const entity = this.game.entities[logLine.name];\r\n    if (entity) {\r\n      entity.hits.casts += 1;\r\n\r\n      if (!(logLine.skillName in entity.skills)) {\r\n        entity.skills[logLine.skillName] = {\r\n          ...createEntitySkill(),\r\n          ...{ id: logLine.skillId, name: logLine.skillName }\r\n        };\r\n        entity.skills[logLine.skillName].hits.casts += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 13) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      id: logLine.id,\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      id: logLine.targetId,\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (logLine.skillId === 0 && logLine.skillEffectId !== 0) {\r\n        logLine.skillId = logLine.skillEffectId;\r\n        logLine.skillName = logLine.skillEffect;\r\n    }\r\n\r\n    if (!(logLine.skillName in damageOwner.skills)) {\r\n      damageOwner.skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ id: logLine.skillId, name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    const hitFlag: HitFlag = logLine.damageModifier & 0xf;\r\n    const hitOption: HitOption = ((logLine.damageModifier >> 4) & 0x7) - 1;\r\n\r\n    // TODO: Keeping for now; Not sure if referring to damage share on Valtan G1 or something else\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && hitFlag === HitFlag.HIT_FLAG_DAMAGE_SHARE) return;\r\n\r\n    const isCrit =\r\n      hitFlag === HitFlag.HIT_FLAG_CRITICAL ||\r\n      hitFlag === HitFlag.HIT_FLAG_DOT_CRITICAL;\r\n    const isBackAttack = hitOption === HitOption.HIT_OPTION_BACK_ATTACK;\r\n    const isFrontAttack = hitOption === HitOption.HIT_OPTION_FRONTAL_ATTACK;\r\n\r\n    const critCount = isCrit ? 1 : 0;\r\n    const backAttackCount = isBackAttack ? 1 : 0;\r\n    const frontAttackCount = isFrontAttack ? 1 : 0;\r\n\r\n    damageOwner.skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      damageOwner.skills[logLine.skillName].maxDamage\r\n    )\r\n      damageOwner.skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    damageOwner.damageDealt += logLine.damage;\r\n    damageTarget.damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      damageOwner.hits.total += 1;\r\n      damageOwner.hits.crit += critCount;\r\n      damageOwner.hits.backAttack += backAttackCount;\r\n      damageOwner.hits.frontAttack += frontAttackCount;\r\n\r\n      damageOwner.skills[logLine.skillName].hits.total += 1;\r\n      damageOwner.skills[logLine.skillName].hits.crit += critCount;\r\n      damageOwner.skills[logLine.skillName].hits.backAttack += backAttackCount;\r\n      damageOwner.skills[logLine.skillName].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n\r\n      const breakdown: Breakdown = {\r\n        timestamp: +logLine.timestamp,\r\n        damage: logLine.damage,\r\n        targetEntity: damageTarget.id,\r\n        isCrit,\r\n        isBackAttack,\r\n        isFrontAttack,\r\n      }\r\n\r\n      damageOwner.skills[logLine.skillName].breakdown.push(breakdown);\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 12\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { LogParser } from \"./parser\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\r\ndayjs.extend(customParseFormat);\r\n\r\nexport default function fileParserWorker(\r\n  filename: string,\r\n  splitOnPhaseTransition: boolean,\r\n  mainFolder: string,\r\n  parsedLogFolder: string,\r\n  callback: CallableFunction\r\n) {\r\n  try {\r\n    const filenameSlice = filename.slice(0, -4);\r\n    const jsonName = filenameSlice + \".json\";\r\n\r\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\r\n    if (!contents) return callback(null, \"empty log\");\r\n\r\n    const logParser = new LogParser(false);\r\n    if (splitOnPhaseTransition === true)\r\n      logParser.splitOnPhaseTransition = true;\r\n\r\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\r\n    for (const line of lines) {\r\n      logParser.parseLogLine(line);\r\n    }\r\n    logParser.splitEncounter();\r\n\r\n    const encounters = logParser.encounters;\r\n\r\n    if (encounters.length > 0) {\r\n      const masterLog = { encounters: [] };\r\n\r\n      for (const encounter of encounters) {\r\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\r\n\r\n        if (duration <= 1000) continue;\r\n\r\n        let mostDamageTakenEntity = {\r\n          name: \"\",\r\n          damageTaken: 0,\r\n          isPlayer: false\r\n        };\r\n\r\n        for (const i of Object.values(encounter.entities)) {\r\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\r\n            mostDamageTakenEntity = {\r\n              name: i.name,\r\n              damageTaken: i.damageTaken,\r\n              isPlayer: i.isPlayer\r\n            };\r\n          }\r\n        }\r\n\r\n        const encounterDetails = {\r\n          duration,\r\n          mostDamageTakenEntity\r\n        };\r\n\r\n        const encounterId = uuidv4();\r\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\r\n        masterLog.encounters.push({\r\n          encounterId,\r\n          encounterFile,\r\n          ...encounterDetails\r\n        });\r\n\r\n        fs.writeFileSync(\r\n          path.join(parsedLogFolder, encounterFile),\r\n          JSON.stringify({\r\n            ...encounter,\r\n            ...encounterDetails\r\n          })\r\n        );\r\n      }\r\n\r\n      fs.writeFileSync(\r\n        path.join(parsedLogFolder, jsonName),\r\n        JSON.stringify(masterLog)\r\n      );\r\n\r\n      return callback(null, \"log parsed\");\r\n    }\r\n\r\n    return callback(null, \"no encounters found\");\r\n  } catch (e) {\r\n    return callback(e, \"log parser error\");\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","float","isNaN","intNum","parseFloat","parseInt","HitOption","lineSplit","this","timestamp","LogMessage","_LogLine","_this","call","message","_inheritsLoose","LogLine","LogPhaseTransition","_LogLine3","_this3","phaseCode","_LogLine4","LogNewPc","_this4","id","name","classId","gearScore","currentHp","maxHp","LogNewNpc","_LogLine5","_this5","npcId","LogDeath","_LogLine6","_this6","killerId","killerName","LogSkillStart","_LogLine7","_this7","skillId","skillName","LogSkillStage","_LogLine8","_this8","skillStage","LogDamage","_LogLine9","_this9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","_LogLine10","_this10","healAmount","LogBuff","_this11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","_LogLine12","_this12","healingSkills","duration","Demonize","HitFlag","LogParser","_EventEmitter","isLive","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","bind","emit","type","cloneDeep","curTime","Date","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","clone","softReset","entitiesCopy","_i","_Object$keys","Object","keys","length","entity","lastUpdate","updateEntity","class","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","_proto","values","forEach","skills","skill","breakdown","parseLogLine","line","trim","split","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","updateTime","_extends","isDead","deaths","deathTime","damageDealt","healingDone","shieldDone","damageTaken","hits","casts","total","crit","backAttack","frontAttack","counter","logLine","LogLines.LogMessage","startsWith","setTimeout","LogLines","LogLines.LogNewNpc","LogLines.LogDeath","includes","source","expires","totalDamage","maxDamage","LogLines.LogDamage","damageOwner","damageTarget","hitOption","hitFlag","HIT_FLAG_DAMAGE_SHARE","isCrit","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","isBackAttack","HIT_OPTION_BACK_ATTACK","isFrontAttack","HIT_OPTION_FRONTAL_ATTACK","critCount","backAttackCount","frontAttackCount","Math","max","targetEntity","LogLines.LogHeal","_step","_iterator","_createForOfIteratorHelperLoose","done","LogLines.LogBuff","EventEmitter","dayjs__default","extend","customParseFormat","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","filenameSlice","slice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","_step2","_iterator2","encounter","mostDamageTakenEntity","_Object$values","i","encounterDetails","encounterId","uuidv4","v4","encounterFile","masterLog","writeFileSync","JSON","stringify","jsonName"],"mappings":"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"}