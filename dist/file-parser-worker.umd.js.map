{"version":3,"file":"file-parser-worker.umd.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.isCrit = lineSplit[12] == \"1\";\r\n    this.isBackAttack = lineSplit[13] == \"1\";\r\n    this.isFrontAttack = lineSplit[14] == \"1\";\r\n    this.currentHp = tryParseInt(lineSplit[15]);\r\n    this.maxHp = tryParseInt(lineSplit[16]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 16) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\r\n\r\n    const critCount = logLine.isCrit ? 1 : 0;\r\n    const backAttackCount = logLine.isBackAttack ? 1 : 0;\r\n    const frontAttackCount = logLine.isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { LogParser } from \"./parser.js\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat.js\";\r\ndayjs.extend(customParseFormat);\r\n\r\nexport default function fileParserWorker(\r\n  filename: string,\r\n  splitOnPhaseTransition: boolean,\r\n  mainFolder: string,\r\n  parsedLogFolder: string,\r\n  callback: CallableFunction\r\n) {\r\n  try {\r\n    const filenameSlice = filename.slice(0, -4);\r\n    const jsonName = filenameSlice + \".json\";\r\n\r\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\r\n    if (!contents) return callback(null, \"empty log\");\r\n\r\n    const logParser = new LogParser(false);\r\n    if (splitOnPhaseTransition === true)\r\n      logParser.splitOnPhaseTransition = true;\r\n\r\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\r\n    for (const line of lines) {\r\n      logParser.parseLogLine(line);\r\n    }\r\n    logParser.splitEncounter();\r\n\r\n    const encounters = logParser.encounters;\r\n\r\n    if (encounters.length > 0) {\r\n      const masterLog = { encounters: [] };\r\n\r\n      for (const encounter of encounters) {\r\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\r\n\r\n        if (duration <= 1000) continue;\r\n\r\n        let mostDamageTakenEntity = {\r\n          name: \"\",\r\n          damageTaken: 0,\r\n          isPlayer: false\r\n        };\r\n\r\n        for (const i of Object.values(encounter.entities)) {\r\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\r\n            mostDamageTakenEntity = {\r\n              name: i.name,\r\n              damageTaken: i.damageTaken,\r\n              isPlayer: i.isPlayer\r\n            };\r\n          }\r\n        }\r\n\r\n        const encounterDetails = {\r\n          duration,\r\n          mostDamageTakenEntity\r\n        };\r\n\r\n        const encounterId = uuidv4();\r\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\r\n        masterLog.encounters.push({\r\n          encounterId,\r\n          encounterFile,\r\n          ...encounterDetails\r\n        });\r\n\r\n        fs.writeFileSync(\r\n          path.join(parsedLogFolder, encounterFile),\r\n          JSON.stringify({\r\n            ...encounter,\r\n            ...encounterDetails\r\n          })\r\n        );\r\n      }\r\n\r\n      fs.writeFileSync(\r\n        path.join(parsedLogFolder, jsonName),\r\n        JSON.stringify(masterLog)\r\n      );\r\n\r\n      return callback(null, \"log parsed\");\r\n    }\r\n\r\n    return callback(null, \"no encounters found\");\r\n  } catch (e) {\r\n    return callback(e, \"log parser error\");\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","lineSplit","this","timestamp","Date","LogMessage","_LogLine","_this","message","_inheritsLoose","LogLine","LogPhaseTransition","_LogLine3","_this3","call","phaseCode","LogNewPc","_LogLine4","_this4","id","name","classId","gearScore","currentHp","maxHp","LogNewNpc","_LogLine5","_this5","LogDeath","_LogLine6","_this6","killerId","killerName","LogSkillStart","_LogLine7","_this7","skillId","skillName","_LogLine8","LogSkillStage","_this8","skillStage","LogDamage","_this9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","isCrit","isBackAttack","isFrontAttack","LogHeal","_LogLine10","_this10","healAmount","_LogLine11","LogBuff","_this11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","_LogLine12","_this12","healingSkills","duration","Demonize","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","entitiesCopy","cloneDeep","Object","keys","entity","_Object$keys","_i","lastUpdate","updateEntity","class","isPlayer","_proto","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","logLine","LogLines","startsWith","setTimeout","getTime","LogLines.LogSkillStart","includes","source","expires","LogLines.LogDamage","damageTarget","totalDamage","maxDamage","critCount","backAttackCount","frontAttackCount","damageOwner","Math","max","_step","_iterator","_createForOfIteratorHelperLoose","done","value","dayjs__default","extend","customParseFormat","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","filenameSlice","slice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","_step2","_iterator2","encounter","mostDamageTakenEntity","_Object$values","i","encounterDetails","encounterId","uuidv4","v4","encounterFile","masterLog","writeFileSync","JSON","stringify","jsonName"],"mappings":"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"}