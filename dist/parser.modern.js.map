{"version":3,"file":"parser.modern.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.currentHp = tryParseInt(lineSplit[12]);\r\n    this.maxHp = tryParseInt(lineSplit[13]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n\r\nexport enum HitFlag {\r\n  HIT_FLAG_NORMAL = 0,\r\n  HIT_FLAG_CRITICAL = 1,\r\n  HIT_FLAG_MISS = 2,\r\n  HIT_FLAG_INVINCIBLE = 3,\r\n  HIT_FLAG_DOT = 4,\r\n  HIT_FLAG_IMMUNE = 5,\r\n  HIT_FLAG_IMMUNE_SILENCED = 6,\r\n  HIT_FLAG_FONT_SILENCED = 7,\r\n  HIT_FLAG_DOT_CRITICAL = 8,\r\n  HIT_FLAG_DODGE = 9,\r\n  HIT_FLAG_REFLECT = 10,\r\n  HIT_FLAG_DAMAGE_SHARE = 11,\r\n  HIT_FLAG_DODGE_HIT = 12,\r\n  HIT_FLAG_MAX = 13,\r\n  HIT_OPTION_BACK_ATTACK = 1 << (0 + 4),\r\n  HIT_OPTION_FRONTAL_ATTACK = 1 << (1 + 4),\r\n  HIT_OPTION_FLANK_ATTACK = 1 << (2 + 4)\r\n}\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills, HitFlag } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 13) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\r\n\r\n    const isCrit =\r\n      (logLine.damageModifier &\r\n        (HitFlag.HIT_FLAG_CRITICAL | HitFlag.HIT_FLAG_DOT_CRITICAL)) >\r\n      0;\r\n    const isBackAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_BACK_ATTACK) > 0;\r\n    const isFrontAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_FRONTAL_ATTACK) > 0;\r\n\r\n    const critCount = isCrit ? 1 : 0;\r\n    const backAttackCount = isBackAttack ? 1 : 0;\r\n    const frontAttackCount = isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","LogLine","constructor","lineSplit","this","timestamp","Date","super","message","LogPhaseTransition","phaseCode","LogNewPc","id","name","classId","class","gearScore","currentHp","maxHp","LogNewNpc","LogDeath","killerId","killerName","skillId","skillName","LogSkillStage","skillStage","LogDamage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","healAmount","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","HitFlag","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","entitiesCopy","cloneDeep","Object","keys","entity","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","logLine","LogLines","startsWith","setTimeout","LogLines.LogNewPc","LogLines.LogNewNpc","getTime","includes","source","expires","LogLines.LogSkillStage","damageOwner","damageTarget","createEntitySkill","totalDamage","maxDamage","critCount","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","backAttackCount","HIT_OPTION_BACK_ATTACK","frontAttackCount","HIT_OPTION_FRONTAL_ATTACK","Math","max","LogLines.LogHeal"],"mappings":"6RAAgBA,SAAAA,EAAYC,EAAmBC,EAAe,EAAGC,EAAQ,IACvE,GAAyB,iBAAdF,EACT,OAAIG,MAAMH,GAAmBC,EACtBD,EAGT,IAAAI,EAEA,IACEA,EAASC,SAASL,EAAWE,GACzBC,MAAMC,KAASA,EAASH,GAC5B,MAAMK,GACNF,EAASH,EAGX,OACDG,ECdD,MAAaG,EAIXC,YAAYC,QAHZA,eAG+B,EAAAC,KAF/BC,eAGE,EAAAD,KAAKD,UAAYA,EACjBC,KAAKC,UAAY,IAAAC,KAASF,KAAKD,UAAU,KAKvC,gBAA0BF,EAG9BC,YAAYC,GACVI,MAAMJ,GADuBC,KAF/BI,aAKE,EAAAJ,KAAKI,QAAUJ,KAAKD,UAAU,UAgB5BM,YAGJP,YAAYC,GACVI,MAAMJ,GADuBC,KAF/BM,eAE+B,EAG7BN,KAAKM,UAAYjB,EAAYU,EAAU,WAKrCQ,YASJT,YAAYC,GACVI,MAAMJ,GADuBC,KAR/BQ,QAQ+B,EAAAR,KAP/BS,UACAC,EAAAA,KAAAA,aACAC,EAAAA,KAAAA,WACAC,EAAAA,KAAAA,sBACAC,eAG+B,EAAAb,KAF/Bc,WAKE,EAAAd,KAAKQ,GAAKT,EAAU,GACpBC,KAAKS,KAAOV,EAAU,IAAM,iBAC5BC,KAAKU,QAAUrB,EAAYU,EAAU,IACrCC,KAAKW,MAAQZ,EAAU,IAAM,eAE7BC,KAAKY,UAAYb,EAAU,GAC3BC,KAAKa,UAAYxB,EAAYU,EAAU,IACvCC,KAAKc,MAAQzB,EAAYU,EAAU,KAK1BgB,MAAAA,UAAyBlB,EAMpCC,YAAYC,GACVI,MAAMJ,GADuBC,KAL/BQ,eACAC,UAI+B,EAAAT,KAH/Ba,eACAC,EAAAA,KAAAA,aAKEd,KAAKQ,GAAKT,EAAU,GAEpBC,KAAKS,KAAOV,EAAU,IAAM,iBAC5BC,KAAKa,UAAYxB,EAAYU,EAAU,IACvCC,KAAKc,MAAQzB,EAAYU,EAAU,KAKjC,MAAAiB,YAMJlB,YAAYC,GACVI,MAAMJ,GADuBC,KAL/BQ,QAK+B,EAAAR,KAJ/BS,UACAQ,EAAAA,KAAAA,qBACAC,gBAE+B,EAG7BlB,KAAKQ,GAAKT,EAAU,GACpBC,KAAKS,KAAOV,EAAU,IAAM,iBAC5BC,KAAKiB,SAAWlB,EAAU,GAC1BC,KAAKkB,WAAanB,EAAU,IAAM,kBAKhC,gBAA6BF,EAMjCC,YAAYC,GACVI,MAAMJ,GADuBC,KAL/BQ,QACAC,EAAAA,KAAAA,UACAU,EAAAA,KAAAA,aACAC,EAAAA,KAAAA,iBAKEpB,KAAKQ,GAAKT,EAAU,GACpBC,KAAKS,KAAOV,EAAU,IAAM,iBAC5BC,KAAKmB,QAAUpB,EAAU,GACzBC,KAAKoB,UAAYrB,EAAU,IAAM,uBAK/BsB,YAOJvB,YAAYC,GACVI,MAAMJ,GADuBC,KAN/BQ,QAM+B,EAAAR,KAL/BS,UACAU,EAAAA,KAAAA,oBACAC,eAG+B,EAAApB,KAF/BsB,gBAE+B,EAG7BtB,KAAKQ,GAAKT,EAAU,GACpBC,KAAKS,KAAOV,EAAU,IAAM,iBAC5BC,KAAKmB,QAAUpB,EAAU,GACzBC,KAAKoB,UAAYrB,EAAU,IAAM,gBACjCC,KAAKsB,WAAajC,EAAYU,EAAU,KAKtC,MAAAwB,UAAgC1B,EAcpCC,YAAYC,GACVI,MAAMJ,GADuBC,KAb/BQ,QAa+B,EAAAR,KAZ/BS,UAY+B,EAAAT,KAX/BmB,aACAC,EAAAA,KAAAA,sBACAI,mBAS+B,EAAAxB,KAR/ByB,iBACAC,EAAAA,KAAAA,cACAC,EAAAA,KAAAA,gBACAC,EAAAA,KAAAA,mBACAC,oBAI+B,EAAA7B,KAH/Ba,eACAC,EAAAA,KAAAA,aAKEd,KAAKQ,GAAKT,EAAU,GACpBC,KAAKS,KAAOV,EAAU,IAAM,iBAC5BC,KAAKmB,QAAU9B,EAAYU,EAAU,IACrCC,KAAKoB,UAAYrB,EAAU,IAAM,gBACjCC,KAAKwB,cAAgBnC,EAAYU,EAAU,IAC3CC,KAAKyB,YAAc1B,EAAU,GAC7BC,KAAK0B,SAAW3B,EAAU,GAC1BC,KAAK2B,WAAa5B,EAAU,IAAM,iBAClCC,KAAK4B,OAASvC,EAAYU,EAAU,KACpCC,KAAK6B,eAAiBxC,EAAYU,EAAU,IAAK,EAAG,IACpDC,KAAKa,UAAYxB,EAAYU,EAAU,KACvCC,KAAKc,MAAQzB,EAAYU,EAAU,YAKjC+B,YAKJhC,YAAYC,GACVI,MAAMJ,GADuBC,KAJ/BQ,QAI+B,EAAAR,KAH/BS,UACAsB,EAAAA,KAAAA,gBAKE,EAAA/B,KAAKQ,GAAKT,EAAU,GACpBC,KAAKS,KAAOV,EAAU,IAAM,iBAC5BC,KAAK+B,WAAa1C,EAAYU,EAAU,KAMtC,gBAAuBF,EAU3BC,YAAYC,GACVI,MAAMJ,GADuBC,KAT/BQ,QACAC,EAAAA,KAAAA,iBACAuB,YAO+B,EAAAhC,KAN/BiC,cAM+B,EAAAjC,KAL/BkC,WAK+B,EAAAlC,KAJ/BmC,cACAC,EAAAA,KAAAA,uBACAC,kBAE+B,EAG7BrC,KAAKQ,GAAKT,EAAU,GACpBC,KAAKS,KAAOV,EAAU,IAAM,iBAC5BC,KAAKgC,OAASjC,EAAU,GACxBC,KAAKiC,SAAWlC,EAAU,GAC1BC,KAAKkC,MAAwB,KAAhBnC,EAAU,GACvBC,KAAKmC,SAAWpC,EAAU,GAC1BC,KAAKoC,WAAarC,EAAU,IAAM,iBAClCC,KAAKqC,aAAehD,EAAYU,EAAU,WAKxCuC,YAIJxC,YAAYC,GACVI,MAAMJ,GADuBC,KAH/BQ,QAG+B,EAAAR,KAF/BS,UAKE,EAAAT,KAAKQ,GAAKT,EAAU,GACpBC,KAAKS,KAAOV,EAAU,IAAM,kBCzNnBwC,MAAAA,EAA+B,CAC1C,wBAAyB,CACvBC,SAAU,GAEZ,YAAa,CACXA,SAAU,MAEZ,kBAAmB,CACjBA,SAAU,KAEZC,SAAU,CACRD,SAAU,OAIFE,IAAAA,GAAZ,SAAYA,GACVA,EAAAA,EAAA,gBAAA,GAAA,kBACAA,EAAAA,EAAA,kBAAA,GAAA,oBACAA,EAAAA,EAAA,cAAA,GAAA,gBACAA,EAAAA,EAAA,oBAAA,GAAA,sBACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,gBAAA,GAAA,kBACAA,EAAAA,EAAA,yBAAA,GAAA,2BACAA,EAAAA,EAAA,uBAAA,GAAA,yBACAA,EAAAA,EAAA,sBAAA,GAAA,wBACAA,EAAAA,EAAA,eAAA,GAAA,iBACAA,EAAAA,EAAA,iBAAA,IAAA,mBACAA,EAAAA,EAAA,sBAAA,IAAA,wBACAA,EAAAA,EAAA,mBAAA,IAAA,qBACAA,EAAAA,EAAA,aAAA,IAAA,eACAA,EAAAA,EAAA,uBAAA,IAAA,yBACAA,EAAAA,EAAA,0BAAA,IAAA,4BACAA,EAAAA,EAAA,wBAAA,IAAA,0BAjBF,CAAYA,IAAAA,EAkBX,WCgEqBC,EAkBpB7C,YAAY8C,GAAS,GAjBrBC,KAAAA,yBACAC,gBAgB0B,EAAA9C,KAd1B+C,gBAc0B,EAAA/C,KAb1B4C,YACAI,EAAAA,KAAAA,2BACAC,EAAAA,KAAAA,sCACAC,4BAU0B,EAAAlD,KAT1BmD,0BAS0B,EAAAnD,KAP1BoD,iCACAC,EAAAA,KAAAA,4CAEAC,UAI0B,EAAAtD,KAH1BuD,gBACAC,EAAAA,KAAAA,iBAGE,EAAAxD,KAAK6C,aAAe,IAApBY,EACAzD,KAAK8C,WAAa,KAElB9C,KAAK+C,YAAa,EAClB/C,KAAK4C,OAASA,EACd5C,KAAKgD,uBAAwB,EAC7BhD,KAAKiD,2BAA4B,EACjCjD,KAAKkD,wBAAyB,EAC9BlD,KAAKmD,sBAAuB,EAE5BnD,KAAKoD,6BAA8B,EACnCpD,KAAKqD,gCAAkC,EAEvCrD,KAAK0D,aACL1D,KAAKuD,WAAa,GAEdvD,KAAK4C,QACPe,YAAY3D,KAAK4D,qBAAqBC,KAAK7D,MAAO,KAItD0D,aACM1D,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAAS,oBAGb,MAAM4D,GAAW,IAAjB9D,KAEAF,KAAKsD,KAAO,CACVW,UAAWD,EACXE,iBAAkBF,EAClBG,eAAgB,EAChBC,SAAU,GACVC,iBAAkB,CAChBC,iBAAkB,EAClBC,eAAgB,EAChBC,iBAAkB,EAClBC,eAAgB,EAChBC,iBAAkB,EAClBC,eAAgB,EAChBC,gBAAiB,EACjBC,cAAe,IAInB7E,KAAKwD,YAAc,GAEnBxD,KAAK6C,aAAaiB,KAAK,eAEzBgB,YACE9E,KAAK8C,WAAa,KAClB,MAAkBiC,EAAGC,EAAUhF,KAAKsD,KAAKc,UACzCpE,KAAK0D,aACL,IAAK,WAAgBuB,OAAOC,KAAKH,IAE1B,SAAaA,EAAaI,GAAQC,WAAa,KAGpDpF,KAAKqF,aAAaN,EAAaI,GAAQ1E,KAAM,CAC3CA,KAAMsE,EAAaI,GAAQ1E,KAC3BE,MAAOoE,EAAaI,GAAQxE,MAC5B2E,SAAUP,EAAaI,GAAQG,SAC/B1E,UAAWmE,EAAaI,GAAQvE,UAChCE,MAAOiE,EAAaI,GAAQrE,MAC5BD,UAAWkE,EAAaI,GAAQtE,YAItC0E,cACMvF,KAAK8C,YAAY0C,aAAaxF,KAAK8C,YACvC9C,KAAK8C,WAAa,KAEpB2C,iBACE,QAAiBT,EAAUhF,KAAKsD,MAEH,GAA3BoC,EAASvB,gBACsC,GAA9CuB,EAASrB,iBAAiBC,mBACzBoB,EAASrB,iBAAiBG,kBAE5BxE,KAAKuD,WAAWoC,KAAKD,GACvB1F,KAAK0D,aAGPE,uBACE5D,KAAK6C,aAAaiB,KAAK,eAAgB9D,KAAKsD,MAG9CsC,aAAaC,GACX,IAAKA,EAAM,OAEX,MAAe9F,EAAG8F,EAAKC,OAAOC,MAAM,KACpC,GAAIhG,EAAUiG,OAAS,IAAMjG,EAAU,GAAI,OAE3C,QAAgBV,EAAYU,EAAU,IAEtC,IACE,OAAQkG,GACN,KAAA,EACEjG,KAAKkG,UAAUnG,GACf,MACF,KAAA,EACEC,KAAKmG,YACL,MACF,KAAA,EACEnG,KAAKoG,kBAAkBrG,GACvB,MACF,KAAK,EACHC,KAAKqG,QAAQtG,GACb,MACF,OACEC,KAAKsG,SAASvG,GACd,MACF,KAAK,EACHC,KAAKuG,QAAQxG,GACb,MACF,KAAK,EACHC,KAAKwG,aAAazG,GAClB,MACF,KAAA,EACEC,KAAKyG,aAAa1G,GAClB,MACF,KAAK,EACHC,KAAK0G,SAAS3G,GACd,MACF,KAAA,EACEC,KAAK2G,OAAO5G,GACZ,MACF,KAAK,GACHC,KAAK4G,OAAO7G,GACZ,MACF,QACEC,KAAK6G,gBAAgB9G,IAGzB,MAAO+G,GACP9G,KAAK6C,aAAaiB,KAAK,MAAO,CAAEC,KAAM,QAAS3D,QAAS0G,KAI5DzB,aAAa0B,EAAoBC,GAC/B,MAAMC,EAAa,CAAE7B,YAAa,IAAflF,MAQjBF,KAAKsD,KAAKc,SAAS2C,GACdG,EAAA,GARDH,UAAmBzD,KAAKc,SAQvBpE,KAAKsD,KAAKc,SAAS2C,GArMF,CACxB3B,WAAY,EACZ5E,GAAI,GACJC,KAAM,GACNE,MAAO,GACP2E,UAAU,EACV6B,QAAQ,EACRC,UAAW,EACXxG,UAAW,GACXC,UAAW,EACXC,MAAO,EACPuG,YAAa,EACbC,YAAa,EACbC,WAAY,EACZC,YAAa,EACbC,OAAQ,GACRC,KAAM,CACJC,MAAO,EACPC,KAAM,EACNC,WAAY,EACZC,YAAa,EACbC,QAAS,IAiLJf,EACAC,GAMTf,UAAUnG,GACR,MAAaiI,EAAG,IAAIC,EAAoBlI,GAEpCC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAAS,cAAc4H,EAAQ5H,YAI9B4H,EAAQ5H,QAAQ8H,WAAW,eAC9BlI,KAAK6C,aAAaiB,KAAK,UAAWkE,EAAQ5H,SAK9C+F,YAGMnG,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAAoB,cAIpBJ,KAAK4C,QAC4B,IAA/B5C,KAAKgD,uBAAsD,MAAnBhD,KAAK8C,aAC3C9C,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAAgC,0BAIpCJ,KAAK8C,WAAaqF,WAAWnI,KAAK8E,UAAUjB,KAAK7D,MAAO,KACxDA,KAAK6C,aAAaiB,KAAK,UAAW,cAGpC9D,KAAKyF,iBACLzF,KAAK6C,aAAaiB,KAAK,UAAW,aAKtCsC,kBAAkBrG,GAChB,QAAgB,MAAgCA,GAE5CC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAAS,sBAAsB4H,EAAQ1H,cAIvCN,KAAK4C,SACP5C,KAAK6C,aAAaiB,KAChB,UACA,oBAAoBkE,EAAQ1H,aAG1BN,KAAKiD,4BACPjD,KAAKoD,6BAA8B,EACnCpD,KAAKqD,iCAAmC,IACzCnD,QAGEF,KAAK4C,QAAU5C,KAAKkD,wBACvBlD,KAAKyF,iBAKTY,QAAQtG,GACN,MAAaiI,EAAG,IAAYI,EAAUrI,GAElCC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAAS,YAAY4H,EAAQxH,OAAOwH,EAAQvH,SAASuH,EAAQtH,YAAYsH,EAAQrH,UAAUqH,EAAQpH,cAAcoH,EAAQnH,cAAcmH,EAAQlH,UAInJd,KAAKqF,aAAa2C,EAAQvH,KAA1ByG,EAAA,CACEzG,KAAMuH,EAAQvH,KACdE,MAAOqH,EAAQrH,MACf2E,UAAU,GACN0C,EAAQpH,WACW,KAArBoH,EAAQpH,WAAoB,CAAEA,UAAWoH,EAAQpH,WALrD,CAMEC,UAAWmH,EAAQnH,UACnBC,MAAOkH,EAAQlH,SAKnBwF,SAASvG,GACP,MAAaiI,EAAG,IAAYK,EAAWtI,GAEnCC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAAsB,aAAA4H,EAAQxH,OAAOwH,EAAQvH,SAASuH,EAAQnH,cAAcmH,EAAQlH,UAIxFd,KAAKqF,aAAa2C,EAAQvH,KAAM,CAC9BA,KAAMuH,EAAQvH,KACd6E,UAAU,EACVzE,UAAWmH,EAAQnH,UACnBC,MAAOkH,EAAQlH,QAKnByF,QAAQxG,GACN,MAAaiI,EAAG,IAAIC,EAAkBlI,GAElCC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,oBAAqB4H,EAAQvH,QAAQuH,EAAQ9G,eAIjDlB,KAAKqF,aAAa2C,EAAQvH,KAAM,CAC9BA,KAAMuH,EAAQvH,KACd0G,QAAQ,EACRC,UAAWY,EAAQ/H,UAAUqI,YAKjC9B,aAAazG,GACX,MAAMiI,EAAU,IAAIC,EAAuBlI,GAEvCC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAA0B,iBAAA4H,EAAQxH,OAAOwH,EAAQvH,SAASuH,EAAQ7G,YAAY6G,EAAQ5G,cAItF6D,OAAOC,KAAK3C,GAAegG,SAASP,EAAQ5G,YAC9CpB,KAAKwD,YAAYmC,KAAK,CACpB6C,OAAQR,EAAQvH,KAChBgI,SAAUT,EAAQ/H,UAAYsC,EAAcyF,EAAQ5G,WAAWoB,WAInExC,KAAKqF,aAAa2C,EAAQvH,KAAM,CAC9BA,KAAMuH,EAAQvH,KACd0G,QAAQ,IAKZV,aAAa1G,GACX,MAAaiI,EAAG,IAAYU,EAAe3I,GAEvCC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAA0B,iBAAA4H,EAAQvH,SAASuH,EAAQ7G,YAAY6G,EAAQ5G,cAAc4G,EAAQ1G,eAMnGoF,SAAS3G,GACP,GAAIA,EAAUiG,OAAS,GAAI,OAC3B,MAAMgC,EAAU,IAAIC,EAAmBlI,GAEnCC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,qBAAsB4H,EAAQxH,OAAOwH,EAAQvH,SAASuH,EAAQ7G,YAAY6G,EAAQ5G,cAAc4G,EAAQxG,kBAAkBwG,EAAQvG,gBAAgBuG,EAAQtG,aAAasG,EAAQrG,eAAeqG,EAAQpG,WAAWoG,EAAQnH,cAAcmH,EAAQlH,UAKjPd,KAAKoD,6BACLpD,KAAKqD,gCAAkC,GACvCrD,KAAKqD,iCAAmC,IAADnD,KAAc,OAErDF,KAAK8E,YACL9E,KAAKoD,6BAA8B,GAGrCpD,KAAKqF,aAAa2C,EAAQvH,KAAM,CAC9BA,KAAMuH,EAAQvH,OAGhBT,KAAKqF,aAAa2C,EAAQrG,WAAY,CACpClB,KAAMuH,EAAQrG,WACdd,UAAWmH,EAAQnH,UACnBC,MAAOkH,EAAQlH,QAGjB,MAAM6H,EAAc3I,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAC7BmI,EAAG5I,KAAKsD,KAAKc,SAAS4D,EAAQrG,YAkBhD,IAfGiH,EAAatD,UACdtF,KAAKmD,sBACL6E,EAAQnH,UAAY,IAEpBmH,EAAQpG,OAASoG,EAAQpG,OAASoG,EAAQnH,WAGtCmH,EAAQ5G,kBAAkBkC,KAAKc,SAAS4D,EAAQvH,MAAMgH,SAC1DzH,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMgH,OAAOO,EAAQ5G,WAC3CyH,EAAAA,GAvb4B,CACnCpI,KAAM,GACNqI,YAAa,EACbC,UAAW,EACXrB,KAAM,CACJC,MAAO,EACPC,KAAM,EACNC,WAAY,EACZC,YAAa,EACbC,QAAS,IA+aJ,CAAEtH,KAAMuH,EAAQ5G,aAKG,UAAtB4G,EAAQ5G,WAAyB4G,EAAQpG,OAAS,IAAU,OAGhE,GAA0B,UAAtBoG,EAAQ5G,WAAoD,KAA3B4G,EAAQnG,eAAuB,OAEpE,MASemH,GARZhB,EAAQnG,gBACNa,EAAQuG,kBAAoBvG,EAAQwG,wBACvC,EAMyB,EAAI,EACzBC,GALHnB,EAAQnG,eAAiBa,EAAQ0G,wBAA0B,EAKvB,EAAI,EACrBC,GAJnBrB,EAAQnG,eAAiBa,EAAQ4G,2BAA6B,EAIxB,EAAI,EAE7CtJ,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMgH,OAAOO,EAAQ5G,WAAW0H,aACzDd,EAAQpG,OAERoG,EAAQpG,OACR5B,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMgH,OAAOO,EAAQ5G,WAAW2H,YAE3D/I,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMgH,OAAOO,EAAQ5G,WAAW2H,UACzDf,EAAQpG,QAEZ5B,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAM4G,aAAeW,EAAQpG,OACxD5B,KAAKsD,KAAKc,SAAS4D,EAAQrG,YAAY6F,aAAeQ,EAAQpG,OAEpC,UAAtBoG,EAAQ5G,YACVpB,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMiH,KAAKC,OAAS,EAC/C3H,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMiH,KAAKE,MAAQoB,EAC9ChJ,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMiH,KAAKG,YAAcsB,EACpDnJ,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMiH,KAAKI,aAAeuB,EAErDrJ,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMgH,OAC/BO,EAAQ5G,WACRsG,KAAKC,OAAS,EAChB3H,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMgH,OAAOO,EAAQ5G,WAAWsG,KAAKE,MAC9DoB,EACFhJ,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMgH,OAC/BO,EAAQ5G,WACRsG,KAAKG,YAAcsB,EACrBnJ,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMgH,OAC/BO,EAAQ5G,WACRsG,KAAKI,aAAeuB,GAGpBV,EAAYrD,WACdtF,KAAKsD,KAAKe,iBAAiBC,kBAAoB0D,EAAQpG,OACvD5B,KAAKsD,KAAKe,iBAAiBE,eAAiBgF,KAAKC,IAC/CxJ,KAAKsD,KAAKe,iBAAiBE,eAC3BoE,EAAYtB,cAIZuB,EAAatD,WACftF,KAAKsD,KAAKe,iBAAiBG,kBAAoBwD,EAAQpG,OACvD5B,KAAKsD,KAAKe,iBAAiBI,eAAiB8E,KAAKC,IAC/CxJ,KAAKsD,KAAKe,iBAAiBI,eAC3BmE,EAAapB,cAIgB,IAA7BxH,KAAKsD,KAAKa,iBACZnE,KAAKsD,KAAKa,gBAAkB6D,EAAQ/H,WACtCD,KAAKsD,KAAKY,kBAAoB8D,EAAQ/H,UAIxC0G,OAAO5G,GACL,MAAaiI,EAAG,IAAYyB,EAAS1J,GAEjCC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAAS,WAAW4H,EAAQxH,OAAOwH,EAAQvH,SAASuH,EAAQjG,eAIhE,IAAIK,EAAa,GACjB,IAAK,MAALoG,UAA0BhF,YACxB,GAAIgF,EAAOC,UAAYT,EAAQ/H,UAAW,CACxCmC,EAAaoG,EAAOA,OACpB,MAGCpG,IAELpC,KAAKqF,aAAajD,EAAY,CAC5B3B,KAAM2B,IAGRpC,KAAKsD,KAAKc,SAAShC,GAAYkF,aAAeU,EAAQjG,WAElD/B,KAAKsD,KAAKc,SAAShC,GAAYkD,WACjCtF,KAAKsD,KAAKe,iBAAiBK,kBAAoBsD,EAAQjG,WACvD/B,KAAKsD,KAAKe,iBAAiBM,eAAiB4E,KAAKC,IAC/CxJ,KAAKsD,KAAKe,iBAAiBM,eAC3B3E,KAAKsD,KAAKc,SAAShC,GAAYkF,eAMrCV,OAAO7G,GACL,MAAMiI,EAAU,IAAIC,EAAiBlI,GAEjCC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,QAAS,WAAW4H,EAAQxH,OAAOwH,EAAQvH,SAASuH,EAAQhG,WAAWgG,EAAQ/F,aAAa+F,EAAQ7F,aAAa6F,EAAQ5F,eAAe4F,EAAQ3F,iBAIhJ2F,EAAQ3F,cAAgB2F,EAAQ9F,QAClClC,KAAKqF,aAAa2C,EAAQvH,KAAM,CAC9BA,KAAMuH,EAAQvH,OAGhBT,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAM8G,YAAcS,EAAQ3F,aAEnDrC,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAM6E,WACnCtF,KAAKsD,KAAKe,iBAAiBO,iBAAmBoD,EAAQ3F,aACtDrC,KAAKsD,KAAKe,iBAAiBQ,cAAgB0E,KAAKC,IAC9CxJ,KAAKsD,KAAKe,iBAAiBQ,cAC3B7E,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAM8G,cAOzCV,gBAAgB9G,GACd,QAAgB,MAA8BA,GAE1CC,KAAK+C,YACP/C,KAAK6C,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACN3D,4BAA6B4H,EAAQxH,OAAOwH,EAAQvH,SAIxDT,KAAKqF,aAAa2C,EAAQvH,KAAM,CAC9BA,KAAMuH,EAAQvH,OAIhBT,KAAKsD,KAAKc,SAAS4D,EAAQvH,MAAMiH,KAAKK,SAAW"}