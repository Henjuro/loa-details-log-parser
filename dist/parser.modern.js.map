{"version":3,"file":"parser.modern.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\n  if (typeof intString === \"number\") {\n    if (isNaN(intString)) return defaultValue;\n    return intString;\n  }\n\n  let intNum: number;\n\n  try {\n    intNum = parseInt(intString, radix);\n    if (isNaN(intNum)) intNum = defaultValue;\n  } catch {\n    intNum = defaultValue;\n  }\n\n  return intNum;\n}\n","import { tryParseInt } from \"./util.js\";\n\nclass LogLine {\n  lineSplit: string[];\n  timestamp: Date;\n\n  constructor(lineSplit: string[]) {\n    this.lineSplit = lineSplit;\n    this.timestamp = new Date(this.lineSplit[1]);\n  }\n}\n\n// logId = 0\nexport class LogMessage extends LogLine {\n  message: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.message = this.lineSplit[2];\n  }\n}\n\n// logId = 1\nexport class LogInitEnv extends LogLine {\n  playerId: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.playerId = lineSplit[2];\n  }\n}\n\n// logId = 2\nexport class LogPhaseTransition extends LogLine {\n  phaseCode: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.phaseCode = tryParseInt(lineSplit[2]);\n  }\n}\n\n// logId = 3\nexport class LogNewPc extends LogLine {\n  id: string;\n  name: string;\n  classId: number;\n  class: string;\n  gearScore: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.classId = tryParseInt(lineSplit[4]);\n    this.class = lineSplit[5] || \"UnknownClass\";\n    /* this.level = tryParseInt(lineSplit[6]); */\n    this.gearScore = lineSplit[7];\n    this.currentHp = tryParseInt(lineSplit[8]);\n    this.maxHp = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 4\nexport class LogNewNpc extends LogLine {\n  id: string;\n  name: string;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    //this.npcId = tryParseInt(lineSplit[3]);\n    this.name = lineSplit[4] || \"Unknown Entity\";\n    this.currentHp = tryParseInt(lineSplit[5]);\n    this.maxHp = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 5\nexport class LogDeath extends LogLine {\n  id: string;\n  name: string;\n  killerId: string;\n  killerName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.killerId = lineSplit[4];\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\n  }\n}\n\n// logId = 6\nexport class LogSkillStart extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n  }\n}\n\n// logId = 7\nexport class LogSkillStage extends LogLine {\n  id: string;\n  name: string;\n  skillId: string;\n  skillName: string;\n  skillStage: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = lineSplit[4];\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillStage = tryParseInt(lineSplit[6]);\n  }\n}\n\n// logId = 8\nexport class LogDamage extends LogLine {\n  id: string;\n  name: string;\n  skillId: number;\n  skillName: string;\n  skillEffectId: number;\n  skillEffect: string;\n  targetId: string;\n  targetName: string;\n  damage: number;\n  damageModifier: number;\n  currentHp: number;\n  maxHp: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.skillId = tryParseInt(lineSplit[4]);\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\n    this.skillEffectId = tryParseInt(lineSplit[6]);\n    this.skillEffect = lineSplit[7];\n    this.targetId = lineSplit[8];\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\n    this.damage = tryParseInt(lineSplit[10]);\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\n    this.currentHp = tryParseInt(lineSplit[12]);\n    this.maxHp = tryParseInt(lineSplit[13]);\n  }\n}\n\n// logId = 9\nexport class LogHeal extends LogLine {\n  id: string;\n  name: string;\n  healAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.healAmount = tryParseInt(lineSplit[4]);\n    //this.currentHp = tryParseInt(lineSplit[5]);\n  }\n}\n\n// logId = 10\nexport class LogBuff extends LogLine {\n  id: string;\n  name: string;\n  buffId: string;\n  buffName: string;\n  isNew: boolean;\n  sourceId: string;\n  sourceName: string;\n  shieldAmount: number;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    this.buffId = lineSplit[4];\n    this.buffName = lineSplit[5];\n    this.isNew = lineSplit[6] == \"1\";\n    this.sourceId = lineSplit[7];\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\n    this.shieldAmount = tryParseInt(lineSplit[9]);\n  }\n}\n\n// logId = 11\nexport class LogCounterattack extends LogLine {\n  id: string;\n  name: string;\n\n  constructor(lineSplit: string[]) {\n    super(lineSplit);\n\n    this.id = lineSplit[2];\n    this.name = lineSplit[3] || \"Unknown Entity\";\n    /* this.targetId = lineSplit[4];\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\n  }\n}\n","interface HealingSkills {\n  [key: string]: HealingSkillDetails;\n}\ninterface HealingSkillDetails {\n  duration: number;\n}\nexport const healingSkills: HealingSkills = {\n  \"Serenade of Salvation\": {\n    duration: 3\n  },\n  \"Holy Aura\": {\n    duration: 16 * 1000\n  },\n  \"Holy Protection\": {\n    duration: 7 * 1000\n  },\n  Demonize: {\n    duration: 1.5 * 1000\n  }\n};\n\nexport enum HitFlag {\n  HIT_FLAG_NORMAL = 0,\n  HIT_FLAG_CRITICAL = 1,\n  HIT_FLAG_MISS = 2,\n  HIT_FLAG_INVINCIBLE = 3,\n  HIT_FLAG_DOT = 4,\n  HIT_FLAG_IMMUNE = 5,\n  HIT_FLAG_IMMUNE_SILENCED = 6,\n  HIT_FLAG_FONT_SILENCED = 7,\n  HIT_FLAG_DOT_CRITICAL = 8,\n  HIT_FLAG_DODGE = 9,\n  HIT_FLAG_REFLECT = 10,\n  HIT_FLAG_DAMAGE_SHARE = 11,\n  HIT_FLAG_DODGE_HIT = 12,\n  HIT_FLAG_MAX = 13,\n  HIT_OPTION_BACK_ATTACK = 1 << (0 + 4),\n  HIT_OPTION_FRONTAL_ATTACK = 1 << (1 + 4),\n  HIT_OPTION_FLANK_ATTACK = 1 << (2 + 4)\n}\n","import cloneDeep from \"lodash/cloneDeep.js\";\nimport EventEmitter from \"events\";\n\nimport * as LogLines from \"./log-lines.js\";\nimport { tryParseInt } from \"./util.js\";\nimport { healingSkills, HitFlag } from \"./constants.js\";\n\ninterface Game {\n  startedOn: number;\n  lastCombatPacket: number;\n  fightStartedOn: number;\n  entities: { [name: string]: Entity };\n  damageStatistics: {\n    totalDamageDealt: number;\n    topDamageDealt: number;\n    totalDamageTaken: number;\n    topDamageTaken: number;\n    totalHealingDone: number;\n    topHealingDone: number;\n    totalShieldDone: number;\n    topShieldDone: number;\n  };\n}\ninterface HealSource {\n  source: string;\n  expires: number;\n}\n\ninterface Entity {\n  lastUpdate: number;\n  id: string;\n  name: string;\n  class: string;\n  isPlayer: boolean;\n  isDead: boolean;\n  deathTime: number;\n  gearScore: string;\n  currentHp: number;\n  maxHp: number;\n  damageDealt: number;\n  healingDone: number;\n  shieldDone: number;\n  damageTaken: number;\n  skills: { [name: string]: EntitySkills };\n  hits: Hits;\n}\ninterface EntitySkills {\n  id: number;\n  name: string;\n  totalDamage: number;\n  maxDamage: number;\n  hits: Hits;\n}\nfunction createEntitySkill(): EntitySkills {\n  const newEntitySkill: EntitySkills = {\n    id: 0,\n    name: \"\",\n    totalDamage: 0,\n    maxDamage: 0,\n    hits: {\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntitySkill;\n}\n\ninterface Hits {\n  total: number;\n  crit: number;\n  backAttack: number;\n  frontAttack: number;\n  counter: number;\n}\nfunction createEntity(): Entity {\n  const newEntity: Entity = {\n    lastUpdate: 0,\n    id: \"\",\n    name: \"\",\n    class: \"\",\n    isPlayer: false,\n    isDead: false,\n    deathTime: 0,\n    gearScore: \"\",\n    currentHp: 0,\n    maxHp: 0,\n    damageDealt: 0,\n    healingDone: 0,\n    shieldDone: 0,\n    damageTaken: 0,\n    skills: {},\n    hits: {\n      total: 0,\n      crit: 0,\n      backAttack: 0,\n      frontAttack: 0,\n      counter: 0\n    }\n  };\n  return newEntity;\n}\n\nexport class LogParser {\n  eventEmitter: EventEmitter;\n  resetTimer: ReturnType<typeof setTimeout>;\n\n  debugLines: boolean;\n  isLive: boolean;\n  dontResetOnZoneChange: boolean;\n  resetAfterPhaseTransition: boolean;\n  splitOnPhaseTransition: boolean;\n  removeOverkillDamage: boolean;\n\n  phaseTransitionResetRequest: boolean;\n  phaseTransitionResetRequestTime: number;\n\n  game: Game;\n  encounters: Game[];\n  healSources: HealSource[];\n\n  constructor(isLive = false) {\n    this.eventEmitter = new EventEmitter();\n    this.resetTimer = null;\n\n    this.debugLines = false;\n    this.isLive = isLive;\n    this.dontResetOnZoneChange = false;\n    this.resetAfterPhaseTransition = false;\n    this.splitOnPhaseTransition = false;\n    this.removeOverkillDamage = true;\n\n    this.phaseTransitionResetRequest = false;\n    this.phaseTransitionResetRequestTime = 0;\n\n    this.resetState();\n    this.encounters = [];\n\n    if (this.isLive) {\n      setInterval(this.broadcastStateChange.bind(this), 100);\n    }\n  }\n\n  resetState() {\n    if (this.debugLines)\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: \"Resetting state\"\n      });\n\n    const curTime = +new Date();\n\n    this.game = {\n      startedOn: curTime,\n      lastCombatPacket: curTime,\n      fightStartedOn: 0,\n      entities: {},\n      damageStatistics: {\n        totalDamageDealt: 0,\n        topDamageDealt: 0,\n        totalDamageTaken: 0,\n        topDamageTaken: 0,\n        totalHealingDone: 0,\n        topHealingDone: 0,\n        totalShieldDone: 0,\n        topShieldDone: 0\n      }\n    };\n\n    this.healSources = [];\n\n    this.eventEmitter.emit(\"reset-state\");\n  }\n  softReset() {\n    this.resetTimer = null;\n    const entitiesCopy = cloneDeep(this.game.entities);\n    this.resetState();\n    for (const entity of Object.keys(entitiesCopy)) {\n      // don't keep entity if it hasn't been updated in 10 minutes\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\n        continue;\n\n      this.updateEntity(entitiesCopy[entity].name, {\n        name: entitiesCopy[entity].name,\n        class: entitiesCopy[entity].class,\n        isPlayer: entitiesCopy[entity].isPlayer,\n        gearScore: entitiesCopy[entity].gearScore,\n        maxHp: entitiesCopy[entity].maxHp,\n        currentHp: entitiesCopy[entity].currentHp\n      });\n    }\n  }\n  cancelReset() {\n    if (this.resetTimer) clearTimeout(this.resetTimer);\n    this.resetTimer = null;\n  }\n  splitEncounter() {\n    const curState = cloneDeep(this.game);\n    if (\n      curState.fightStartedOn != 0 && // no combat packets\n      (curState.damageStatistics.totalDamageDealt != 0 ||\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\n    )\n      this.encounters.push(curState);\n    this.resetState();\n  }\n\n  broadcastStateChange() {\n    this.eventEmitter.emit(\"state-change\", this.game);\n  }\n\n  parseLogLine(line: string) {\n    if (!line) return;\n\n    const lineSplit = line.trim().split(\"|\");\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\n\n    const logType = tryParseInt(lineSplit[0]);\n\n    try {\n      switch (logType) {\n        case 0:\n          this.onMessage(lineSplit);\n          break;\n        case 1:\n          this.onInitEnv(/* lineSplit */);\n          break;\n        case 2:\n          this.onPhaseTransition(lineSplit);\n          break;\n        case 3:\n          this.onNewPc(lineSplit);\n          break;\n        case 4:\n          this.onNewNpc(lineSplit);\n          break;\n        case 5:\n          this.onDeath(lineSplit);\n          break;\n        case 6:\n          this.onSkillStart(lineSplit);\n          break;\n        case 7:\n          this.onSkillStage(lineSplit);\n          break;\n        case 8:\n          this.onDamage(lineSplit);\n          break;\n        case 9:\n          this.onHeal(lineSplit);\n          break;\n        case 10:\n          this.onBuff(lineSplit);\n          break;\n        case 12:\n          this.onCounterattack(lineSplit);\n          break;\n      }\n    } catch (e) {\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\n    }\n  }\n\n  updateEntity(entityName: string, values) {\n    const updateTime = { lastUpdate: +new Date() };\n    if (!(entityName in this.game.entities)) {\n      this.game.entities[entityName] = {\n        ...createEntity(),\n        ...values,\n        ...updateTime\n      };\n    } else {\n      this.game.entities[entityName] = {\n        ...this.game.entities[entityName],\n        ...values,\n        ...updateTime\n      };\n    }\n  }\n\n  // logId = 0\n  onMessage(lineSplit: string[]) {\n    const logLine = new LogLines.LogMessage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onMessage: ${logLine.message}`\n      });\n    }\n\n    if (!logLine.message.startsWith(\"Arguments:\")) {\n      this.eventEmitter.emit(\"message\", logLine.message);\n    }\n  }\n\n  // logId = 1\n  onInitEnv(/* lineSplit: string[] */) {\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onInitEnv`\n      });\n    }\n\n    if (this.isLive) {\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\n        if (this.debugLines) {\n          this.eventEmitter.emit(\"log\", {\n            type: \"debug\",\n            message: `Setting a reset timer`\n          });\n        }\n\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\n        this.eventEmitter.emit(\"message\", \"new-zone\");\n      }\n    } else {\n      this.splitEncounter();\n      this.eventEmitter.emit(\"message\", \"new-zone\");\n    }\n  }\n\n  // logId = 2\n  onPhaseTransition(lineSplit: string[]) {\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onPhaseTransition: ${logLine.phaseCode}`\n      });\n    }\n\n    if (this.isLive) {\n      this.eventEmitter.emit(\n        \"message\",\n        `phase-transition-${logLine.phaseCode}`\n      );\n\n      if (this.resetAfterPhaseTransition) {\n        this.phaseTransitionResetRequest = true;\n        this.phaseTransitionResetRequestTime = +new Date();\n      }\n    }\n\n    if (!this.isLive && this.splitOnPhaseTransition) {\n      this.splitEncounter();\n    }\n  }\n\n  // logId = 3\n  onNewPc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewPc(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      class: logLine.class,\n      isPlayer: true,\n      ...(logLine.gearScore &&\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 4\n  onNewNpc(lineSplit: string[]) {\n    const logLine = new LogLines.LogNewNpc(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isPlayer: false,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n  }\n\n  // logId = 5\n  onDeath(lineSplit: string[]) {\n    const logLine = new LogLines.LogDeath(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: true,\n      deathTime: logLine.timestamp.getTime()\n    });\n  }\n\n  // logId = 6\n  onSkillStart(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStart(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\n      });\n    }\n\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\n      this.healSources.push({\n        source: logLine.name,\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name,\n      isDead: false\n    });\n  }\n\n  // logId = 7\n  onSkillStage(lineSplit: string[]) {\n    const logLine = new LogLines.LogSkillStage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\n      });\n    }\n  }\n\n  // logId = 8\n  onDamage(lineSplit: string[]) {\n    if (lineSplit.length < 13) return;\n    const logLine = new LogLines.LogDamage(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\n      });\n    }\n\n    if (\n      this.phaseTransitionResetRequest &&\n      this.phaseTransitionResetRequestTime > 0 &&\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\n    ) {\n      this.softReset();\n      this.phaseTransitionResetRequest = false;\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    this.updateEntity(logLine.targetName, {\n      name: logLine.targetName,\n      currentHp: logLine.currentHp,\n      maxHp: logLine.maxHp\n    });\n\n    const damageOwner = this.game.entities[logLine.name];\n    const damageTarget = this.game.entities[logLine.targetName];\n\n    if (\n      !damageTarget.isPlayer &&\n      this.removeOverkillDamage &&\n      logLine.currentHp < 0\n    ) {\n      logLine.damage = logLine.damage + logLine.currentHp;\n    }\n\n    if (logLine.skillId === 0 && logLine.skillEffectId !== 0) {\n        logLine.skillId = logLine.skillEffectId;\n        logLine.skillName = logLine.skillEffect;\n    }\n\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\n        ...createEntitySkill(),\n        ...{ id: logLine.skillId, name: logLine.skillName }\n      };\n    }\n\n    // TODO: Not sure if this is fixed in the logger\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\n\n    // Remove 'sync' bleeds on G1 Valtan\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\n\n    const isCrit =\n      (logLine.damageModifier &\n        (HitFlag.HIT_FLAG_CRITICAL | HitFlag.HIT_FLAG_DOT_CRITICAL)) >\n      0;\n    const isBackAttack =\n      (logLine.damageModifier & HitFlag.HIT_OPTION_BACK_ATTACK) > 0;\n    const isFrontAttack =\n      (logLine.damageModifier & HitFlag.HIT_OPTION_FRONTAL_ATTACK) > 0;\n\n    const critCount = isCrit ? 1 : 0;\n    const backAttackCount = isBackAttack ? 1 : 0;\n    const frontAttackCount = isFrontAttack ? 1 : 0;\n\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\n      logLine.damage;\n    if (\n      logLine.damage >\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\n    )\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\n        logLine.damage;\n\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\n\n    if (logLine.skillName !== \"Bleed\") {\n      this.game.entities[logLine.name].hits.total += 1;\n      this.game.entities[logLine.name].hits.crit += critCount;\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\n\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.total += 1;\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\n        critCount;\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.backAttack += backAttackCount;\n      this.game.entities[logLine.name].skills[\n        logLine.skillName\n      ].hits.frontAttack += frontAttackCount;\n    }\n\n    if (damageOwner.isPlayer) {\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\n      this.game.damageStatistics.topDamageDealt = Math.max(\n        this.game.damageStatistics.topDamageDealt,\n        damageOwner.damageDealt\n      );\n    }\n\n    if (damageTarget.isPlayer) {\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\n      this.game.damageStatistics.topDamageTaken = Math.max(\n        this.game.damageStatistics.topDamageTaken,\n        damageTarget.damageTaken\n      );\n    }\n\n    if (this.game.fightStartedOn === 0)\n      this.game.fightStartedOn = +logLine.timestamp;\n    this.game.lastCombatPacket = +logLine.timestamp;\n  }\n\n  // logId = 9\n  onHeal(lineSplit: string[]) {\n    const logLine = new LogLines.LogHeal(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\n      });\n    }\n\n    let sourceName = \"\";\n    for (const source of this.healSources) {\n      if (source.expires >= +logLine.timestamp) {\n        sourceName = source.source;\n        break;\n      }\n    }\n    if (!sourceName) return;\n\n    this.updateEntity(sourceName, {\n      name: sourceName\n    });\n\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\n\n    if (this.game.entities[sourceName].isPlayer) {\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\n      this.game.damageStatistics.topHealingDone = Math.max(\n        this.game.damageStatistics.topHealingDone,\n        this.game.entities[sourceName].healingDone\n      );\n    }\n  }\n\n  // logId = 10\n  onBuff(lineSplit: string[]) {\n    const logLine = new LogLines.LogBuff(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\n      });\n    }\n\n    if (logLine.shieldAmount && logLine.isNew) {\n      this.updateEntity(logLine.name, {\n        name: logLine.name\n      });\n\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\n\n      if (this.game.entities[logLine.name].isPlayer) {\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\n        this.game.damageStatistics.topShieldDone = Math.max(\n          this.game.damageStatistics.topShieldDone,\n          this.game.entities[logLine.name].shieldDone\n        );\n      }\n    }\n  }\n\n  // logId = 12\n  onCounterattack(lineSplit: string[]) {\n    const logLine = new LogLines.LogCounterattack(lineSplit);\n\n    if (this.debugLines) {\n      this.eventEmitter.emit(\"log\", {\n        type: \"debug\",\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\n      });\n    }\n\n    this.updateEntity(logLine.name, {\n      name: logLine.name\n    });\n\n    // TODO: Add skill name from logger\n    this.game.entities[logLine.name].hits.counter += 1;\n  }\n}\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","LogLine","constructor","lineSplit","this","timestamp","Date","super","message","LogPhaseTransition","phaseCode","LogNewPc","id","name","classId","class","gearScore","currentHp","maxHp","LogNewNpc","LogDeath","killerId","killerName","skillId","skillName","LogSkillStage","skillStage","LogDamage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","healAmount","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","HitFlag","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","entitiesCopy","cloneDeep","entity","keys","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","updateTime","logLine","LogLines.LogMessage","startsWith","setTimeout","LogLines","getTime","LogLines.LogSkillStart","Object","includes","source","expires","damageOwner","damageTarget","createEntitySkill","totalDamage","maxDamage","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","backAttackCount","HIT_OPTION_BACK_ATTACK","frontAttackCount","HIT_OPTION_FRONTAL_ATTACK","critCount","Math","max","LogLines.LogBuff"],"mappings":"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"}