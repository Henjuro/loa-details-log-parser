{"version":3,"file":"parser.modern.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10, float = false) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = float ? parseFloat(intString) : parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","import { tryParseInt } from \"./util\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = tryParseInt(lineSplit[7], 0, 10, true);\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  npcId: number;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.currentHp = tryParseInt(lineSplit[12]);\r\n    this.maxHp = tryParseInt(lineSplit[13]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n\r\nexport enum HitOption {\r\n  HIT_OPTION_NONE = -1,\r\n  HIT_OPTION_BACK_ATTACK = 0,\r\n  HIT_OPTION_FRONTAL_ATTACK = 1,\r\n  HIT_OPTION_FLANK_ATTACK = 2,\r\n  HIT_OPTION_MAX = 3,\r\n}\r\n\r\nexport enum HitFlag {\r\n  HIT_FLAG_NORMAL = 0,\r\n  HIT_FLAG_CRITICAL = 1,\r\n  HIT_FLAG_MISS = 2,\r\n  HIT_FLAG_INVINCIBLE = 3,\r\n  HIT_FLAG_DOT = 4,\r\n  HIT_FLAG_IMMUNE = 5,\r\n  HIT_FLAG_IMMUNE_SILENCED = 6,\r\n  HIT_FLAG_FONT_SILENCED = 7,\r\n  HIT_FLAG_DOT_CRITICAL = 8,\r\n  HIT_FLAG_DODGE = 9,\r\n  HIT_FLAG_REFLECT = 10,\r\n  HIT_FLAG_DAMAGE_SHARE = 11,\r\n  HIT_FLAG_DODGE_HIT = 12,\r\n  HIT_FLAG_MAX = 13,\r\n}\r\n","import { cloneDeep } from \"lodash\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines\";\r\nimport { tryParseInt } from \"./util\";\r\nimport { healingSkills, HitFlag, HitOption } from \"./constants\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  npcId: number;\r\n  name: string;\r\n  class: string;\r\n  classId: number;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deaths: number;\r\n  deathTime: number;\r\n  gearScore: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\n\r\ninterface Breakdown {\r\n  timestamp: number;\r\n  damage: number;\r\n  targetEntity: string;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n}\r\n\r\ninterface EntitySkills {\r\n  id: number;\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n  breakdown: Breakdown[];\r\n}\r\n\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    id: 0,\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      casts: 0,\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    },\r\n    breakdown: []\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  casts: number;\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    npcId: 0,\r\n    name: \"\",\r\n    class: \"\",\r\n    classId: 0,\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deaths: 0,\r\n    deathTime: 0,\r\n    gearScore: 0,\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      casts: 0,\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser extends EventEmitter {\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    super();\r\n\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const clone = cloneDeep(this.game);\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n    this.emit(\"reset-state\", clone);\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        classId: entitiesCopy[entity].classId,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    const clone: Game = cloneDeep(this.game);\r\n    // Dont send breakdowns; will hang up UI\r\n    Object.values(clone.entities).forEach(entity => {\r\n      Object.values(entity.skills).forEach(skill => {\r\n        skill.breakdown = [];\r\n      })\r\n    })\r\n\r\n    this.emit(\"state-change\", clone);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 12:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      id: logLine.id,\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      classId: logLine.classId,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != 0 && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      id: logLine.id,\r\n      name: logLine.name,\r\n      npcId: logLine.npcId,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    const entity = this.game.entities[logLine.name];\r\n\r\n    let deaths = 0;\r\n    if (!entity) deaths = 1;\r\n    else if (entity.isDead) deaths = entity.deaths;\r\n    else deaths = entity.deaths + 1;\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: +logLine.timestamp,\r\n      deaths,\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n\r\n    const entity = this.game.entities[logLine.name];\r\n    if (entity) {\r\n      entity.hits.casts += 1;\r\n\r\n      if (!(logLine.skillName in entity.skills)) {\r\n        entity.skills[logLine.skillName] = {\r\n          ...createEntitySkill(),\r\n          ...{ id: logLine.skillId, name: logLine.skillName }\r\n        };\r\n        entity.skills[logLine.skillName].hits.casts += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 13) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      id: logLine.id,\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      id: logLine.targetId,\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (logLine.skillId === 0 && logLine.skillEffectId !== 0) {\r\n        logLine.skillId = logLine.skillEffectId;\r\n        logLine.skillName = logLine.skillEffect;\r\n    }\r\n\r\n    if (!(logLine.skillName in damageOwner.skills)) {\r\n      damageOwner.skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ id: logLine.skillId, name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    const hitFlag: HitFlag = logLine.damageModifier & 0xf;\r\n    const hitOption: HitOption = ((logLine.damageModifier >> 4) & 0x7) - 1;\r\n\r\n    // TODO: Keeping for now; Not sure if referring to damage share on Valtan G1 or something else\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && hitFlag === HitFlag.HIT_FLAG_DAMAGE_SHARE) return;\r\n\r\n    const isCrit =\r\n      hitFlag === HitFlag.HIT_FLAG_CRITICAL ||\r\n      hitFlag === HitFlag.HIT_FLAG_DOT_CRITICAL;\r\n    const isBackAttack = hitOption === HitOption.HIT_OPTION_BACK_ATTACK;\r\n    const isFrontAttack = hitOption === HitOption.HIT_OPTION_FRONTAL_ATTACK;\r\n\r\n    const critCount = isCrit ? 1 : 0;\r\n    const backAttackCount = isBackAttack ? 1 : 0;\r\n    const frontAttackCount = isFrontAttack ? 1 : 0;\r\n\r\n    damageOwner.skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      damageOwner.skills[logLine.skillName].maxDamage\r\n    )\r\n      damageOwner.skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    damageOwner.damageDealt += logLine.damage;\r\n    damageTarget.damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      damageOwner.hits.total += 1;\r\n      damageOwner.hits.crit += critCount;\r\n      damageOwner.hits.backAttack += backAttackCount;\r\n      damageOwner.hits.frontAttack += frontAttackCount;\r\n\r\n      damageOwner.skills[logLine.skillName].hits.total += 1;\r\n      damageOwner.skills[logLine.skillName].hits.crit += critCount;\r\n      damageOwner.skills[logLine.skillName].hits.backAttack += backAttackCount;\r\n      damageOwner.skills[logLine.skillName].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n\r\n      const breakdown: Breakdown = {\r\n        timestamp: +logLine.timestamp,\r\n        damage: logLine.damage,\r\n        targetEntity: damageTarget.id,\r\n        isCrit,\r\n        isBackAttack,\r\n        isFrontAttack,\r\n      }\r\n\r\n      damageOwner.skills[logLine.skillName].breakdown.push(breakdown);\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 12\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","float","isNaN","intNum","parseFloat","parseInt","_unused","LogLine","constructor","lineSplit","this","timestamp","Date","super","message","LogPhaseTransition","phaseCode","LogNewPc","id","name","classId","class","gearScore","currentHp","maxHp","LogNewNpc","npcId","LogDeath","killerId","killerName","LogSkillStart","skillId","skillName","skillStage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","healAmount","LogBuff","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","HitOption","HitFlag","LogParser","EventEmitter","isLive","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","bind","emit","type","clone","cloneDeep","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","Object","keys","entitiesCopy","entity","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","values","forEach","skills","skill","breakdown","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","updateTime","_extends","isDead","deaths","deathTime","damageDealt","healingDone","shieldDone","damageTaken","hits","casts","total","crit","backAttack","frontAttack","counter","logLine","startsWith","setTimeout","LogLines","LogLines.LogNewPc","LogLines.LogDeath","LogLines.LogSkillStart","includes","source","expires","createEntitySkill","totalDamage","maxDamage","damageOwner","damageTarget","hitFlag","HIT_FLAG_DAMAGE_SHARE","isCrit","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","isBackAttack","hitOption","HIT_OPTION_BACK_ATTACK","isFrontAttack","HIT_OPTION_FRONTAL_ATTACK","critCount","backAttackCount","frontAttackCount","Math","max","targetEntity"],"mappings":"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"}