{"version":3,"file":"file-parser-worker.module.js","sources":["../src/util.ts","../src/constants.ts","../src/log-lines.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n\r\nexport enum HitFlag {\r\n  HIT_FLAG_NORMAL = 0,\r\n  HIT_FLAG_CRITICAL = 1,\r\n  HIT_FLAG_MISS = 2,\r\n  HIT_FLAG_INVINCIBLE = 3,\r\n  HIT_FLAG_DOT = 4,\r\n  HIT_FLAG_IMMUNE = 5,\r\n  HIT_FLAG_IMMUNE_SILENCED = 6,\r\n  HIT_FLAG_FONT_SILENCED = 7,\r\n  HIT_FLAG_DOT_CRITICAL = 8,\r\n  HIT_FLAG_DODGE = 9,\r\n  HIT_FLAG_REFLECT = 10,\r\n  HIT_FLAG_DAMAGE_SHARE = 11,\r\n  HIT_FLAG_DODGE_HIT = 12,\r\n  HIT_FLAG_MAX = 13,\r\n  HIT_OPTION_BACK_ATTACK = 1 << (0 + 4),\r\n  HIT_OPTION_FRONTAL_ATTACK = 1 << (1 + 4),\r\n  HIT_OPTION_FLANK_ATTACK = 1 << (2 + 4)\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.currentHp = tryParseInt(lineSplit[12]);\r\n    this.maxHp = tryParseInt(lineSplit[13]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills, HitFlag } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 13) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\r\n\r\n    const isCrit =\r\n      (logLine.damageModifier &\r\n        (HitFlag.HIT_FLAG_CRITICAL | HitFlag.HIT_FLAG_DOT_CRITICAL)) >\r\n      0;\r\n    const isBackAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_BACK_ATTACK) > 0;\r\n    const isFrontAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_FRONTAL_ATTACK) > 0;\r\n\r\n    const critCount = isCrit ? 1 : 0;\r\n    const backAttackCount = isBackAttack ? 1 : 0;\r\n    const frontAttackCount = isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { LogParser } from \"./parser.js\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat.js\";\r\ndayjs.extend(customParseFormat);\r\n\r\nexport default function fileParserWorker(\r\n  filename: string,\r\n  splitOnPhaseTransition: boolean,\r\n  mainFolder: string,\r\n  parsedLogFolder: string,\r\n  callback: CallableFunction\r\n) {\r\n  try {\r\n    const filenameSlice = filename.slice(0, -4);\r\n    const jsonName = filenameSlice + \".json\";\r\n\r\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\r\n    if (!contents) return callback(null, \"empty log\");\r\n\r\n    const logParser = new LogParser(false);\r\n    if (splitOnPhaseTransition === true)\r\n      logParser.splitOnPhaseTransition = true;\r\n\r\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\r\n    for (const line of lines) {\r\n      logParser.parseLogLine(line);\r\n    }\r\n    logParser.splitEncounter();\r\n\r\n    const encounters = logParser.encounters;\r\n\r\n    if (encounters.length > 0) {\r\n      const masterLog = { encounters: [] };\r\n\r\n      for (const encounter of encounters) {\r\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\r\n\r\n        if (duration <= 1000) continue;\r\n\r\n        let mostDamageTakenEntity = {\r\n          name: \"\",\r\n          damageTaken: 0,\r\n          isPlayer: false\r\n        };\r\n\r\n        for (const i of Object.values(encounter.entities)) {\r\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\r\n            mostDamageTakenEntity = {\r\n              name: i.name,\r\n              damageTaken: i.damageTaken,\r\n              isPlayer: i.isPlayer\r\n            };\r\n          }\r\n        }\r\n\r\n        const encounterDetails = {\r\n          duration,\r\n          mostDamageTakenEntity\r\n        };\r\n\r\n        const encounterId = uuidv4();\r\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\r\n        masterLog.encounters.push({\r\n          encounterId,\r\n          encounterFile,\r\n          ...encounterDetails\r\n        });\r\n\r\n        fs.writeFileSync(\r\n          path.join(parsedLogFolder, encounterFile),\r\n          JSON.stringify({\r\n            ...encounter,\r\n            ...encounterDetails\r\n          })\r\n        );\r\n      }\r\n\r\n      fs.writeFileSync(\r\n        path.join(parsedLogFolder, jsonName),\r\n        JSON.stringify(masterLog)\r\n      );\r\n\r\n      return callback(null, \"log parsed\");\r\n    }\r\n\r\n    return callback(null, \"no encounters found\");\r\n  } catch (e) {\r\n    return callback(e, \"log parser error\");\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","HitFlag","lineSplit","this","timestamp","Date","LogMessage","_this","_LogLine","call","message","LogLine","_LogLine3","LogPhaseTransition","_this3","phaseCode","_inheritsLoose","_LogLine4","LogNewPc","_this4","id","name","classId","gearScore","currentHp","maxHp","LogNewNpc","_LogLine5","_this5","LogDeath","_LogLine6","_this6","killerId","killerName","LogSkillStart","_this7","_LogLine7","skillId","skillName","LogSkillStage","_LogLine8","_this8","skillStage","_LogLine9","LogDamage","_this9","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","_this10","_LogLine10","healAmount","LogBuff","_LogLine11","_this11","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","_this12","_LogLine12","healingSkills","duration","Demonize","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","_proto","softReset","entitiesCopy","cloneDeep","_i","_Object$keys","Object","keys","length","entity","lastUpdate","updateEntity","class","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","logLine","LogLines","startsWith","setTimeout","LogLines.LogDeath","getTime","LogLines.LogSkillStart","includes","source","expires","LogLines.LogDamage","damageOwner","damageTarget","totalDamage","maxDamage","critCount","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","backAttackCount","HIT_OPTION_BACK_ATTACK","frontAttackCount","HIT_OPTION_FRONTAL_ATTACK","Math","max","LogLines.LogHeal","_step","_iterator","_createForOfIteratorHelperLoose","done","value","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","filenameSlice","slice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","_step2","_iterator2","encounter","mostDamageTakenEntity","_Object$values","i","encounterDetails","encounterId","uuidv4","encounterFile","masterLog","writeFileSync","JSON","stringify","jsonName","dayjs","extend","customParseFormat"],"mappings":"06CAAgBA,SAAAA,EAAYC,EAAmBC,EAAkBC,GAC/D,QADyE,IAA5BD,IAAAA,EAAe,QAAGC,IAAAA,IAAAA,EAAQ,IAC9C,iBAArBF,EACF,OAAIG,MAAMH,GAAYC,EACfD,EAGT,MAEA,IACEI,EAASC,SAASL,EAAWE,GACzBC,MAAMC,KAASA,EAASH,GAC5B,MAAAK,GACAF,EAASH,EAGX,OACDG,MCKWG,ICfV,SAAYC,QAHZA,eAG+B,EAAAC,KAF/BC,eAGE,EAAAD,KAAKD,UAAYA,EACjBC,KAAKC,UAAY,IAAAC,KAASF,KAAKD,UAAU,KAKhCI,2BAGX,SAAYJ,EAAAA,GACV,IAAAK,EAD6B,OAC7BA,EAAAC,EAAAC,KAAAN,KAAMD,IADuBC,MAF/BO,aAE+B,EAG7BH,EAAKG,QAAUH,EAAKL,UAAU,GAC/BK,EAPH,cAAgCI,GAAAA,kBAyB9B,SAAAC,GAAA,SAAAC,EAAYX,GAAmB,IAAAY,EAAA,OAC7BA,cAAMZ,IAANC,MAHFY,eAKE,EAAAD,EAAKC,UAAYtB,EAAYS,EAAU,IAHVY,EAHjC,OAGEE,EAAAH,EAAAD,GAHFC,EAGE,CAHsCF,kBAoBtC,SAAAM,GAAA,SAAAC,EAAYhB,GAAmB,IAAAiB,EAAA,OAC7BA,EAAMjB,EAAAA,KAAAA,KAAAA,IADuBC,MAR/BiB,QACAC,EAAAA,EAAAA,cACAC,aAM+B,EAAAH,EAAA,WAAA,EAAAA,EAJ/BI,eACAC,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,WAKE,EAAAN,EAAKC,GAAKlB,EAAU,GACpBiB,EAAKE,KAAOnB,EAAU,IAAM,iBAC5BiB,EAAKG,QAAU7B,EAAYS,EAAU,IACrCiB,EAAA,MAAajB,EAAU,IAAM,eAE7BiB,EAAKI,UAAYrB,EAAU,GAC3BiB,EAAKK,UAAY/B,EAAYS,EAAU,IACvCiB,EAAKM,MAAQhC,EAAYS,EAAU,IACpCiB,EApBH,OASEH,EAAAE,EAAAD,KAAA,CAT4BN,GAwB9Be,eAAA,SAAAC,GAME,WAAYzB,SAAmB,OAC7B0B,EAAM1B,EAAAA,KAAAA,KAAAA,UANRkB,YACAC,UAI+B,EAAAO,EAH/BJ,eAG+B,EAAAI,EAF/BH,WAE+B,EAG7BG,EAAKR,GAAKlB,EAAU,GAEpB0B,EAAKP,KAAOnB,EAAU,IAAM,iBAC5B0B,EAAKJ,UAAY/B,EAAYS,EAAU,IACvC0B,EAAKH,MAAQhC,EAAYS,EAAU,IACpC0B,EAdH,OAAAZ,EAAAU,EAAAC,KAAA,CAA+BhB,GAkB/BkB,eAAA,SAAAC,GAME,SAAY5B,EAAAA,GAAmB,IAAA6B,EAAA,OAC7BA,cAAM7B,IAANC,MANFiB,QAK+B,EAAAW,EAJ/BV,UACAW,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,gBAKE,EAAAF,EAAKX,GAAKlB,EAAU,GACpB6B,EAAKV,KAAOnB,EAAU,IAAM,iBAC5B6B,EAAKC,SAAW9B,EAAU,GAC1B6B,EAAKE,WAAa/B,EAAU,IAAM,iBACnC6B,EAbH,OAAAf,EAAAa,EAAAC,GAA8BnB,EAA9B,CAA8BA,GAiBjBuB,2BAMX,SAAYhC,EAAAA,GACV,IAAAiC,EAD6B,OAC7BA,EAAAC,EAAA3B,KAAAN,KAAMD,IAANC,MANFiB,YACAC,UAI+B,EAAAc,EAH/BE,aACAC,EAAAA,EAAAA,iBAKEH,EAAKf,GAAKlB,EAAU,GACpBiC,EAAKd,KAAOnB,EAAU,IAAM,iBAC5BiC,EAAKE,QAAUnC,EAAU,GACzBiC,EAAKG,UAAYpC,EAAU,IAAM,gBAClCiC,EAbH,iBAAmCxB,GAiBtB4B,eAOX,SAAAC,GAAA,SAAAD,EAAYrC,GAAmB,IAAAuC,EAAA,OAC7BA,cAAMvC,IAANC,MAPFiB,QAM+B,EAAAqB,EAL/BpB,UAK+B,EAAAoB,EAJ/BJ,aAI+B,EAAAI,EAH/BH,eACAI,EAAAA,EAAAA,kBAKED,EAAKrB,GAAKlB,EAAU,GACpBuC,EAAKpB,KAAOnB,EAAU,IAAM,iBAC5BuC,EAAKJ,QAAUnC,EAAU,GACzBuC,EAAKH,UAAYpC,EAAU,IAAM,gBACjCuC,EAAKC,WAAajD,EAAYS,EAAU,MAd5C,OAOEc,EAAAuB,EAAAC,GAPFD,EAOE,CAPiC5B,kBAiCjC,SAAAgC,GAAA,SAAAC,EAAY1C,GACV,IAAA2C,EAD6B,OAC7BA,EAAAF,EAAAlC,KAAAN,KAAMD,IADuBC,MAb/BiB,QACAC,EAAAA,EAAAA,cACAgB,aAW+B,EAAAQ,EAV/BP,eAU+B,EAAAO,EAT/BC,mBAS+B,EAAAD,EAR/BE,iBACAC,EAAAA,EAAAA,kBACAC,gBAM+B,EAAAJ,EAL/BK,YACAC,EAAAA,EAAAA,oBACA3B,EAAAA,EAAAA,eACAC,EAAAA,EAAAA,aAKEoB,EAAKzB,GAAKlB,EAAU,GACpB2C,EAAKxB,KAAOnB,EAAU,IAAM,iBAC5B2C,EAAKR,QAAU5C,EAAYS,EAAU,IACrC2C,EAAKP,UAAYpC,EAAU,IAAM,gBACjC2C,EAAKC,cAAgBrD,EAAYS,EAAU,IAC3C2C,EAAKE,YAAc7C,EAAU,GAC7B2C,EAAKG,SAAW9C,EAAU,GAC1B2C,EAAKI,WAAa/C,EAAU,IAAM,iBAClC2C,EAAKK,OAASzD,EAAYS,EAAU,KACpC2C,EAAKM,eAAiB1D,EAAYS,EAAU,IAAK,EAAG,IACpD2C,EAAKrB,UAAY/B,EAAYS,EAAU,KACvC2C,EAAKpB,MAAQhC,EAAYS,EAAU,KAdN2C,EAdjC,OAcE7B,EAAA4B,EAAAD,GAd6BhC,EAc7B,CAd6BA,GAiClByC,2BAKX,SAAYlD,EAAAA,GACV,IAAAmD,EAD6B,OAC7BA,EAAAC,EAAA7C,KAAAN,KAAMD,IAANC,MALFiB,YACAC,UAG+B,EAAAgC,EAF/BE,gBAKE,EAAAF,EAAKjC,GAAKlB,EAAU,GACpBmD,EAAKhC,KAAOnB,EAAU,IAAM,iBAC5BmD,EAAKE,WAAa9D,EAAYS,EAAU,IALXmD,EALjC,cAAAD,GAA6BzC,GAgB7B6C,eAAA,SAAAC,GAUE,WAAYvD,SAAmB,OAC7BwD,EAAMxD,EAAAA,KAAAA,KAAAA,IADuBC,MAT/BiB,QAS+B,EAAAsC,EAR/BrC,UACAsC,EAAAA,EAAAA,gBACAC,cAM+B,EAAAF,EAL/BG,WACAC,EAAAA,EAAAA,cACAC,EAAAA,EAAAA,gBACAC,EAAAA,EAAAA,oBAKEN,EAAKtC,GAAKlB,EAAU,GACpBwD,EAAKrC,KAAOnB,EAAU,IAAM,iBAC5BwD,EAAKC,OAASzD,EAAU,GACxBwD,EAAKE,SAAW1D,EAAU,GAC1BwD,EAAKG,MAAwB,KAAhB3D,EAAU,GACvBwD,EAAKI,SAAW5D,EAAU,GAC1BwD,EAAKK,WAAa7D,EAAU,IAAM,iBAClCwD,EAAKM,aAAevE,EAAYS,EAAU,IAC3CwD,EArBH,OAAA1C,EAAAwC,EAAAC,GAA6B9C,EAA7B,CAA6BA,GAyBhBsD,2BAIX,SAAY/D,EAAAA,GACV,IAAAgE,EAD6B,OAC7BA,EAAAC,EAAA1D,KAAAN,KAAMD,IAANC,MAJFiB,YACAC,UAE+B,EAG7B6C,EAAK9C,GAAKlB,EAAU,GACpBgE,EAAK7C,KAAOnB,EAAU,IAAM,iBAJCgE,EAJjC,cAAAD,GAAsCtD,GDjNzByD,EAA+B,CAC1C,wBAAyB,CACvBC,SAAU,GAEZ,YAAa,CACXA,SAAU,MAEZ,kBAAmB,CACjBA,SAAU,KAEZC,SAAU,CACRD,SAAU,QAId,SAAYpE,GACVA,EAAAA,EAAA,gBAAA,GAAA,kBACAA,EAAAA,EAAA,kBAAA,GAAA,oBACAA,EAAAA,EAAA,cAAA,GAAA,gBACAA,EAAAA,EAAA,oBAAA,GAAA,sBACAA,EAAAA,EAAA,aAAA,GAAA,eACAA,EAAAA,EAAA,gBAAA,GAAA,kBACAA,EAAAA,EAAA,yBAAA,GAAA,2BACAA,EAAAA,EAAA,uBAAA,GAAA,yBACAA,EAAAA,EAAA,sBAAA,GAAA,wBACAA,EAAAA,EAAA,eAAA,GAAA,iBACAA,EAAAA,EAAA,iBAAA,IAAA,mBACAA,EAAAA,EAAA,sBAAA,IAAA,wBACAA,EAAAA,EAAA,mBAAA,IAAA,qBACAA,EAAAA,EAAA,aAAA,IAAA,eACAA,EAAAA,EAAA,uBAAA,IAAA,yBACAA,EAAAA,EAAA,0BAAA,IAAA,4BACAA,EAAAA,EAAA,wBAAA,IAAA,0BAjBF,CAAYA,IAAAA,EAkBX,KEgED,IAAAsE,eAAA,WAkBE,WAAYC,YAAAA,IAAAA,GAAS,GAjBrBC,KAAAA,yBACAC,gBAgB0B,EAAAvE,KAd1BwE,gBAc0B,EAAAxE,KAb1BqE,YACAI,EAAAA,KAAAA,2BACAC,EAAAA,KAAAA,sCACAC,4BAU0B,EAAA3E,KAT1B4E,0BAS0B,EAAA5E,KAP1B6E,iCACAC,EAAAA,KAAAA,4CAEAC,UAI0B,EAAA/E,KAH1BgF,gBACAC,EAAAA,KAAAA,iBAGE,EAAAjF,KAAKsE,aAAe,IAApBY,EACAlF,KAAKuE,WAAa,KAElBvE,KAAKwE,YAAa,EAClBxE,KAAKqE,OAASA,EACdrE,KAAKyE,uBAAwB,EAC7BzE,KAAK0E,2BAA4B,EACjC1E,KAAK2E,wBAAyB,EAC9B3E,KAAK4E,sBAAuB,EAE5B5E,KAAK6E,6BAA8B,EACnC7E,KAAK8E,gCAAkC,EAEvC9E,KAAKmF,aACLnF,KAAKgF,WAAa,GAEdhF,KAAKqE,QACPe,YAAYpF,KAAKqF,qBAAqBC,KAAKtF,MAAO,KApCxD,IAwCEmF,EAAAA,EAAAA,UAxCF,OAwCEA,EAAAA,WAAA,WACMnF,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAAS,oBAGb,IAAMkF,GAAW,IAAjBvF,KAEAF,KAAK+E,KAAO,CACVW,UAAWD,EACXE,iBAAkBF,EAClBG,eAAgB,EAChBC,SAAU,GACVC,iBAAkB,CAChBC,iBAAkB,EAClBC,eAAgB,EAChBC,iBAAkB,EAClBC,eAAgB,EAChBC,iBAAkB,EAClBC,eAAgB,EAChBC,gBAAiB,EACjBC,cAAe,IAInBtG,KAAKiF,YAAc,GAEnBjF,KAAKsE,aAAaiB,KAAK,gBApE3BgB,EAsEEC,UAAA,WACExG,KAAKuE,WAAa,KAClB,IAAMkC,EAAeC,EAAU1G,KAAK+E,KAAKc,UACzC7F,KAAKmF,aACL,IAAA,IAAAwB,EAAA,EAAAC,EAAqBC,OAAOC,KAAKL,GAAeE,EAAAC,EAAAG,OAAAJ,IAAA,CAA3C,IAAMK,QAEJ,SAAaP,EAAaO,GAAQC,WAAa,KAGpDjH,KAAKkH,aAAaT,EAAaO,GAAQ9F,KAAM,CAC3CA,KAAMuF,EAAaO,GAAQ9F,KAC3BiG,MAAOV,EAAaO,GAFuB,MAG3CI,SAAUX,EAAaO,GAAQI,SAC/BhG,UAAWqF,EAAaO,GAAQ5F,UAChCE,MAAOmF,EAAaO,GAAQ1F,MAC5BD,UAAWoF,EAAaO,GAAQ3F,cArFxCkF,EAyFEc,YAAA,WACMrH,KAAKuE,YAAY+C,aAAatH,KAAKuE,YACvCvE,KAAKuE,WAAa,MAEpBgD,EAAAA,eAAA,WACE,IAAMC,EAAWd,EAAU1G,KAAK+E,MAEH,GAA3ByC,EAAS5B,gBACsC,GAA9C4B,EAAS1B,iBAAiBC,mBACzByB,EAAS1B,iBAAiBG,kBAE5BjG,KAAKgF,WAAWyC,KAAKD,GACvBxH,KAAKmF,cAGPE,EAAAA,qBAAA,WACErF,KAAKsE,aAAaiB,KAAK,eAAgBvF,KAAK+E,OAG9C2C,EAAAA,aAAA,SAAaC,GACX,GAAKA,EAAL,CAEA,IAAe5H,EAAG4H,EAAKC,OAAOC,MAAM,KACpC,KAAI9H,EAAUgH,OAAS,IAAMhH,EAAU,GAAvC,CAEA,IAAa+H,EAAGxI,EAAYS,EAAU,IAEtC,IACE,OAAQ+H,GACN,KAAA,EACE9H,KAAK+H,UAAUhI,GACf,MACF,KAAA,EACEC,KAAKgI,YACL,MACF,OACEhI,KAAKiI,kBAAkBlI,GACvB,MACF,KAAA,EACEC,KAAKkI,QAAQnI,GACb,MACF,OACEC,KAAKmI,SAASpI,GACd,MACF,KAAA,EACEC,KAAKoI,QAAQrI,GACb,MACF,KAAK,EACHC,KAAKqI,aAAatI,GAClB,MACF,OACEC,KAAKsI,aAAavI,GAClB,MACF,KAAK,EACHC,KAAKuI,SAASxI,GACd,MACF,OACEC,KAAKwI,OAAOzI,GACZ,MACF,KAAA,GACEC,KAAKyI,OAAO1I,GACZ,MACF,QACEC,KAAK0I,gBAAgB3I,IAGzB,MAAO4I,GACP3I,KAAKsE,aAAaiB,KAAK,MAAO,CAAEC,KAAM,QAASjF,QAASoI,QAI5DzB,EAAAA,aAAA,SAAa0B,EAAoBC,GAC/B,IAAgBC,EAAG,CAAE7B,YAAa,IAAI/G,MAQpCF,KAAK+E,KAAKc,SAAS+C,QAPfA,KAAc5I,KAAK+E,KAAKc,SAQvB7F,KAAK+E,KAAKc,SAAS+C,GArMF,CACxB3B,WAAY,EACZhG,GAAI,GACJC,KAAM,GACNiG,MAAO,GACPC,UAAU,EACV2B,QAAQ,EACRC,UAAW,EACX5H,UAAW,GACXC,UAAW,EACXC,MAAO,EACP2H,YAAa,EACbC,YAAa,EACbC,WAAY,EACZC,YAAa,EACbC,OAAQ,GACRC,KAAM,CACJC,MAAO,EACPC,KAAM,EACNC,WAAY,EACZC,YAAa,EACbC,QAAS,IAiLJd,EACAC,IA5KXvC,EAkLEwB,UAAA,SAAUhI,GACR,IAAM6J,EAAU,IAAIC,EAAoB9J,GAEpCC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAAuBqJ,cAAAA,EAAQrJ,UAI9BqJ,EAAQrJ,QAAQuJ,WAAW,eAC9B9J,KAAKsE,aAAaiB,KAAK,UAAWqE,EAAQrJ,UA7LhDgG,EAkMEyB,UAAA,WAGMhI,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAF4B,cAM5BP,KAAKqE,QAC4B,IAA/BrE,KAAKyE,uBAAsD,MAAnBzE,KAAKuE,aAC3CvE,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAF4B,0BAMhCP,KAAKuE,WAAawF,WAAW/J,KAAKwG,UAAUlB,KAAKtF,MAAO,KACxDA,KAAKsE,aAAaiB,KAAK,UAAW,cAGpCvF,KAAKuH,iBACLvH,KAAKsE,aAAaiB,KAAK,UAAW,cA1NxCgB,EA+NE0B,kBAAA,SAAkBlI,GAChB,IAAM6J,EAAU,MAAgC7J,GAE5CC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAAO,sBAAwBqJ,EAAQhJ,YAIvCZ,KAAKqE,SACPrE,KAAKsE,aAAaiB,KAChB,UACoBqE,oBAAAA,EAAQhJ,WAG1BZ,KAAK0E,4BACP1E,KAAK6E,6BAA8B,EACnC7E,KAAK8E,iCAAmC,YAIvC9E,KAAKqE,QAAUrE,KAAK2E,wBACvB3E,KAAKuH,kBAKTW,EAAAA,QAAA,SAAQnI,GACN,IAAM6J,EAAU,IAAIC,EAAkB9J,GAElCC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,oBAAqBqJ,EAAQ3I,GAAtB,KAA6B2I,EAAQ1I,KAAS0I,KAAAA,EAAQzI,QAAtD,KAAkEyI,EAAO,WAAWA,EAAQxI,UAAcwI,KAAAA,EAAQvI,UAAlH,KAAgIuI,EAAQtI,QAInJtB,KAAKkH,aAAa0C,EAAQ1I,QACxBA,KAAM0I,EAAQ1I,KACdiG,MAAOyC,EAFT,MAGExC,UAAU,GACNwC,EAAQxI,WACW,KAArBwI,EAAQxI,WAAoB,CAAEA,UAAWwI,EAAQxI,YACnDC,UAAWuI,EAAQvI,UACnBC,MAAOsI,EAAQtI,UAKnB6G,EAAAA,SAAA,SAASpI,GACP,IAAa6J,EAAG,IAAIC,EAAmB9J,GAEnCC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAAsBqJ,aAAAA,EAAQ3I,GAAvB,KAA8B2I,EAAQ1I,UAAS0I,EAAQvI,UAAvD,KAAqEuI,EAAQtI,QAIxFtB,KAAKkH,aAAa0C,EAAQ1I,KAAM,CAC9BA,KAAM0I,EAAQ1I,KACdkG,UAAU,EACV/F,UAAWuI,EAAQvI,UACnBC,MAAOsI,EAAQtI,SAKnB8G,EAAAA,QAAA,SAAQrI,GACN,IAAa6J,EAAG,IAAYI,EAAUjK,GAElCC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,oBAAqBqJ,EAAQ1I,KAAQ0I,IAAAA,EAAQ9H,aAIjD9B,KAAKkH,aAAa0C,EAAQ1I,KAAM,CAC9BA,KAAM0I,EAAQ1I,KACd6H,QAAQ,EACRC,UAAWY,EAAQ3J,UAAUgK,aAKjC5B,EAAAA,aAAA,SAAatI,GACX,MAAgB,IAAYmK,EAAenK,GAEvCC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAAO,iBAAmBqJ,EAAQ3I,GAAO2I,KAAAA,EAAQ1I,UAAS0I,EAAQ1H,QAAY0H,KAAAA,EAAQzH,YAItF0E,OAAOC,KAAK7C,GAAekG,SAASP,EAAQzH,YAC9CnC,KAAKiF,YAAYwC,KAAK,CACpB2C,OAAQR,EAAQ1I,KAChBmJ,SAAUT,EAAQ3J,UAAYgE,EAAc2F,EAAQzH,WAAW+B,WAInElE,KAAKkH,aAAa0C,EAAQ1I,KAAM,CAC9BA,KAAM0I,EAAQ1I,KACd6H,QAAQ,KAzUdxC,EA8UE+B,aAAA,SAAavI,GACX,MAAgB,MAA2BA,GAEvCC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAA0BqJ,iBAAAA,EAAQ1I,UAAS0I,EAAQ1H,QAA5C,KAAwD0H,EAAQzH,UAAcyH,KAAAA,EAAQrH,gBAMnGgG,SAAA,SAASxI,GACP,KAAIA,EAAUgH,OAAS,IAAvB,CACA,IAAa6C,EAAG,IAAYU,EAAWvK,GAEnCC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAAO,aAAeqJ,EAAQ3I,GAAO2I,KAAAA,EAAQ1I,UAAS0I,EAAQ1H,QAAvD,KAAmE0H,EAAQzH,eAAcyH,EAAQjH,cAAkBiH,KAAAA,EAAQhH,iBAAgBgH,EAAQ/G,SAAnJ,KAAgK+G,EAAQ9G,WAAe8G,KAAAA,EAAQ7G,OAA/L,KAA0M6G,EAAQvI,eAAcuI,EAAQtI,QAKjPtB,KAAK6E,6BACL7E,KAAK8E,gCAAkC,GACvC9E,KAAK8E,iCAAmC,IAAI5E,KAAS,OAErDF,KAAKwG,YACLxG,KAAK6E,6BAA8B,GAGrC7E,KAAKkH,aAAa0C,EAAQ1I,KAAM,CAC9BA,KAAM0I,EAAQ1I,OAGhBlB,KAAKkH,aAAa0C,EAAQ9G,WAAY,CACpC5B,KAAM0I,EAAQ9G,WACdzB,UAAWuI,EAAQvI,UACnBC,MAAOsI,EAAQtI,QAGjB,IAAiBiJ,EAAGvK,KAAK+E,KAAKc,SAAS+D,EAAQ1I,QAC1BlB,KAAK+E,KAAKc,SAAS+D,EAAQ9G,YAkBhD,IAfG0H,EAAapD,UACdpH,KAAK4E,sBACLgF,EAAQvI,UAAY,IAEpBuI,EAAQ7G,OAAS6G,EAAQ7G,OAAS6G,EAAQvI,WAGtCuI,EAAQzH,aAAanC,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMmI,SAC1DrJ,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMmI,OAAOO,EAAQzH,gBAtbf,CACnCjB,KAAM,GACNuJ,YAAa,EACbC,UAAW,EACXpB,KAAM,CACJC,MAAO,EACPC,KAAM,EACNC,WAAY,EACZC,YAAa,EACbC,QAAS,IA+aJ,CAAEzI,KAAM0I,EAAQzH,eAKG,UAAtByH,EAAQzH,WAAyByH,EAAQ7G,OAAS,KAG5B,UAAtB6G,EAAQzH,WAAoD,KAA3ByH,EAAQ5G,gBAA7C,CAEA,IASM2H,GARHf,EAAQ5G,gBACNlD,EAAQ8K,kBAAoB9K,EAAQ+K,wBACvC,EAMyB,EAAI,EACVC,GALlBlB,EAAQ5G,eAAiBlD,EAAQiL,wBAA0B,EAKvB,EAAI,EACrCC,GAJHpB,EAAQ5G,eAAiBlD,EAAQmL,2BAA6B,EAIxB,EAAI,EAE7CjL,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMmI,OAAOO,EAAQzH,WAAWsI,aACzDb,EAAQ7G,OAER6G,EAAQ7G,OACR/C,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMmI,OAAOO,EAAQzH,WAAWuI,YAE3D1K,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMmI,OAAOO,EAAQzH,WAAWuI,UACzDd,EAAQ7G,QAEZ/C,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAM+H,aAAeW,EAAQ7G,OACxD/C,KAAK+E,KAAKc,SAAS+D,EAAQ9G,YAAYsG,aAAeQ,EAAQ7G,OAEpC,UAAtB6G,EAAQzH,YACVnC,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMoI,KAAKC,OAAS,EAC/CvJ,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMoI,KAAKE,MAAQmB,EAC9C3K,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMoI,KAAKG,YAAcqB,EACpD9K,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMoI,KAAKI,aAAesB,EAErDhL,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMmI,OAC/BO,EAAQzH,WACRmH,KAAKC,OAAS,EAChBvJ,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMmI,OAAOO,EAAQzH,WAAWmH,KAAKE,MAC9DmB,EACF3K,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMmI,OAC/BO,EAAQzH,WACRmH,KAAKG,YAAcqB,EACrB9K,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMmI,OAC/BO,EAAQzH,WACRmH,KAAKI,aAAesB,GAGpBT,EAAYnD,WACdpH,KAAK+E,KAAKe,iBAAiBC,kBAAoB6D,EAAQ7G,OACvD/C,KAAK+E,KAAKe,iBAAiBE,eAAiBkF,KAAKC,IAC/CnL,KAAK+E,KAAKe,iBAAiBE,eAC3BuE,EAAYtB,cAIZuB,EAAapD,WACfpH,KAAK+E,KAAKe,iBAAiBG,kBAAoB2D,EAAQ7G,OACvD/C,KAAK+E,KAAKe,iBAAiBI,eAAiBgF,KAAKC,IAC/CnL,KAAK+E,KAAKe,iBAAiBI,eAC3BsE,EAAapB,cAIgB,IAA7BpJ,KAAK+E,KAAKa,iBACZ5F,KAAK+E,KAAKa,gBAAkBgE,EAAQ3J,WACtCD,KAAK+E,KAAKY,kBAAoBiE,EAAQ3J,eAIxCuI,OAAA,SAAOzI,GACL,IAAa6J,EAAG,IAAYwB,EAASrL,GAEjCC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,mBAAoBqJ,EAAQ3I,GAAO2I,KAAAA,EAAQ1I,KAApC,KAA6C0I,EAAQxG,aAKhE,IADA,IACuCiI,EADnCzH,EAAa,GACI0H,EAAAC,EAAAvL,KAAKiF,eAAaoG,EAAAC,KAAAE,MAAA,CAAA,MACrCH,EAAAI,MAAA,GAAIrB,EAAOC,UAAYT,EAAQ3J,UAAW,CACxC2D,EAAawG,EAAOA,OACpB,OAGCxG,IAEL5D,KAAKkH,aAAatD,EAAY,CAC5B1C,KAAM0C,IAGR5D,KAAK+E,KAAKc,SAASjC,GAAYsF,aAAeU,EAAQxG,WAElDpD,KAAK+E,KAAKc,SAASjC,GAAYwD,WACjCpH,KAAK+E,KAAKe,iBAAiBK,kBAAoByD,EAAQxG,WACvDpD,KAAK+E,KAAKe,iBAAiBM,eAAiB8E,KAAKC,IAC/CnL,KAAK+E,KAAKe,iBAAiBM,eAC3BpG,KAAK+E,KAAKc,SAASjC,GAAYsF,kBAMrCT,OAAA,SAAO1I,GACL,IAAM6J,EAAU,MAAqB7J,GAEjCC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAAO,WAAaqJ,EAAQ3I,GAAO2I,KAAAA,EAAQ1I,KAApC,KAA6C0I,EAAQpG,YAAWoG,EAAQnG,SAAxE,KAAqFmG,EAAQjG,SAAaiG,KAAAA,EAAQhG,WAAlH,KAAiIgG,EAAQ/F,eAIhJ+F,EAAQ/F,cAAgB+F,EAAQlG,QAClC1D,KAAKkH,aAAa0C,EAAQ1I,KAAM,CAC9BA,KAAM0I,EAAQ1I,OAGhBlB,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMiI,YAAcS,EAAQ/F,aAEnD7D,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMkG,WACnCpH,KAAK+E,KAAKe,iBAAiBO,iBAAmBuD,EAAQ/F,aACtD7D,KAAK+E,KAAKe,iBAAiBQ,cAAgB4E,KAAKC,IAC9CnL,KAAK+E,KAAKe,iBAAiBQ,cAC3BtG,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMiI,iBAOzCT,gBAAA,SAAgB3I,GACd,MAAgB,MAA8BA,GAE1CC,KAAKwE,YACPxE,KAAKsE,aAAaiB,KAAK,MAAO,CAC5BC,KAAM,QACNjF,QAAO,oBAAsBqJ,EAAQ3I,GAAO2I,KAAAA,EAAQ1I,OAIxDlB,KAAKkH,aAAa0C,EAAQ1I,KAAM,CAC9BA,KAAM0I,EAAQ1I,OAIhBlB,KAAK+E,KAAKc,SAAS+D,EAAQ1I,MAAMoI,KAAKK,SAAW,GAhiBrDvF,EAAA,GC7FwBsH,SAAAA,EACtBC,EACAhH,EACAiH,EACAC,EACAC,GAEA,IACE,IAAMC,EAAgBJ,EAASK,MAAM,GAAI,KACxBD,EAAgB,QAEnBE,EAAGC,EAAGC,aAAaC,EAAKC,KAAKT,EAAYD,GAAW,SAClE,IAAKM,EAAU,OAAOH,EAAS,KAAM,aAErC,IAAeQ,EAAG,IAAAlI,GAAc,IACD,IAA3BO,IACF2H,EAAU3H,wBAAyB,GAGrC,IADA,MACmB4H,EAAAA,EADLN,EAASpE,MAAM,MAAM2E,OAAO,SAAAC,UAAU,MAAJA,GAAiB,IAALA,oBAE1DH,EAAU5E,sBAEZ4E,EAAU/E,iBAEV,IAAMvC,EAAasH,EAAUtH,WAE7B,GAAIA,EAAW+B,OAAS,EAAG,CAGzB,IAFA,IAEA2F,IAFkB,CAAE1H,WAAY,IAEhC2H,EAAApB,EAAwBvG,KAAxB0H,EAAAC,KAAAnB,MAAoC,CAAzBoB,IAAAA,UACH1I,EAAW0I,EAAUjH,iBAAmBiH,EAAUhH,eAExD,KAAI1B,GAAY,KAAhB,CAQA,IANA,IAAyB2I,EAAG,CAC1B3L,KAAM,GACNkI,YAAa,EACbhC,UAAU,GAGZT,EAAA,EAAAmG,EAAgBjG,OAAOgC,OAAO+D,EAAU/G,UAAxCc,EAAAmG,EAAA/F,OAAAJ,IAAmD,CAA9C,IAAOoG,EAAAD,EAAAnG,GACNoG,EAAE3D,YAAcyD,EAAsBzD,cACxCyD,EAAwB,CACtB3L,KAAM6L,EAAE7L,KACRkI,YAAa2D,EAAE3D,YACfhC,SAAU2F,EAAE3F,WAKlB,IAAsB4F,EAAG,CACvB9I,SAAAA,EACA2I,sBAAAA,GAGeI,EAAGC,IACDC,EAAMpB,EAAiBkB,IAAAA,oBAC1CG,EAAUpI,WAAWyC,KACnBwF,EAAAA,CAAAA,YAAAA,EACAE,cAAAA,GACGH,IAGLd,EAAGmB,cACDjB,EAAKC,KAAKR,EAAiBsB,GAC3BG,KAAKC,UACAX,EAAAA,GAAAA,EACAI,MAUT,OALAd,EAAGmB,cACDjB,EAAKC,KAAKR,EAAiB2B,GAC3BF,KAAKC,UAAUH,IAGVtB,EAAS,KAAM,cAGxB,OAAOA,EAAS,KAAM,uBACtB,MAAOnD,GACP,OAAOmD,EAASnD,EAAG,qBApFvB8E,EAAMC,OAAOC"}