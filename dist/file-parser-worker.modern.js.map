{"version":3,"file":"file-parser-worker.modern.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10, float = false) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = float ? parseFloat(intString) : parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","import { tryParseInt } from \"./util\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = tryParseInt(lineSplit[7], 0, 10, true);\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  npcId: number;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.currentHp = tryParseInt(lineSplit[12]);\r\n    this.maxHp = tryParseInt(lineSplit[13]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n\r\nexport enum HitOption {\r\n  HIT_OPTION_NONE = -1,\r\n  HIT_OPTION_BACK_ATTACK = 0,\r\n  HIT_OPTION_FRONTAL_ATTACK = 1,\r\n  HIT_OPTION_FLANK_ATTACK = 2,\r\n  HIT_OPTION_MAX = 3,\r\n}\r\n\r\nexport enum HitFlag {\r\n  HIT_FLAG_NORMAL = 0,\r\n  HIT_FLAG_CRITICAL = 1,\r\n  HIT_FLAG_MISS = 2,\r\n  HIT_FLAG_INVINCIBLE = 3,\r\n  HIT_FLAG_DOT = 4,\r\n  HIT_FLAG_IMMUNE = 5,\r\n  HIT_FLAG_IMMUNE_SILENCED = 6,\r\n  HIT_FLAG_FONT_SILENCED = 7,\r\n  HIT_FLAG_DOT_CRITICAL = 8,\r\n  HIT_FLAG_DODGE = 9,\r\n  HIT_FLAG_REFLECT = 10,\r\n  HIT_FLAG_DAMAGE_SHARE = 11,\r\n  HIT_FLAG_DODGE_HIT = 12,\r\n  HIT_FLAG_MAX = 13,\r\n}\r\n","import { cloneDeep } from \"lodash\";\r\nimport { EventEmitter } from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines\";\r\nimport { tryParseInt } from \"./util\";\r\nimport { healingSkills, HitFlag, HitOption } from \"./constants\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  npcId: number;\r\n  name: string;\r\n  class: string;\r\n  classId: number;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deaths: number;\r\n  deathTime: number;\r\n  gearScore: number;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\n\r\ninterface Breakdown {\r\n  timestamp: number;\r\n  damage: number;\r\n  targetEntity: string;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n}\r\n\r\ninterface EntitySkills {\r\n  id: number;\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n  breakdown: Breakdown[];\r\n}\r\n\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    id: 0,\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      casts: 0,\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    },\r\n    breakdown: []\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  casts: number;\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    npcId: 0,\r\n    name: \"\",\r\n    class: \"\",\r\n    classId: 0,\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deaths: 0,\r\n    deathTime: 0,\r\n    gearScore: 0,\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      casts: 0,\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser extends EventEmitter {\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    super();\r\n\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const clone = cloneDeep(this.game);\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n    this.emit(\"reset-state\", clone);\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        npcId: entitiesCopy[entity].npcId,\r\n        class: entitiesCopy[entity].class,\r\n        classId: entitiesCopy[entity].classId,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    const clone: Game = cloneDeep(this.game);\r\n    // Dont send breakdowns; will hang up UI\r\n    Object.values(clone.entities).forEach(entity => {\r\n      Object.values(entity.skills).forEach(skill => {\r\n        skill.breakdown = [];\r\n      })\r\n    })\r\n\r\n    this.emit(\"state-change\", clone);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 12:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      id: logLine.id,\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      classId: logLine.classId,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != 0 && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      id: logLine.id,\r\n      name: logLine.name,\r\n      npcId: logLine.npcId,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    const entity = this.game.entities[logLine.name];\r\n\r\n    let deaths = 0;\r\n    if (!entity) deaths = 1;\r\n    else if (entity.isDead) deaths = entity.deaths;\r\n    else deaths = entity.deaths + 1;\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: +logLine.timestamp,\r\n      deaths,\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n\r\n    const entity = this.game.entities[logLine.name];\r\n    if (entity) {\r\n      entity.hits.casts += 1;\r\n\r\n      if (!(logLine.skillName in entity.skills)) {\r\n        entity.skills[logLine.skillName] = {\r\n          ...createEntitySkill(),\r\n          ...{ id: logLine.skillId, name: logLine.skillName }\r\n        };\r\n        entity.skills[logLine.skillName].hits.casts += 1;\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 13) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      id: logLine.id,\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      id: logLine.targetId,\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (logLine.skillId === 0 && logLine.skillEffectId !== 0) {\r\n        logLine.skillId = logLine.skillEffectId;\r\n        logLine.skillName = logLine.skillEffect;\r\n    }\r\n\r\n    if (!(logLine.skillName in damageOwner.skills)) {\r\n      damageOwner.skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ id: logLine.skillId, name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    const hitFlag: HitFlag = logLine.damageModifier & 0xf;\r\n    const hitOption: HitOption = ((logLine.damageModifier >> 4) & 0x7) - 1;\r\n\r\n    // TODO: Keeping for now; Not sure if referring to damage share on Valtan G1 or something else\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && hitFlag === HitFlag.HIT_FLAG_DAMAGE_SHARE) return;\r\n\r\n    const isCrit =\r\n      hitFlag === HitFlag.HIT_FLAG_CRITICAL ||\r\n      hitFlag === HitFlag.HIT_FLAG_DOT_CRITICAL;\r\n    const isBackAttack = hitOption === HitOption.HIT_OPTION_BACK_ATTACK;\r\n    const isFrontAttack = hitOption === HitOption.HIT_OPTION_FRONTAL_ATTACK;\r\n\r\n    const critCount = isCrit ? 1 : 0;\r\n    const backAttackCount = isBackAttack ? 1 : 0;\r\n    const frontAttackCount = isFrontAttack ? 1 : 0;\r\n\r\n    damageOwner.skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      damageOwner.skills[logLine.skillName].maxDamage\r\n    )\r\n      damageOwner.skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    damageOwner.damageDealt += logLine.damage;\r\n    damageTarget.damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      damageOwner.hits.total += 1;\r\n      damageOwner.hits.crit += critCount;\r\n      damageOwner.hits.backAttack += backAttackCount;\r\n      damageOwner.hits.frontAttack += frontAttackCount;\r\n\r\n      damageOwner.skills[logLine.skillName].hits.total += 1;\r\n      damageOwner.skills[logLine.skillName].hits.crit += critCount;\r\n      damageOwner.skills[logLine.skillName].hits.backAttack += backAttackCount;\r\n      damageOwner.skills[logLine.skillName].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n\r\n      const breakdown: Breakdown = {\r\n        timestamp: +logLine.timestamp,\r\n        damage: logLine.damage,\r\n        targetEntity: damageTarget.id,\r\n        isCrit,\r\n        isBackAttack,\r\n        isFrontAttack,\r\n      }\r\n\r\n      damageOwner.skills[logLine.skillName].breakdown.push(breakdown);\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 12\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { LogParser } from \"./parser\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\r\ndayjs.extend(customParseFormat);\r\n\r\nexport default function fileParserWorker(\r\n  filename: string,\r\n  splitOnPhaseTransition: boolean,\r\n  mainFolder: string,\r\n  parsedLogFolder: string,\r\n  callback: CallableFunction\r\n) {\r\n  try {\r\n    const filenameSlice = filename.slice(0, -4);\r\n    const jsonName = filenameSlice + \".json\";\r\n\r\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\r\n    if (!contents) return callback(null, \"empty log\");\r\n\r\n    const logParser = new LogParser(false);\r\n    if (splitOnPhaseTransition === true)\r\n      logParser.splitOnPhaseTransition = true;\r\n\r\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\r\n    for (const line of lines) {\r\n      logParser.parseLogLine(line);\r\n    }\r\n    logParser.splitEncounter();\r\n\r\n    const encounters = logParser.encounters;\r\n\r\n    if (encounters.length > 0) {\r\n      const masterLog = { encounters: [] };\r\n\r\n      for (const encounter of encounters) {\r\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\r\n\r\n        if (duration <= 1000) continue;\r\n\r\n        let mostDamageTakenEntity = {\r\n          name: \"\",\r\n          damageTaken: 0,\r\n          isPlayer: false\r\n        };\r\n\r\n        for (const i of Object.values(encounter.entities)) {\r\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\r\n            mostDamageTakenEntity = {\r\n              name: i.name,\r\n              damageTaken: i.damageTaken,\r\n              isPlayer: i.isPlayer\r\n            };\r\n          }\r\n        }\r\n\r\n        const encounterDetails = {\r\n          duration,\r\n          mostDamageTakenEntity\r\n        };\r\n\r\n        const encounterId = uuidv4();\r\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\r\n        masterLog.encounters.push({\r\n          encounterId,\r\n          encounterFile,\r\n          ...encounterDetails\r\n        });\r\n\r\n        fs.writeFileSync(\r\n          path.join(parsedLogFolder, encounterFile),\r\n          JSON.stringify({\r\n            ...encounter,\r\n            ...encounterDetails\r\n          })\r\n        );\r\n      }\r\n\r\n      fs.writeFileSync(\r\n        path.join(parsedLogFolder, jsonName),\r\n        JSON.stringify(masterLog)\r\n      );\r\n\r\n      return callback(null, \"log parsed\");\r\n    }\r\n\r\n    return callback(null, \"no encounters found\");\r\n  } catch (e) {\r\n    return callback(e, \"log parser error\");\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","float","isNaN","intNum","parseFloat","parseInt","_unused","LogLine","constructor","lineSplit","this","timestamp","Date","super","message","LogPhaseTransition","phaseCode","LogNewPc","id","name","classId","class","gearScore","currentHp","maxHp","LogNewNpc","npcId","LogDeath","killerId","killerName","LogSkillStart","skillId","skillName","skillStage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","LogHeal","healAmount","LogBuff","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","HitOption","HitFlag","LogParser","isLive","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","bind","emit","type","clone","cloneDeep","startedOn","curTime","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","entitiesCopy","entity","keys","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","Object","values","forEach","skills","skill","breakdown","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","updateTime","_extends","isDead","deaths","deathTime","damageDealt","healingDone","shieldDone","damageTaken","hits","casts","total","crit","backAttack","frontAttack","counter","logLine","startsWith","setTimeout","LogLines.LogPhaseTransition","LogLines","includes","source","expires","totalDamage","maxDamage","damageOwner","damageTarget","hitFlag","HIT_FLAG_DAMAGE_SHARE","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","hitOption","HIT_OPTION_BACK_ATTACK","isFrontAttack","HIT_OPTION_FRONTAL_ATTACK","critCount","isCrit","backAttackCount","isBackAttack","frontAttackCount","Math","max","targetEntity","LogLines.LogBuff","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","slice","jsonName","filenameSlice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","encounter","mostDamageTakenEntity","i","encounterId","uuidv4","encounterFile","masterLog","encounterDetails","writeFileSync","JSON","stringify","dayjs","extend","customParseFormat"],"mappings":"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"}