{"version":3,"file":"file-parser-worker.modern.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.isCrit = lineSplit[12] == \"1\";\r\n    this.isBackAttack = lineSplit[13] == \"1\";\r\n    this.isFrontAttack = lineSplit[14] == \"1\";\r\n    this.currentHp = tryParseInt(lineSplit[15]);\r\n    this.maxHp = tryParseInt(lineSplit[16]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 16) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\r\n\r\n    const critCount = logLine.isCrit ? 1 : 0;\r\n    const backAttackCount = logLine.isBackAttack ? 1 : 0;\r\n    const frontAttackCount = logLine.isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { LogParser } from \"./parser.js\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat.js\";\r\ndayjs.extend(customParseFormat);\r\n\r\nexport default function fileParserWorker(\r\n  filename: string,\r\n  splitOnPhaseTransition: boolean,\r\n  mainFolder: string,\r\n  parsedLogFolder: string,\r\n  callback: CallableFunction\r\n) {\r\n  try {\r\n    const filenameSlice = filename.slice(0, -4);\r\n    const jsonName = filenameSlice + \".json\";\r\n\r\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\r\n    if (!contents) return callback(null, \"empty log\");\r\n\r\n    const logParser = new LogParser(false);\r\n    if (splitOnPhaseTransition === true)\r\n      logParser.splitOnPhaseTransition = true;\r\n\r\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\r\n    for (const line of lines) {\r\n      logParser.parseLogLine(line);\r\n    }\r\n    logParser.splitEncounter();\r\n\r\n    const encounters = logParser.encounters;\r\n\r\n    if (encounters.length > 0) {\r\n      const masterLog = { encounters: [] };\r\n\r\n      for (const encounter of encounters) {\r\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\r\n\r\n        if (duration <= 1000) continue;\r\n\r\n        let mostDamageTakenEntity = {\r\n          name: \"\",\r\n          damageTaken: 0,\r\n          isPlayer: false\r\n        };\r\n\r\n        for (const i of Object.values(encounter.entities)) {\r\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\r\n            mostDamageTakenEntity = {\r\n              name: i.name,\r\n              damageTaken: i.damageTaken,\r\n              isPlayer: i.isPlayer\r\n            };\r\n          }\r\n        }\r\n\r\n        const encounterDetails = {\r\n          duration,\r\n          mostDamageTakenEntity\r\n        };\r\n\r\n        const encounterId = uuidv4();\r\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\r\n        masterLog.encounters.push({\r\n          encounterId,\r\n          encounterFile,\r\n          ...encounterDetails\r\n        });\r\n\r\n        fs.writeFileSync(\r\n          path.join(parsedLogFolder, encounterFile),\r\n          JSON.stringify({\r\n            ...encounter,\r\n            ...encounterDetails\r\n          })\r\n        );\r\n      }\r\n\r\n      fs.writeFileSync(\r\n        path.join(parsedLogFolder, jsonName),\r\n        JSON.stringify(masterLog)\r\n      );\r\n\r\n      return callback(null, \"log parsed\");\r\n    }\r\n\r\n    return callback(null, \"no encounters found\");\r\n  } catch (e) {\r\n    return callback(e, \"log parser error\");\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","LogLine","constructor","lineSplit","this","timestamp","LogMessage","super","message","LogPhaseTransition","phaseCode","id","name","classId","class","gearScore","currentHp","maxHp","killerId","killerName","LogSkillStart","skillId","skillName","LogSkillStage","skillStage","LogDamage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","isCrit","isBackAttack","isFrontAttack","LogHeal","healAmount","LogBuff","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","Date","startedOn","curTime","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","entitiesCopy","cloneDeep","entity","Object","keys","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","updateTime","logLine","startsWith","setTimeout","LogLines","LogLines.LogNewNpc","getTime","includes","source","expires","LogLines.LogSkillStage","damageTarget","totalDamage","maxDamage","critCount","backAttackCount","frontAttackCount","damageOwner","Math","max","LogLines.LogHeal","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","slice","jsonName","filenameSlice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","encounter","mostDamageTakenEntity","i","encounterId","uuidv4","encounterFile","masterLog","encounterDetails","writeFileSync","JSON","stringify","dayjs","extend","customParseFormat"],"mappings":"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"}