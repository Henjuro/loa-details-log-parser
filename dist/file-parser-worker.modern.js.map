{"version":3,"file":"file-parser-worker.modern.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0, radix = 10) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString, radix);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: number;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = tryParseInt(lineSplit[11], 0, 16);\r\n    this.currentHp = tryParseInt(lineSplit[12]);\r\n    this.maxHp = tryParseInt(lineSplit[13]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n\r\nexport enum HitFlag {\r\n  HIT_FLAG_NORMAL = 0,\r\n  HIT_FLAG_CRITICAL = 1,\r\n  HIT_FLAG_MISS = 2,\r\n  HIT_FLAG_INVINCIBLE = 3,\r\n  HIT_FLAG_DOT = 4,\r\n  HIT_FLAG_IMMUNE = 5,\r\n  HIT_FLAG_IMMUNE_SILENCED = 6,\r\n  HIT_FLAG_FONT_SILENCED = 7,\r\n  HIT_FLAG_DOT_CRITICAL = 8,\r\n  HIT_FLAG_DODGE = 9,\r\n  HIT_FLAG_REFLECT = 10,\r\n  HIT_FLAG_DAMAGE_SHARE = 11,\r\n  HIT_FLAG_DODGE_HIT = 12,\r\n  HIT_FLAG_MAX = 13,\r\n  HIT_OPTION_BACK_ATTACK = 1 << (0 + 4),\r\n  HIT_OPTION_FRONTAL_ATTACK = 1 << (1 + 4),\r\n  HIT_OPTION_FLANK_ATTACK = 1 << (2 + 4)\r\n}\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills, HitFlag } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 16) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    // Remove 'sync' bleeds on G1 Valtan\r\n    if (logLine.skillName === \"Bleed\" && logLine.damageModifier === 11) return;\r\n\r\n    const isCrit =\r\n      (logLine.damageModifier &\r\n        (HitFlag.HIT_FLAG_CRITICAL | HitFlag.HIT_FLAG_DOT_CRITICAL)) >\r\n      0;\r\n    const isBackAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_BACK_ATTACK) > 0;\r\n    const isFrontAttack =\r\n      (logLine.damageModifier & HitFlag.HIT_OPTION_FRONTAL_ATTACK) > 0;\r\n\r\n    const critCount = isCrit ? 1 : 0;\r\n    const backAttackCount = isBackAttack ? 1 : 0;\r\n    const frontAttackCount = isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { LogParser } from \"./parser.js\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat.js\";\r\ndayjs.extend(customParseFormat);\r\n\r\nexport default function fileParserWorker(\r\n  filename: string,\r\n  splitOnPhaseTransition: boolean,\r\n  mainFolder: string,\r\n  parsedLogFolder: string,\r\n  callback: CallableFunction\r\n) {\r\n  try {\r\n    const filenameSlice = filename.slice(0, -4);\r\n    const jsonName = filenameSlice + \".json\";\r\n\r\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\r\n    if (!contents) return callback(null, \"empty log\");\r\n\r\n    const logParser = new LogParser(false);\r\n    if (splitOnPhaseTransition === true)\r\n      logParser.splitOnPhaseTransition = true;\r\n\r\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\r\n    for (const line of lines) {\r\n      logParser.parseLogLine(line);\r\n    }\r\n    logParser.splitEncounter();\r\n\r\n    const encounters = logParser.encounters;\r\n\r\n    if (encounters.length > 0) {\r\n      const masterLog = { encounters: [] };\r\n\r\n      for (const encounter of encounters) {\r\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\r\n\r\n        if (duration <= 1000) continue;\r\n\r\n        let mostDamageTakenEntity = {\r\n          name: \"\",\r\n          damageTaken: 0,\r\n          isPlayer: false\r\n        };\r\n\r\n        for (const i of Object.values(encounter.entities)) {\r\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\r\n            mostDamageTakenEntity = {\r\n              name: i.name,\r\n              damageTaken: i.damageTaken,\r\n              isPlayer: i.isPlayer\r\n            };\r\n          }\r\n        }\r\n\r\n        const encounterDetails = {\r\n          duration,\r\n          mostDamageTakenEntity\r\n        };\r\n\r\n        const encounterId = uuidv4();\r\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\r\n        masterLog.encounters.push({\r\n          encounterId,\r\n          encounterFile,\r\n          ...encounterDetails\r\n        });\r\n\r\n        fs.writeFileSync(\r\n          path.join(parsedLogFolder, encounterFile),\r\n          JSON.stringify({\r\n            ...encounter,\r\n            ...encounterDetails\r\n          })\r\n        );\r\n      }\r\n\r\n      fs.writeFileSync(\r\n        path.join(parsedLogFolder, jsonName),\r\n        JSON.stringify(masterLog)\r\n      );\r\n\r\n      return callback(null, \"log parsed\");\r\n    }\r\n\r\n    return callback(null, \"no encounters found\");\r\n  } catch (e) {\r\n    return callback(e, \"log parser error\");\r\n  }\r\n}\r\n"],"names":["tryParseInt","intString","defaultValue","radix","isNaN","intNum","parseInt","_unused","LogLine","constructor","lineSplit","this","timestamp","Date","super","message","LogPhaseTransition","phaseCode","LogNewPc","id","name","classId","class","gearScore","currentHp","maxHp","LogNewNpc","LogDeath","killerId","killerName","LogSkillStart","skillId","skillName","LogSkillStage","skillStage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","isCrit","isBackAttack","isFrontAttack","LogHeal","healAmount","LogBuff","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","HitFlag","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","EventEmitter","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","entitiesCopy","cloneDeep","Object","keys","entity","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","logLine","LogLines","startsWith","setTimeout","LogLines.LogNewPc","LogLines.LogNewNpc","getTime","includes","source","expires","LogLines.LogSkillStage","damageOwner","damageTarget","createEntitySkill","totalDamage","maxDamage","critCount","HIT_FLAG_CRITICAL","HIT_FLAG_DOT_CRITICAL","backAttackCount","HIT_OPTION_BACK_ATTACK","frontAttackCount","HIT_OPTION_FRONTAL_ATTACK","Math","max","LogLines.LogHeal","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","slice","jsonName","filenameSlice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","encounter","mostDamageTakenEntity","i","encounterId","uuidv4","encounterFile","masterLog","encounterDetails","writeFileSync","JSON","stringify","dayjs","extend","customParseFormat"],"mappings":"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"}