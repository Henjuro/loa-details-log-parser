{"version":3,"file":"file-parser-worker.modern.js","sources":["../src/util.ts","../src/log-lines.ts","../src/constants.ts","../src/parser.ts","../src/file-parser-worker.ts"],"sourcesContent":["export function tryParseInt(intString: string, defaultValue = 0) {\r\n  if (typeof intString === \"number\") {\r\n    if (isNaN(intString)) return defaultValue;\r\n    return intString;\r\n  }\r\n\r\n  let intNum: number;\r\n\r\n  try {\r\n    intNum = parseInt(intString);\r\n    if (isNaN(intNum)) intNum = defaultValue;\r\n  } catch {\r\n    intNum = defaultValue;\r\n  }\r\n\r\n  return intNum;\r\n}\r\n","import { tryParseInt } from \"./util.js\";\r\n\r\nclass LogLine {\r\n  lineSplit: string[];\r\n  timestamp: Date;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    this.lineSplit = lineSplit;\r\n    this.timestamp = new Date(this.lineSplit[1]);\r\n  }\r\n}\r\n\r\n// logId = 0\r\nexport class LogMessage extends LogLine {\r\n  message: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.message = this.lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 1\r\nexport class LogInitEnv extends LogLine {\r\n  playerId: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.playerId = lineSplit[2];\r\n  }\r\n}\r\n\r\n// logId = 2\r\nexport class LogPhaseTransition extends LogLine {\r\n  phaseCode: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.phaseCode = tryParseInt(lineSplit[2]);\r\n  }\r\n}\r\n\r\n// logId = 3\r\nexport class LogNewPc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  classId: number;\r\n  class: string;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.classId = tryParseInt(lineSplit[4]);\r\n    this.class = lineSplit[5] || \"UnknownClass\";\r\n    /* this.level = tryParseInt(lineSplit[6]); */\r\n    this.gearScore = lineSplit[7];\r\n    this.currentHp = tryParseInt(lineSplit[8]);\r\n    this.maxHp = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 4\r\nexport class LogNewNpc extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    //this.npcId = tryParseInt(lineSplit[3]);\r\n    this.name = lineSplit[4] || \"Unknown Entity\";\r\n    this.currentHp = tryParseInt(lineSplit[5]);\r\n    this.maxHp = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 5\r\nexport class LogDeath extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  killerId: string;\r\n  killerName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.killerId = lineSplit[4];\r\n    this.killerName = lineSplit[5] || \"Unknown Entity\";\r\n  }\r\n}\r\n\r\n// logId = 6\r\nexport class LogSkillStart extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n  }\r\n}\r\n\r\n// logId = 7\r\nexport class LogSkillStage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: string;\r\n  skillName: string;\r\n  skillStage: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = lineSplit[4];\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillStage = tryParseInt(lineSplit[6]);\r\n  }\r\n}\r\n\r\n// logId = 8\r\nexport class LogDamage extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  skillId: number;\r\n  skillName: string;\r\n  skillEffectId: number;\r\n  skillEffect: string;\r\n  targetId: string;\r\n  targetName: string;\r\n  damage: number;\r\n  damageModifier: boolean;\r\n  isCrit: boolean;\r\n  isBackAttack: boolean;\r\n  isFrontAttack: boolean;\r\n  currentHp: number;\r\n  maxHp: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.skillId = tryParseInt(lineSplit[4]);\r\n    this.skillName = lineSplit[5] || \"Unknown Skill\";\r\n    this.skillEffectId = tryParseInt(lineSplit[6]);\r\n    this.skillEffect = lineSplit[7];\r\n    this.targetId = lineSplit[8];\r\n    this.targetName = lineSplit[9] || \"Unknown Entity\";\r\n    this.damage = tryParseInt(lineSplit[10]);\r\n    this.damageModifier = lineSplit[11] == \"1\";\r\n    this.isCrit = lineSplit[12] == \"1\";\r\n    this.isBackAttack = lineSplit[13] == \"1\";\r\n    this.isFrontAttack = lineSplit[14] == \"1\";\r\n    this.currentHp = tryParseInt(lineSplit[15]);\r\n    this.maxHp = tryParseInt(lineSplit[16]);\r\n  }\r\n}\r\n\r\n// logId = 9\r\nexport class LogHeal extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  healAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.healAmount = tryParseInt(lineSplit[4]);\r\n    //this.currentHp = tryParseInt(lineSplit[5]);\r\n  }\r\n}\r\n\r\n// logId = 10\r\nexport class LogBuff extends LogLine {\r\n  id: string;\r\n  name: string;\r\n  buffId: string;\r\n  buffName: string;\r\n  isNew: boolean;\r\n  sourceId: string;\r\n  sourceName: string;\r\n  shieldAmount: number;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    this.buffId = lineSplit[4];\r\n    this.buffName = lineSplit[5];\r\n    this.isNew = lineSplit[6] == \"1\";\r\n    this.sourceId = lineSplit[7];\r\n    this.sourceName = lineSplit[8] || \"Unknown Entity\";\r\n    this.shieldAmount = tryParseInt(lineSplit[9]);\r\n  }\r\n}\r\n\r\n// logId = 11\r\nexport class LogCounterattack extends LogLine {\r\n  id: string;\r\n  name: string;\r\n\r\n  constructor(lineSplit: string[]) {\r\n    super(lineSplit);\r\n\r\n    this.id = lineSplit[2];\r\n    this.name = lineSplit[3] || \"Unknown Entity\";\r\n    /* this.targetId = lineSplit[4];\r\n    this.targetName = lineSplit[5] || \"Unknown Entity\"; */\r\n  }\r\n}\r\n","interface HealingSkills {\r\n  [key: string]: HealingSkillDetails;\r\n}\r\ninterface HealingSkillDetails {\r\n  duration: number;\r\n}\r\nexport const healingSkills: HealingSkills = {\r\n  \"Serenade of Salvation\": {\r\n    duration: 3\r\n  },\r\n  \"Holy Aura\": {\r\n    duration: 16 * 1000\r\n  },\r\n  \"Holy Protection\": {\r\n    duration: 7 * 1000\r\n  },\r\n  Demonize: {\r\n    duration: 1.5 * 1000\r\n  }\r\n};\r\n","import cloneDeep from \"lodash/cloneDeep.js\";\r\nimport EventEmitter from \"events\";\r\n\r\nimport * as LogLines from \"./log-lines.js\";\r\nimport { tryParseInt } from \"./util.js\";\r\nimport { healingSkills } from \"./constants.js\";\r\n\r\ninterface Game {\r\n  startedOn: number;\r\n  lastCombatPacket: number;\r\n  fightStartedOn: number;\r\n  entities: { [name: string]: Entity };\r\n  damageStatistics: {\r\n    totalDamageDealt: number;\r\n    topDamageDealt: number;\r\n    totalDamageTaken: number;\r\n    topDamageTaken: number;\r\n    totalHealingDone: number;\r\n    topHealingDone: number;\r\n    totalShieldDone: number;\r\n    topShieldDone: number;\r\n  };\r\n}\r\ninterface HealSource {\r\n  source: string;\r\n  expires: number;\r\n}\r\n\r\ninterface Entity {\r\n  lastUpdate: number;\r\n  id: string;\r\n  name: string;\r\n  class: string;\r\n  isPlayer: boolean;\r\n  isDead: boolean;\r\n  deathTime: number;\r\n  gearScore: string;\r\n  currentHp: number;\r\n  maxHp: number;\r\n  damageDealt: number;\r\n  healingDone: number;\r\n  shieldDone: number;\r\n  damageTaken: number;\r\n  skills: { [name: string]: EntitySkills };\r\n  hits: Hits;\r\n}\r\ninterface EntitySkills {\r\n  name: string;\r\n  totalDamage: number;\r\n  maxDamage: number;\r\n  hits: Hits;\r\n}\r\nfunction createEntitySkill(): EntitySkills {\r\n  const newEntitySkill: EntitySkills = {\r\n    name: \"\",\r\n    totalDamage: 0,\r\n    maxDamage: 0,\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntitySkill;\r\n}\r\n\r\ninterface Hits {\r\n  total: number;\r\n  crit: number;\r\n  backAttack: number;\r\n  frontAttack: number;\r\n  counter: number;\r\n}\r\nfunction createEntity(): Entity {\r\n  const newEntity: Entity = {\r\n    lastUpdate: 0,\r\n    id: \"\",\r\n    name: \"\",\r\n    class: \"\",\r\n    isPlayer: false,\r\n    isDead: false,\r\n    deathTime: 0,\r\n    gearScore: \"\",\r\n    currentHp: 0,\r\n    maxHp: 0,\r\n    damageDealt: 0,\r\n    healingDone: 0,\r\n    shieldDone: 0,\r\n    damageTaken: 0,\r\n    skills: {},\r\n    hits: {\r\n      total: 0,\r\n      crit: 0,\r\n      backAttack: 0,\r\n      frontAttack: 0,\r\n      counter: 0\r\n    }\r\n  };\r\n  return newEntity;\r\n}\r\n\r\nexport class LogParser {\r\n  eventEmitter: EventEmitter;\r\n  resetTimer: ReturnType<typeof setTimeout>;\r\n\r\n  debugLines: boolean;\r\n  isLive: boolean;\r\n  dontResetOnZoneChange: boolean;\r\n  resetAfterPhaseTransition: boolean;\r\n  splitOnPhaseTransition: boolean;\r\n  removeOverkillDamage: boolean;\r\n\r\n  phaseTransitionResetRequest: boolean;\r\n  phaseTransitionResetRequestTime: number;\r\n\r\n  game: Game;\r\n  encounters: Game[];\r\n  healSources: HealSource[];\r\n\r\n  constructor(isLive = false) {\r\n    this.eventEmitter = new EventEmitter();\r\n    this.resetTimer = null;\r\n\r\n    this.debugLines = false;\r\n    this.isLive = isLive;\r\n    this.dontResetOnZoneChange = false;\r\n    this.resetAfterPhaseTransition = false;\r\n    this.splitOnPhaseTransition = false;\r\n    this.removeOverkillDamage = true;\r\n\r\n    this.phaseTransitionResetRequest = false;\r\n    this.phaseTransitionResetRequestTime = 0;\r\n\r\n    this.resetState();\r\n    this.encounters = [];\r\n\r\n    if (this.isLive) {\r\n      setInterval(this.broadcastStateChange.bind(this), 100);\r\n    }\r\n  }\r\n\r\n  resetState() {\r\n    if (this.debugLines)\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: \"Resetting state\"\r\n      });\r\n\r\n    const curTime = +new Date();\r\n\r\n    this.game = {\r\n      startedOn: curTime,\r\n      lastCombatPacket: curTime,\r\n      fightStartedOn: 0,\r\n      entities: {},\r\n      damageStatistics: {\r\n        totalDamageDealt: 0,\r\n        topDamageDealt: 0,\r\n        totalDamageTaken: 0,\r\n        topDamageTaken: 0,\r\n        totalHealingDone: 0,\r\n        topHealingDone: 0,\r\n        totalShieldDone: 0,\r\n        topShieldDone: 0\r\n      }\r\n    };\r\n\r\n    this.healSources = [];\r\n\r\n    this.eventEmitter.emit(\"reset-state\");\r\n  }\r\n  softReset() {\r\n    this.resetTimer = null;\r\n    const entitiesCopy = cloneDeep(this.game.entities);\r\n    this.resetState();\r\n    for (const entity of Object.keys(entitiesCopy)) {\r\n      // don't keep entity if it hasn't been updated in 10 minutes\r\n      if (+new Date() - entitiesCopy[entity].lastUpdate > 10 * 60 * 1000)\r\n        continue;\r\n\r\n      this.updateEntity(entitiesCopy[entity].name, {\r\n        name: entitiesCopy[entity].name,\r\n        class: entitiesCopy[entity].class,\r\n        isPlayer: entitiesCopy[entity].isPlayer,\r\n        gearScore: entitiesCopy[entity].gearScore,\r\n        maxHp: entitiesCopy[entity].maxHp,\r\n        currentHp: entitiesCopy[entity].currentHp\r\n      });\r\n    }\r\n  }\r\n  cancelReset() {\r\n    if (this.resetTimer) clearTimeout(this.resetTimer);\r\n    this.resetTimer = null;\r\n  }\r\n  splitEncounter() {\r\n    const curState = cloneDeep(this.game);\r\n    if (\r\n      curState.fightStartedOn != 0 && // no combat packets\r\n      (curState.damageStatistics.totalDamageDealt != 0 ||\r\n        curState.damageStatistics.totalDamageTaken) // no player damage dealt OR taken\r\n    )\r\n      this.encounters.push(curState);\r\n    this.resetState();\r\n  }\r\n\r\n  broadcastStateChange() {\r\n    this.eventEmitter.emit(\"state-change\", this.game);\r\n  }\r\n\r\n  parseLogLine(line: string) {\r\n    if (!line) return;\r\n\r\n    const lineSplit = line.trim().split(\"|\");\r\n    if (lineSplit.length < 1 || !lineSplit[0]) return;\r\n\r\n    const logType = tryParseInt(lineSplit[0]);\r\n\r\n    try {\r\n      switch (logType) {\r\n        case 0:\r\n          this.onMessage(lineSplit);\r\n          break;\r\n        case 1:\r\n          this.onInitEnv(/* lineSplit */);\r\n          break;\r\n        case 2:\r\n          this.onPhaseTransition(lineSplit);\r\n          break;\r\n        case 3:\r\n          this.onNewPc(lineSplit);\r\n          break;\r\n        case 4:\r\n          this.onNewNpc(lineSplit);\r\n          break;\r\n        case 5:\r\n          this.onDeath(lineSplit);\r\n          break;\r\n        case 6:\r\n          this.onSkillStart(lineSplit);\r\n          break;\r\n        case 7:\r\n          this.onSkillStage(lineSplit);\r\n          break;\r\n        case 8:\r\n          this.onDamage(lineSplit);\r\n          break;\r\n        case 9:\r\n          this.onHeal(lineSplit);\r\n          break;\r\n        case 10:\r\n          this.onBuff(lineSplit);\r\n          break;\r\n        case 11:\r\n          this.onCounterattack(lineSplit);\r\n          break;\r\n      }\r\n    } catch (e) {\r\n      this.eventEmitter.emit(\"log\", { type: \"error\", message: e });\r\n    }\r\n  }\r\n\r\n  updateEntity(entityName: string, values) {\r\n    const updateTime = { lastUpdate: +new Date() };\r\n    if (!(entityName in this.game.entities)) {\r\n      this.game.entities[entityName] = {\r\n        ...createEntity(),\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    } else {\r\n      this.game.entities[entityName] = {\r\n        ...this.game.entities[entityName],\r\n        ...values,\r\n        ...updateTime\r\n      };\r\n    }\r\n  }\r\n\r\n  // logId = 0\r\n  onMessage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogMessage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onMessage: ${logLine.message}`\r\n      });\r\n    }\r\n\r\n    if (!logLine.message.startsWith(\"Arguments:\")) {\r\n      this.eventEmitter.emit(\"message\", logLine.message);\r\n    }\r\n  }\r\n\r\n  // logId = 1\r\n  onInitEnv(/* lineSplit: string[] */) {\r\n    //const logLine = new LogLines.LogInitEnv(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onInitEnv`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      if (this.dontResetOnZoneChange === false && this.resetTimer == null) {\r\n        if (this.debugLines) {\r\n          this.eventEmitter.emit(\"log\", {\r\n            type: \"debug\",\r\n            message: `Setting a reset timer`\r\n          });\r\n        }\r\n\r\n        this.resetTimer = setTimeout(this.softReset.bind(this), 6000);\r\n        this.eventEmitter.emit(\"message\", \"new-zone\");\r\n      }\r\n    } else {\r\n      this.splitEncounter();\r\n      this.eventEmitter.emit(\"message\", \"new-zone\");\r\n    }\r\n  }\r\n\r\n  // logId = 2\r\n  onPhaseTransition(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogPhaseTransition(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onPhaseTransition: ${logLine.phaseCode}`\r\n      });\r\n    }\r\n\r\n    if (this.isLive) {\r\n      this.eventEmitter.emit(\r\n        \"message\",\r\n        `phase-transition-${logLine.phaseCode}`\r\n      );\r\n\r\n      if (this.resetAfterPhaseTransition) {\r\n        this.phaseTransitionResetRequest = true;\r\n        this.phaseTransitionResetRequestTime = +new Date();\r\n      }\r\n    }\r\n\r\n    if (!this.isLive && this.splitOnPhaseTransition) {\r\n      this.splitEncounter();\r\n    }\r\n  }\r\n\r\n  // logId = 3\r\n  onNewPc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewPc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewPc: ${logLine.id}, ${logLine.name}, ${logLine.classId}, ${logLine.class}, ${logLine.gearScore}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      class: logLine.class,\r\n      isPlayer: true,\r\n      ...(logLine.gearScore &&\r\n        logLine.gearScore != \"0\" && { gearScore: logLine.gearScore }),\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 4\r\n  onNewNpc(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogNewNpc(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onNewNpc: ${logLine.id}, ${logLine.name}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isPlayer: false,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n  }\r\n\r\n  // logId = 5\r\n  onDeath(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogDeath(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDeath: ${logLine.name} ${logLine.killerName}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: true,\r\n      deathTime: logLine.timestamp.getTime()\r\n    });\r\n  }\r\n\r\n  // logId = 6\r\n  onSkillStart(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStart(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStart: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}`\r\n      });\r\n    }\r\n\r\n    if (Object.keys(healingSkills).includes(logLine.skillName)) {\r\n      this.healSources.push({\r\n        source: logLine.name,\r\n        expires: +logLine.timestamp + healingSkills[logLine.skillName].duration\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name,\r\n      isDead: false\r\n    });\r\n  }\r\n\r\n  // logId = 7\r\n  onSkillStage(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogSkillStage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onSkillStage: ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillStage}`\r\n      });\r\n    }\r\n  }\r\n\r\n  // logId = 8\r\n  onDamage(lineSplit: string[]) {\r\n    if (lineSplit.length < 16) return;\r\n    const logLine = new LogLines.LogDamage(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onDamage: ${logLine.id}, ${logLine.name}, ${logLine.skillId}, ${logLine.skillName}, ${logLine.skillEffectId}, ${logLine.skillEffect}, ${logLine.targetId}, ${logLine.targetName}, ${logLine.damage}, ${logLine.currentHp}, ${logLine.maxHp}`\r\n      });\r\n    }\r\n\r\n    if (\r\n      this.phaseTransitionResetRequest &&\r\n      this.phaseTransitionResetRequestTime > 0 &&\r\n      this.phaseTransitionResetRequestTime < +new Date() - 1500\r\n    ) {\r\n      this.softReset();\r\n      this.phaseTransitionResetRequest = false;\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    this.updateEntity(logLine.targetName, {\r\n      name: logLine.targetName,\r\n      currentHp: logLine.currentHp,\r\n      maxHp: logLine.maxHp\r\n    });\r\n\r\n    const damageOwner = this.game.entities[logLine.name];\r\n    const damageTarget = this.game.entities[logLine.targetName];\r\n\r\n    if (\r\n      !damageTarget.isPlayer &&\r\n      this.removeOverkillDamage &&\r\n      logLine.currentHp < 0\r\n    ) {\r\n      logLine.damage = logLine.damage + logLine.currentHp;\r\n    }\r\n\r\n    if (!(logLine.skillName in this.game.entities[logLine.name].skills)) {\r\n      this.game.entities[logLine.name].skills[logLine.skillName] = {\r\n        ...createEntitySkill(),\r\n        ...{ name: logLine.skillName }\r\n      };\r\n    }\r\n\r\n    // TODO: Not sure if this is fixed in the logger\r\n    if (logLine.skillName === \"Bleed\" && logLine.damage > 10000000) return;\r\n\r\n    const critCount = logLine.isCrit ? 1 : 0;\r\n    const backAttackCount = logLine.isBackAttack ? 1 : 0;\r\n    const frontAttackCount = logLine.isFrontAttack ? 1 : 0;\r\n\r\n    this.game.entities[logLine.name].skills[logLine.skillName].totalDamage +=\r\n      logLine.damage;\r\n    if (\r\n      logLine.damage >\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage\r\n    )\r\n      this.game.entities[logLine.name].skills[logLine.skillName].maxDamage =\r\n        logLine.damage;\r\n\r\n    this.game.entities[logLine.name].damageDealt += logLine.damage;\r\n    this.game.entities[logLine.targetName].damageTaken += logLine.damage;\r\n\r\n    if (logLine.skillName !== \"Bleed\") {\r\n      this.game.entities[logLine.name].hits.total += 1;\r\n      this.game.entities[logLine.name].hits.crit += critCount;\r\n      this.game.entities[logLine.name].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].hits.frontAttack += frontAttackCount;\r\n\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.total += 1;\r\n      this.game.entities[logLine.name].skills[logLine.skillName].hits.crit +=\r\n        critCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.backAttack += backAttackCount;\r\n      this.game.entities[logLine.name].skills[\r\n        logLine.skillName\r\n      ].hits.frontAttack += frontAttackCount;\r\n    }\r\n\r\n    if (damageOwner.isPlayer) {\r\n      this.game.damageStatistics.totalDamageDealt += logLine.damage;\r\n      this.game.damageStatistics.topDamageDealt = Math.max(\r\n        this.game.damageStatistics.topDamageDealt,\r\n        damageOwner.damageDealt\r\n      );\r\n    }\r\n\r\n    if (damageTarget.isPlayer) {\r\n      this.game.damageStatistics.totalDamageTaken += logLine.damage;\r\n      this.game.damageStatistics.topDamageTaken = Math.max(\r\n        this.game.damageStatistics.topDamageTaken,\r\n        damageTarget.damageTaken\r\n      );\r\n    }\r\n\r\n    if (this.game.fightStartedOn === 0)\r\n      this.game.fightStartedOn = +logLine.timestamp;\r\n    this.game.lastCombatPacket = +logLine.timestamp;\r\n  }\r\n\r\n  // logId = 9\r\n  onHeal(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogHeal(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onHeal: ${logLine.id}, ${logLine.name}, ${logLine.healAmount}`\r\n      });\r\n    }\r\n\r\n    let sourceName = \"\";\r\n    for (const source of this.healSources) {\r\n      if (source.expires >= +logLine.timestamp) {\r\n        sourceName = source.source;\r\n        break;\r\n      }\r\n    }\r\n    if (!sourceName) return;\r\n\r\n    this.updateEntity(sourceName, {\r\n      name: sourceName\r\n    });\r\n\r\n    this.game.entities[sourceName].healingDone += logLine.healAmount;\r\n\r\n    if (this.game.entities[sourceName].isPlayer) {\r\n      this.game.damageStatistics.totalHealingDone += logLine.healAmount;\r\n      this.game.damageStatistics.topHealingDone = Math.max(\r\n        this.game.damageStatistics.topHealingDone,\r\n        this.game.entities[sourceName].healingDone\r\n      );\r\n    }\r\n  }\r\n\r\n  // logId = 10\r\n  onBuff(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogBuff(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onBuff: ${logLine.id}, ${logLine.name}, ${logLine.buffId}, ${logLine.buffName}, ${logLine.sourceId}, ${logLine.sourceName}, ${logLine.shieldAmount}`\r\n      });\r\n    }\r\n\r\n    if (logLine.shieldAmount && logLine.isNew) {\r\n      this.updateEntity(logLine.name, {\r\n        name: logLine.name\r\n      });\r\n\r\n      this.game.entities[logLine.name].shieldDone += logLine.shieldAmount;\r\n\r\n      if (this.game.entities[logLine.name].isPlayer) {\r\n        this.game.damageStatistics.totalShieldDone += logLine.shieldAmount;\r\n        this.game.damageStatistics.topShieldDone = Math.max(\r\n          this.game.damageStatistics.topShieldDone,\r\n          this.game.entities[logLine.name].shieldDone\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  // logId = 11\r\n  onCounterattack(lineSplit: string[]) {\r\n    const logLine = new LogLines.LogCounterattack(lineSplit);\r\n\r\n    if (this.debugLines) {\r\n      this.eventEmitter.emit(\"log\", {\r\n        type: \"debug\",\r\n        message: `onCounterattack: ${logLine.id}, ${logLine.name}`\r\n      });\r\n    }\r\n\r\n    this.updateEntity(logLine.name, {\r\n      name: logLine.name\r\n    });\r\n\r\n    // TODO: Add skill name from logger\r\n    this.game.entities[logLine.name].hits.counter += 1;\r\n  }\r\n}\r\n","import dayjs from \"dayjs\";\r\nimport { LogParser } from \"./parser.js\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nimport customParseFormat from \"dayjs/plugin/customParseFormat.js\";\r\ndayjs.extend(customParseFormat);\r\n\r\nexport default function fileParserWorker(\r\n  filename: string,\r\n  splitOnPhaseTransition: boolean,\r\n  mainFolder: string,\r\n  parsedLogFolder: string,\r\n  callback: CallableFunction\r\n) {\r\n  try {\r\n    const filenameSlice = filename.slice(0, -4);\r\n    const jsonName = filenameSlice + \".json\";\r\n\r\n    const contents = fs.readFileSync(path.join(mainFolder, filename), \"utf-8\");\r\n    if (!contents) return callback(null, \"empty log\");\r\n\r\n    const logParser = new LogParser(false);\r\n    if (splitOnPhaseTransition === true)\r\n      logParser.splitOnPhaseTransition = true;\r\n\r\n    const lines = contents.split(\"\\n\").filter(x => x != null && x != \"\");\r\n    for (const line of lines) {\r\n      logParser.parseLogLine(line);\r\n    }\r\n    logParser.splitEncounter();\r\n\r\n    const encounters = logParser.encounters;\r\n\r\n    if (encounters.length > 0) {\r\n      const masterLog = { encounters: [] };\r\n\r\n      for (const encounter of encounters) {\r\n        const duration = encounter.lastCombatPacket - encounter.fightStartedOn;\r\n\r\n        if (duration <= 1000) continue;\r\n\r\n        let mostDamageTakenEntity = {\r\n          name: \"\",\r\n          damageTaken: 0,\r\n          isPlayer: false\r\n        };\r\n\r\n        for (const i of Object.values(encounter.entities)) {\r\n          if (i.damageTaken > mostDamageTakenEntity.damageTaken) {\r\n            mostDamageTakenEntity = {\r\n              name: i.name,\r\n              damageTaken: i.damageTaken,\r\n              isPlayer: i.isPlayer\r\n            };\r\n          }\r\n        }\r\n\r\n        const encounterDetails = {\r\n          duration,\r\n          mostDamageTakenEntity\r\n        };\r\n\r\n        const encounterId = uuidv4();\r\n        const encounterFile = `${filenameSlice}_${encounterId}_encounter.json`;\r\n        masterLog.encounters.push({\r\n          encounterId,\r\n          encounterFile,\r\n          ...encounterDetails\r\n        });\r\n\r\n        fs.writeFileSync(\r\n          path.join(parsedLogFolder, encounterFile),\r\n          JSON.stringify({\r\n            ...encounter,\r\n            ...encounterDetails\r\n          })\r\n        );\r\n      }\r\n\r\n      fs.writeFileSync(\r\n        path.join(parsedLogFolder, jsonName),\r\n        JSON.stringify(masterLog)\r\n      );\r\n\r\n      return callback(null, \"log parsed\");\r\n    }\r\n\r\n    return callback(null, \"no encounters found\");\r\n  } catch (e) {\r\n    return callback(e, \"log parser error\");\r\n  }\r\n}\r\n"],"names":["intString","defaultValue","isNaN","intNum","parseInt","_unused","LogLine","constructor","lineSplit","this","timestamp","LogMessage","super","message","LogPhaseTransition","phaseCode","tryParseInt","id","name","classId","class","gearScore","currentHp","maxHp","LogNewNpc","LogDeath","killerId","killerName","skillId","skillName","LogSkillStage","skillStage","LogDamage","skillEffectId","skillEffect","targetId","targetName","damage","damageModifier","isCrit","isBackAttack","isFrontAttack","LogHeal","healAmount","LogBuff","buffId","buffName","isNew","sourceId","sourceName","shieldAmount","LogCounterattack","healingSkills","duration","Demonize","LogParser","isLive","eventEmitter","resetTimer","debugLines","dontResetOnZoneChange","resetAfterPhaseTransition","splitOnPhaseTransition","removeOverkillDamage","phaseTransitionResetRequest","phaseTransitionResetRequestTime","game","encounters","healSources","resetState","setInterval","broadcastStateChange","bind","emit","type","curTime","Date","startedOn","lastCombatPacket","fightStartedOn","entities","damageStatistics","totalDamageDealt","topDamageDealt","totalDamageTaken","topDamageTaken","totalHealingDone","topHealingDone","totalShieldDone","topShieldDone","softReset","cloneDeep","entity","Object","keys","entitiesCopy","lastUpdate","updateEntity","isPlayer","cancelReset","clearTimeout","splitEncounter","curState","push","parseLogLine","line","trim","split","length","logType","onMessage","onInitEnv","onPhaseTransition","onNewPc","onNewNpc","onDeath","onSkillStart","onSkillStage","onDamage","onHeal","onBuff","onCounterattack","e","entityName","values","updateTime","_extends","isDead","deathTime","damageDealt","healingDone","shieldDone","damageTaken","skills","hits","total","crit","backAttack","frontAttack","counter","logLine","startsWith","setTimeout","LogLines","getTime","LogLines.LogSkillStart","includes","source","expires","LogLines.LogDamage","damageOwner","damageTarget","totalDamage","maxDamage","frontAttackCount","critCount","backAttackCount","Math","max","LogLines.LogBuff","fileParserWorker","filename","mainFolder","parsedLogFolder","callback","slice","jsonName","filenameSlice","contents","fs","readFileSync","path","join","logParser","lines","filter","x","encounter","mostDamageTakenEntity","i","encounterId","uuidv4","encounterFile","masterLog","encounterDetails","writeFileSync","JSON","stringify","dayjs","extend","customParseFormat"],"mappings":"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"}